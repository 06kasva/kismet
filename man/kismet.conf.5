.\" Text automatically generated by txt2man-1.4.5
.TH kismet.conf 5 "September 21, 2002" "" ""
.SH NAME
\fBkismet.conf \fP- Wireless sniffing and monitoring configuration file
\fB
.SH DESCRIPTION
kismet expects a configuration file (/usr/local/etc/kismet.conf by
default) which should conform to the following rules.
A default configuration 
is provided with kismet but it is likely that you will need to 
modify it to suit your hardware and preferences.
.SH CONFIGURATION FILE FORMAT
All entries are of the format directive = value
.SH CONFIGURATION VALUES
"include" (string) Include another config file.
.PP
"servername" (string) Name of this Kismet server.  This is purely for information in 
multiple server systems.
.PP
"suiduser" (string) User to switch privileges to after binding to the capture.
.PP
"filter_tracker" (string) Filter string to control packets passed to the entire tracking system.  If a packet is blocked at the tracker level, it will not be displayed, logged, or otherwise processed.
.PP
"filter_dump" (string) Filter string to control packets written to the dump file.
.PP
"filter_export" (string) Filter string to control packets that are written to the
exported csv, gps, xml, and network files.
.PP
"wepkey" (string) Comma-separated BSSID and WEP key (in hex) to decrypt.  This is for
runtime decryption of networks where the wep key is known, and may impact the throughput
on slower hardware.
.PP
"tcpport" (int) Port to serve GUI data
.PP
"allowedhosts" (string) Comma-separated list of IPs or network/mask pairs.  Masks can be
expressed as dotted quads (/255.255.255.0) or as numbers (/24)
.PP
"maxclient" (int) Maximum number of simultaneously connected clients
.PP
"source" (string) Comma-separated packet source (cardtype,interface,name).  Multiple
source lines can be defined, refer to the enablesources config line for more details.
.PP
.PP
"enablesources" (string) Comma-separated list of source names (defined previously in the source lines) to enable.  This is only needed if you wish to selectively enable multiple sources.  For example:
.RS
enablesources=prism
.PP
enablesources=prism,cisco
.RE
.PP
"gps" (true|false) Enable GPS support?
.PP
"gpshost" (string) host:port for GPSD.
This can be localhost OR remote
.PP
"gpsmodelock" (true|false) Force gps mode lock
Some GPS units don't report a lock correctly via GPSD.  This will force a
lock to be true, but may result in some junk data.  Don't turn this on if
you don't need it.
.PP
"writeinterval" (int) Interval in seconds to re-write datafiles
.PP
"sound" (true|false) Do we use sound?  (not to be confused with GUI sound)
.PP
"soundplay" (string) Path to sound playing binary.
This can be sox or any other program.
.PP
"sound_new" (string) Sound for new network
.PP
"sound_traffic" (string) Sound for network traffic
.PP
"sound_junktraffic" (string) Sound for discarded junk traffic
.PP
"sound_gpslock" (string) Sound for GPS lock aquired
.PP
"sound_gpslost" (string) Sound for GPS lock lost
.PP
"sound_alert" (string) Sound for alert condition
.PP
"speech" (true|false) Do we use speech?  (again, not to be confused with GUI speech)
.PP
"festival" (string) Path to the festival speech program
.PP
"speech_type" (speech|nato|spell) Type of speech encoding used to customize the
output.
.RS
speech - Normal speech
.PP
nato - NATO letters (alpha, bravo, charlie)
.PP
spell - Spell out the letters (aye, bee, sea)
.RE
.PP
"speech_encrypted" (string) Encrypted network speech template
.PP
"speech_unencrypted" (string) Unencrypted network speech template
.PP
"ap_manuf" (string) Path to the access point manufacturers datafile. If an
absolute path is not given, the file is assumed to be in the default 
configuration directory.
.PP
"client_manuf" (string) Path to the client manufacturers datafile.  If an
absolute path is not given, the file is assumed to be in the default 
configuration directory.
.PP
"metric" (true|false) Use metric measurements in the logfiles and output?
.PP
"waypoints" (true|false) Do we write waypoints for gpsdrive?
.PP
"waypointdata" (string) Waypoint file.  This WILL overwrite any waypoints saved
.PP
"logtypes" (string) Comma-separated list of logtypes to write
.PP
"noiselog" (true|false) Do we log packets that are noise/invalid?
.PP
"beaconlog" (true|false) Do we log beacon packets?  If beacon logging is turned off,
one beacon per network will be logged.
.PP
"phylog" (true|false) Do we log PHY physical layer packets?  These can greatly increse
the size of a logfile with little gain.  Not every packet source reports PHY
packets.
.PP
"mangledatalog" (true|false) Do we mangle data packets as we log them?  This changes
packets as they are logged so that decrypted packets are transformed and logged as 
standard decrypted packets, and packets detected via fuzzy encryption are logged as
standard encrypted packets.
.PP
"fuzzycrypt" (true|false) Comma-separated list of card types we use fuzzy
encryption detection on.
.PP
"dumptype" (string) Type of dumpfile we generate (wiretap is the only supported
format currently)
.PP
"dumplimit" (int) Maximum number of packets in a file before we start a new
dumplog (for limited cases where ethereal crashes when a logfile is too large)
.PP
"logdefault" (string) Default logfile title
.PP
"logtemplate" (string) Logfile naming template
.PP
"configdir" (string) Base config dir (you shouldn't need to change this)
.PP
"ssidmap" (string) SSID map trackfile.
.PP
"groupmap" (string) Saved groups
.PP
"ipmap" (string) IP trackfile

.SH PACKET FILTERING
All filtering options take arguments containing the type of address and addresses to be filtered.  Valid address types are ANY, BSSID, SOURCE, and DEST.  Filtering can be inverted by the use of '!' before the address.  MAC addresses can have an optional mask component, which is treated the same way a netmask is treated for IP.  MAC address masks can be numerical (/24) or hex (/FF:FF:FF:00:00:00).  
.PP
If standard packet filtering is enabled, only packets matching the filter are passed.  If the filter is inverted, only packets which do not match the filter are passed.  Normal and inverted filters cannot be combined.
.PP
For example,
.PP
filter_tracker=ANY(!00:00:DE:AD:BE:EF)
.PP
has the same effect as the previous mac_filter config file option.
.PP
Multiple address types and addresses can be combined to form advanced filtering, such as:
.PP
filter_dump=SOURCE(00:11:22:33:44:55,00:55:44:33:22:11), DEST(!00:AA:BB:CC:DD:EE), BSSID(00:FF:FF:FF:FF:FF)
.PP
Filtering by manufacturer MAC headers:
.PP
filter_dump=BSSID(00:04:20:00:00:00/FF:FF:FF:00:00:00)
.PP
or
.PP
filter_dump=BSSID(00:04:20:00:00:00/24)

.SH CARD TYPES AND MULTIPLE CAPTURE SOURCES
Card type - Specifies the type of device.  It can be one of:
.PP
cisco - Cisco card with Linux Kernel drivers
.PP
cisco_cvs - Cisco card with CVS Linux drivers
.PP
cisco_bsd - Cisco on *BSD
.PP
prism2 - Prism2 using wlan-ng drivers with pcap support (all current versions support pcap)
.PP
prism2_hostap - Prism2 using hostap drivers
.PP
prism2_legacy - Prism2 using wlan-ng drivers without pcap support (0.1.9)
.PP
prism2_bsd - Prism2 on *BSD
.PP
prism2_avs - Prism2 using wlan-ng 0.2.0 or newer drivers which support the AVS packet header
with improved radio information.
.PP
orinoco - Orinoco cards using Snax's patched driers
.PP
generic - Generic card with no specific support.  You will have to put this into monitor mode yourself!
.PP
wsp100 - WSP100 embedded remote sensor.
.PP
wtapfile - Saved file of packets readable by libwiretap
.PP
ar5k - AR5K-based 802.11a cards using the vt_ar5k drivers.
.PP
drone - Kismet remote drone.
.PP
viha - Viha OSX Airport drivers.
.PP
acx100 - ACX100 22mbit 802.11b+ cards.
.PP
.PP
Capture interface - Specifies the network interface Kismet will watch for packets to come in on.  Typically "ethX" or "wlanX".  For the WSP100 capture engine, the WSP100 device sends packets via a UDP stream, so the capture interface should be in the form of host:port where 'host' is the WSP100 and 'port' is the local UDP port that it will send data to.  For Drone remote capture sources, the capture interface should be in the form of host:port where 'host' is the Drone remote and 'port' is the Drone remote port.  CVS Cisco drivers split the interface into 2 components, ethX and wifiX. They may not be the same, so for cisco_cvs the card type specifies ethX:wifiX
.PP
Capture Name - The name Kismet uses for this capture source.  This is the name used to specify what sources to enable.
.PP
To enable multiple sources, specify a source line for each and then use the
enablesources line to enable them.  For example:
.RS
source=prism2,wlan0,prism
.PP
source=cisco,eth0,cisco
.RE
.PP

.SH LOG TYPES
There are several log types used for different types of data:
.PP
"dump" logs are ethereal-compatable dumps of the raw packet stream
.PP
"network" logs are a human-readable dump of all the networks found
.PP
"xml" logs are a XML-formatted dump of all the networks found
.PP
"csv" logs are a comma-separated dump suitable to being loaded into SQL.
.PP
"weak" logs are airsnort-compatable dumps of cryptographically weak packets.
.PP
"cisco" logs are a human-readable dump of all the Cisco equipment using the 
Cisco Discovery Protocol, sorted by network.
.PP
"gps" logs are a XML dump of the GPS coordinates of packets and of the 
track taken while sniffing.
.SH SPEECH TEMPLATES
Similar to the logtemplate option, this lets you customize the speech output
using placeholders to insert different pieces of information.
.PP
%b is replaced by the BSSID (MAC) of the network
.PP
%s is replaced by the SSID (name) of the network
.PP
%c is replaced by the CHANNEL of the network
.PP
%r is replaced by the MAX RATE of the network
.PP
So, "New network detected, s.s.i.d. %s, channel %c, network encrypted." could
expand to "New network detected, s.s.i.d. foobar, channel 9, network encrypted"
with the normal speech type or "New network detected, s.s.i.d. foxtrot oscar
oscar bravo alpha romeo, channel niner, network encrypted" with NATO speech.
.SH LOG TEMPLATES
Log templates are nasty and ugly at first glance, but they offer many 
possibilities and you shouldn't have to edit them often.
In the log template string,
.PP
%n is replaced by the logging instance name
.PP
%d is replaced by the current date
.PP
%t is replaced by the starting log time
.PP
%i is replaced by the increment log in the case of multiple logs
.PP
%l is replaced by the log type (dump, status, crypt, etc)
.PP
%h is replaced by the home directory of the current user
.PP
So, "netlogs/%n-%d-%i.dump" called with a logging name of "Pok" could expand
to something like "netlogs/Pok-Dec-20-01-1.dump" for the first instance and
"netlogs/Pok-Dec-20-01-2.%l" for the second logfile generated.
.PP
Another possibility is sorting logfiles by directory, with the template
"logtemplate=%l/%n-%d-%i" which could expand to, "dump/Pok-Dec-20-01-1" 
"crypt/Pok-Dec-20-01-1", etc.  In this case, the "dump", "crypt", etc, dirs 
must exist before kismet is run.
.SH FUZZY ENCRYPTION DETECTION
Technically, the correct way to detect encrypted packets is via the 802.11
frame capabilities.
Unfortunately, not all networks appear to set this 
correctly which results in Kismet failing to flag packets as encrypted.
Fuzzy encryption detection attempts to match the first bytes of the LLC 
frame.
This will often result in some false positives, but the overall 
effect may be more desireable, depending on your situation.

.SH SEE ALSO
\fBkismet_ui.conf\fP(5), \fBkismet_drone.conf\fP(5), \fBgpsmap\fP(1), \fBkismet\fP(1), \fBkismet_drone\fP(1)
