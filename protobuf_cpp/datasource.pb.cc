// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datasource.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datasource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KismetDatasource {

namespace {

const ::google::protobuf::Descriptor* SubChannels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubChannels_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubChanset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubChanset_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubChanhop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubChanhop_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubGps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubGps_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSpecset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSpecset_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSpectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSpectrum_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channels_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseDatasource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseDatasource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configure_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigureReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigureReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListInterfaces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListInterfaces_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterfacesReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterfacesReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSourceReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSourceReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProbeSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProbeSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProbeSourceReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProbeSourceReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datasource_2eproto() {
  protobuf_AddDesc_datasource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datasource.proto");
  GOOGLE_CHECK(file != NULL);
  SubChannels_descriptor_ = file->message_type(0);
  static const int SubChannels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChannels, channels_),
  };
  SubChannels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubChannels_descriptor_,
      SubChannels::default_instance_,
      SubChannels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChannels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChannels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubChannels));
  SubChanset_descriptor_ = file->message_type(1);
  static const int SubChanset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanset, channel_),
  };
  SubChanset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubChanset_descriptor_,
      SubChanset::default_instance_,
      SubChanset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubChanset));
  SubChanhop_descriptor_ = file->message_type(2);
  static const int SubChanhop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, shuffle_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, offset_),
  };
  SubChanhop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubChanhop_descriptor_,
      SubChanhop::default_instance_,
      SubChanhop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubChanhop));
  SubGps_descriptor_ = file->message_type(3);
  static const int SubGps_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, name_),
  };
  SubGps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubGps_descriptor_,
      SubGps::default_instance_,
      SubGps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubGps));
  SubInterface_descriptor_ = file->message_type(4);
  static const int SubInterface_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, hardware_),
  };
  SubInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubInterface_descriptor_,
      SubInterface::default_instance_,
      SubInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubInterface));
  SubPacket_descriptor_ = file->message_type(5);
  static const int SubPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, dlt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, data_),
  };
  SubPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubPacket_descriptor_,
      SubPacket::default_instance_,
      SubPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubPacket));
  SubSignal_descriptor_ = file->message_type(6);
  static const int SubSignal_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, signal_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, noise_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, signal_rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, noise_rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, freq_khz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, datarate_),
  };
  SubSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubSignal_descriptor_,
      SubSignal::default_instance_,
      SubSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubSignal));
  SubSpecset_descriptor_ = file->message_type(7);
  static const int SubSpecset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, start_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, end_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, samples_per_bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, bucket_width_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, enable_amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, if_amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, baseband_amp_),
  };
  SubSpecset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubSpecset_descriptor_,
      SubSpecset::default_instance_,
      SubSpecset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubSpecset));
  SubSpectrum_descriptor_ = file->message_type(8);
  static const int SubSpectrum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, start_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, end_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, bucket_width_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, data_),
  };
  SubSpectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubSpectrum_descriptor_,
      SubSpectrum::default_instance_,
      SubSpectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubSpectrum));
  SubSuccess_descriptor_ = file->message_type(9);
  static const int SubSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, command_num_),
  };
  SubSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubSuccess_descriptor_,
      SubSuccess::default_instance_,
      SubSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubSuccess));
  Channels_descriptor_ = file->message_type(10);
  static const int Channels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, channels_),
  };
  Channels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Channels_descriptor_,
      Channels::default_instance_,
      Channels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Channels));
  CloseDatasource_descriptor_ = file->message_type(11);
  static const int CloseDatasource_offsets_[1] = {
  };
  CloseDatasource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseDatasource_descriptor_,
      CloseDatasource::default_instance_,
      CloseDatasource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDatasource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDatasource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseDatasource));
  Configure_descriptor_ = file->message_type(12);
  static const int Configure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, hopping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, spectrum_),
  };
  Configure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configure_descriptor_,
      Configure::default_instance_,
      Configure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configure));
  ConfigureReport_descriptor_ = file->message_type(13);
  static const int ConfigureReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, hopping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, warning_),
  };
  ConfigureReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigureReport_descriptor_,
      ConfigureReport::default_instance_,
      ConfigureReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigureReport));
  DataReport_descriptor_ = file->message_type(14);
  static const int DataReport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, spectrum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, warning_),
  };
  DataReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataReport_descriptor_,
      DataReport::default_instance_,
      DataReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataReport));
  ErrorReport_descriptor_ = file->message_type(15);
  static const int ErrorReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, message_),
  };
  ErrorReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorReport_descriptor_,
      ErrorReport::default_instance_,
      ErrorReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorReport));
  ListInterfaces_descriptor_ = file->message_type(16);
  static const int ListInterfaces_offsets_[1] = {
  };
  ListInterfaces_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListInterfaces_descriptor_,
      ListInterfaces::default_instance_,
      ListInterfaces_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInterfaces, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInterfaces, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListInterfaces));
  InterfacesReport_descriptor_ = file->message_type(17);
  static const int InterfacesReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, interfaces_),
  };
  InterfacesReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterfacesReport_descriptor_,
      InterfacesReport::default_instance_,
      InterfacesReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterfacesReport));
  Message_descriptor_ = file->message_type(18);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, warning_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  NewSource_descriptor_ = file->message_type(19);
  static const int NewSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, uuid_),
  };
  NewSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewSource_descriptor_,
      NewSource::default_instance_,
      NewSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewSource));
  OpenSource_descriptor_ = file->message_type(20);
  static const int OpenSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSource, definition_),
  };
  OpenSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSource_descriptor_,
      OpenSource::default_instance_,
      OpenSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSource));
  OpenSourceReport_descriptor_ = file->message_type(21);
  static const int OpenSourceReport_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, dlt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, capture_interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, specset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, warning_),
  };
  OpenSourceReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSourceReport_descriptor_,
      OpenSourceReport::default_instance_,
      OpenSourceReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSourceReport));
  ProbeSource_descriptor_ = file->message_type(22);
  static const int ProbeSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSource, definition_),
  };
  ProbeSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProbeSource_descriptor_,
      ProbeSource::default_instance_,
      ProbeSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProbeSource));
  ProbeSourceReport_descriptor_ = file->message_type(23);
  static const int ProbeSourceReport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, chanset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, specset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, hardware_),
  };
  ProbeSourceReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProbeSourceReport_descriptor_,
      ProbeSourceReport::default_instance_,
      ProbeSourceReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProbeSourceReport));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datasource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubChannels_descriptor_, &SubChannels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubChanset_descriptor_, &SubChanset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubChanhop_descriptor_, &SubChanhop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubGps_descriptor_, &SubGps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubInterface_descriptor_, &SubInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubPacket_descriptor_, &SubPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubSignal_descriptor_, &SubSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubSpecset_descriptor_, &SubSpecset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubSpectrum_descriptor_, &SubSpectrum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubSuccess_descriptor_, &SubSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Channels_descriptor_, &Channels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseDatasource_descriptor_, &CloseDatasource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configure_descriptor_, &Configure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigureReport_descriptor_, &ConfigureReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataReport_descriptor_, &DataReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorReport_descriptor_, &ErrorReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListInterfaces_descriptor_, &ListInterfaces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterfacesReport_descriptor_, &InterfacesReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewSource_descriptor_, &NewSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSource_descriptor_, &OpenSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSourceReport_descriptor_, &OpenSourceReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProbeSource_descriptor_, &ProbeSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProbeSourceReport_descriptor_, &ProbeSourceReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datasource_2eproto() {
  delete SubChannels::default_instance_;
  delete SubChannels_reflection_;
  delete SubChanset::default_instance_;
  delete SubChanset_reflection_;
  delete SubChanhop::default_instance_;
  delete SubChanhop_reflection_;
  delete SubGps::default_instance_;
  delete SubGps_reflection_;
  delete SubInterface::default_instance_;
  delete SubInterface_reflection_;
  delete SubPacket::default_instance_;
  delete SubPacket_reflection_;
  delete SubSignal::default_instance_;
  delete SubSignal_reflection_;
  delete SubSpecset::default_instance_;
  delete SubSpecset_reflection_;
  delete SubSpectrum::default_instance_;
  delete SubSpectrum_reflection_;
  delete SubSuccess::default_instance_;
  delete SubSuccess_reflection_;
  delete Channels::default_instance_;
  delete Channels_reflection_;
  delete CloseDatasource::default_instance_;
  delete CloseDatasource_reflection_;
  delete Configure::default_instance_;
  delete Configure_reflection_;
  delete ConfigureReport::default_instance_;
  delete ConfigureReport_reflection_;
  delete DataReport::default_instance_;
  delete DataReport_reflection_;
  delete ErrorReport::default_instance_;
  delete ErrorReport_reflection_;
  delete ListInterfaces::default_instance_;
  delete ListInterfaces_reflection_;
  delete InterfacesReport::default_instance_;
  delete InterfacesReport_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete NewSource::default_instance_;
  delete NewSource_reflection_;
  delete OpenSource::default_instance_;
  delete OpenSource_reflection_;
  delete OpenSourceReport::default_instance_;
  delete OpenSourceReport_reflection_;
  delete ProbeSource::default_instance_;
  delete ProbeSource_reflection_;
  delete ProbeSourceReport::default_instance_;
  delete ProbeSourceReport_reflection_;
}

void protobuf_AddDesc_datasource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KismetExternal::protobuf_AddDesc_kismet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020datasource.proto\022\020KismetDatasource\032\014ki"
    "smet.proto\"\037\n\013SubChannels\022\020\n\010channels\030\001 "
    "\003(\t\"\035\n\nSubChanset\022\017\n\007channel\030\001 \002(\t\"c\n\nSu"
    "bChanhop\022\020\n\010channels\030\001 \003(\t\022\014\n\004rate\030\002 \001(\001"
    "\022\017\n\007shuffle\030\003 \001(\010\022\024\n\014shuffle_skip\030\004 \001(\r\022"
    "\016\n\006offset\030\005 \001(\r\"\260\001\n\006SubGps\022\013\n\003lat\030\001 \002(\001\022"
    "\013\n\003lon\030\002 \002(\001\022\013\n\003alt\030\003 \002(\001\022\r\n\005speed\030\004 \002(\001"
    "\022\017\n\007heading\030\005 \002(\001\022\021\n\tprecision\030\006 \002(\001\022\013\n\003"
    "fix\030\007 \002(\r\022\020\n\010time_sec\030\010 \002(\004\022\021\n\ttime_usec"
    "\030\t \002(\004\022\014\n\004type\030\n \002(\t\022\014\n\004name\030\013 \002(\t\"B\n\014Su"
    "bInterface\022\021\n\tinterface\030\001 \002(\t\022\r\n\005flags\030\002"
    " \002(\t\022\020\n\010hardware\030\003 \001(\t\"Y\n\tSubPacket\022\020\n\010t"
    "ime_sec\030\001 \002(\004\022\021\n\ttime_usec\030\002 \002(\004\022\013\n\003dlt\030"
    "\003 \002(\r\022\014\n\004size\030\004 \002(\004\022\014\n\004data\030\005 \002(\014\"\220\001\n\tSu"
    "bSignal\022\022\n\nsignal_dbm\030\001 \001(\001\022\021\n\tnoise_dbm"
    "\030\002 \001(\001\022\023\n\013signal_rssi\030\003 \001(\001\022\022\n\nnoise_rss"
    "i\030\004 \001(\001\022\020\n\010freq_khz\030\005 \001(\001\022\017\n\007channel\030\006 \001"
    "(\t\022\020\n\010datarate\030\007 \001(\001\"\237\001\n\nSubSpecset\022\021\n\ts"
    "tart_mhz\030\001 \001(\001\022\017\n\007end_mhz\030\002 \001(\001\022\032\n\022sampl"
    "es_per_bucket\030\003 \001(\001\022\027\n\017bucket_width_hz\030\004"
    " \001(\001\022\022\n\nenable_amp\030\005 \001(\010\022\016\n\006if_amp\030\006 \001(\004"
    "\022\024\n\014baseband_amp\030\007 \001(\004\"}\n\013SubSpectrum\022\020\n"
    "\010time_sec\030\001 \001(\004\022\021\n\ttime_usec\030\002 \001(\004\022\021\n\tst"
    "art_mhz\030\003 \001(\001\022\017\n\007end_mhz\030\004 \001(\001\022\027\n\017bucket"
    "_width_hz\030\005 \001(\001\022\014\n\004data\030\006 \003(\005\"2\n\nSubSucc"
    "ess\022\017\n\007success\030\001 \002(\010\022\023\n\013command_num\030\002 \002("
    "\r\";\n\010Channels\022/\n\010channels\030\001 \002(\0132\035.Kismet"
    "Datasource.SubChannels\"\021\n\017CloseDatasourc"
    "e\"\231\001\n\tConfigure\022-\n\007channel\030\001 \001(\0132\034.Kisme"
    "tDatasource.SubChanset\022-\n\007hopping\030\002 \001(\0132"
    "\034.KismetDatasource.SubChanhop\022.\n\010spectru"
    "m\030\003 \001(\0132\034.KismetDatasource.SubSpecset\"\337\001"
    "\n\017ConfigureReport\022-\n\007success\030\001 \002(\0132\034.Kis"
    "metDatasource.SubSuccess\022-\n\007channel\030\002 \001("
    "\0132\034.KismetDatasource.SubChanset\022-\n\007hoppi"
    "ng\030\003 \001(\0132\034.KismetDatasource.SubChanhop\022."
    "\n\007message\030\004 \001(\0132\035.KismetExternal.MsgbusM"
    "essage\022\017\n\007warning\030\005 \001(\t\"\377\001\n\nDataReport\022%"
    "\n\003gps\030\001 \001(\0132\030.KismetDatasource.SubGps\022.\n"
    "\007message\030\002 \001(\0132\035.KismetExternal.MsgbusMe"
    "ssage\022+\n\006packet\030\003 \001(\0132\033.KismetDatasource"
    ".SubPacket\022+\n\006signal\030\004 \001(\0132\033.KismetDatas"
    "ource.SubSignal\022/\n\010spectrum\030\005 \001(\0132\035.Kism"
    "etDatasource.SubSpectrum\022\017\n\007warning\030\006 \001("
    "\t\"l\n\013ErrorReport\022-\n\007success\030\001 \002(\0132\034.Kism"
    "etDatasource.SubSuccess\022.\n\007message\030\002 \001(\013"
    "2\035.KismetExternal.MsgbusMessage\"\020\n\016ListI"
    "nterfaces\"\245\001\n\020InterfacesReport\022-\n\007succes"
    "s\030\001 \002(\0132\034.KismetDatasource.SubSuccess\022.\n"
    "\007message\030\002 \001(\0132\035.KismetExternal.MsgbusMe"
    "ssage\0222\n\ninterfaces\030\003 \003(\0132\036.KismetDataso"
    "urce.SubInterface\"J\n\007Message\022.\n\007message\030"
    "\001 \001(\0132\035.KismetExternal.MsgbusMessage\022\017\n\007"
    "warning\030\002 \001(\t\"A\n\tNewSource\022\022\n\ndefinition"
    "\030\001 \002(\t\022\022\n\nsourcetype\030\002 \002(\t\022\014\n\004uuid\030\003 \002(\t"
    "\" \n\nOpenSource\022\022\n\ndefinition\030\001 \002(\t\"\331\002\n\020O"
    "penSourceReport\022-\n\007success\030\001 \002(\0132\034.Kisme"
    "tDatasource.SubSuccess\022\013\n\003dlt\030\002 \001(\r\022\031\n\021c"
    "apture_interface\030\003 \001(\t\022/\n\010channels\030\004 \001(\013"
    "2\035.KismetDatasource.SubChannels\022-\n\007chann"
    "el\030\005 \001(\0132\034.KismetDatasource.SubChanset\022\020"
    "\n\010hardware\030\006 \001(\t\022.\n\007message\030\007 \001(\0132\035.Kism"
    "etExternal.MsgbusMessage\022-\n\007specset\030\010 \001("
    "\0132\034.KismetDatasource.SubSpecset\022\014\n\004uuid\030"
    "\t \001(\t\022\017\n\007warning\030\n \001(\t\"!\n\013ProbeSource\022\022\n"
    "\ndefinition\030\001 \002(\t\"\223\002\n\021ProbeSourceReport\022"
    "-\n\007success\030\001 \002(\0132\034.KismetDatasource.SubS"
    "uccess\022.\n\007message\030\002 \001(\0132\035.KismetExternal"
    ".MsgbusMessage\022/\n\010channels\030\003 \001(\0132\035.Kisme"
    "tDatasource.SubChannels\022-\n\007chanset\030\004 \001(\013"
    "2\034.KismetDatasource.SubChanset\022-\n\007specse"
    "t\030\005 \001(\0132\034.KismetDatasource.SubSpecset\022\020\n"
    "\010hardware\030\006 \001(\t", 2895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datasource.proto", &protobuf_RegisterTypes);
  SubChannels::default_instance_ = new SubChannels();
  SubChanset::default_instance_ = new SubChanset();
  SubChanhop::default_instance_ = new SubChanhop();
  SubGps::default_instance_ = new SubGps();
  SubInterface::default_instance_ = new SubInterface();
  SubPacket::default_instance_ = new SubPacket();
  SubSignal::default_instance_ = new SubSignal();
  SubSpecset::default_instance_ = new SubSpecset();
  SubSpectrum::default_instance_ = new SubSpectrum();
  SubSuccess::default_instance_ = new SubSuccess();
  Channels::default_instance_ = new Channels();
  CloseDatasource::default_instance_ = new CloseDatasource();
  Configure::default_instance_ = new Configure();
  ConfigureReport::default_instance_ = new ConfigureReport();
  DataReport::default_instance_ = new DataReport();
  ErrorReport::default_instance_ = new ErrorReport();
  ListInterfaces::default_instance_ = new ListInterfaces();
  InterfacesReport::default_instance_ = new InterfacesReport();
  Message::default_instance_ = new Message();
  NewSource::default_instance_ = new NewSource();
  OpenSource::default_instance_ = new OpenSource();
  OpenSourceReport::default_instance_ = new OpenSourceReport();
  ProbeSource::default_instance_ = new ProbeSource();
  ProbeSourceReport::default_instance_ = new ProbeSourceReport();
  SubChannels::default_instance_->InitAsDefaultInstance();
  SubChanset::default_instance_->InitAsDefaultInstance();
  SubChanhop::default_instance_->InitAsDefaultInstance();
  SubGps::default_instance_->InitAsDefaultInstance();
  SubInterface::default_instance_->InitAsDefaultInstance();
  SubPacket::default_instance_->InitAsDefaultInstance();
  SubSignal::default_instance_->InitAsDefaultInstance();
  SubSpecset::default_instance_->InitAsDefaultInstance();
  SubSpectrum::default_instance_->InitAsDefaultInstance();
  SubSuccess::default_instance_->InitAsDefaultInstance();
  Channels::default_instance_->InitAsDefaultInstance();
  CloseDatasource::default_instance_->InitAsDefaultInstance();
  Configure::default_instance_->InitAsDefaultInstance();
  ConfigureReport::default_instance_->InitAsDefaultInstance();
  DataReport::default_instance_->InitAsDefaultInstance();
  ErrorReport::default_instance_->InitAsDefaultInstance();
  ListInterfaces::default_instance_->InitAsDefaultInstance();
  InterfacesReport::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  NewSource::default_instance_->InitAsDefaultInstance();
  OpenSource::default_instance_->InitAsDefaultInstance();
  OpenSourceReport::default_instance_->InitAsDefaultInstance();
  ProbeSource::default_instance_->InitAsDefaultInstance();
  ProbeSourceReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datasource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datasource_2eproto {
  StaticDescriptorInitializer_datasource_2eproto() {
    protobuf_AddDesc_datasource_2eproto();
  }
} static_descriptor_initializer_datasource_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubChannels::kChannelsFieldNumber;
#endif  // !_MSC_VER

SubChannels::SubChannels()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubChannels)
}

void SubChannels::InitAsDefaultInstance() {
}

SubChannels::SubChannels(const SubChannels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubChannels)
}

void SubChannels::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubChannels::~SubChannels() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubChannels)
  SharedDtor();
}

void SubChannels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubChannels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubChannels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubChannels_descriptor_;
}

const SubChannels& SubChannels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubChannels* SubChannels::default_instance_ = NULL;

SubChannels* SubChannels::New() const {
  return new SubChannels;
}

void SubChannels::Clear() {
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubChannels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubChannels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (tag == 10) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channels(this->channels_size() - 1).data(),
            this->channels(this->channels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubChannels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubChannels)
  return false;
#undef DO_
}

void SubChannels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubChannels)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channels(i).data(), this->channels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubChannels)
}

::google::protobuf::uint8* SubChannels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubChannels)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channels(i).data(), this->channels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubChannels)
  return target;
}

int SubChannels::ByteSize() const {
  int total_size = 0;

  // repeated string channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubChannels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubChannels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubChannels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubChannels::MergeFrom(const SubChannels& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubChannels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubChannels::CopyFrom(const SubChannels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubChannels::IsInitialized() const {

  return true;
}

void SubChannels::Swap(SubChannels* other) {
  if (other != this) {
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubChannels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubChannels_descriptor_;
  metadata.reflection = SubChannels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubChanset::kChannelFieldNumber;
#endif  // !_MSC_VER

SubChanset::SubChanset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubChanset)
}

void SubChanset::InitAsDefaultInstance() {
}

SubChanset::SubChanset(const SubChanset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubChanset)
}

void SubChanset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubChanset::~SubChanset() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubChanset)
  SharedDtor();
}

void SubChanset::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void SubChanset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubChanset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubChanset_descriptor_;
}

const SubChanset& SubChanset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubChanset* SubChanset::default_instance_ = NULL;

SubChanset* SubChanset::New() const {
  return new SubChanset;
}

void SubChanset::Clear() {
  if (has_channel()) {
    if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      channel_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubChanset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubChanset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubChanset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubChanset)
  return false;
#undef DO_
}

void SubChanset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubChanset)
  // required string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubChanset)
}

::google::protobuf::uint8* SubChanset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubChanset)
  // required string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubChanset)
  return target;
}

int SubChanset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubChanset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubChanset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubChanset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubChanset::MergeFrom(const SubChanset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubChanset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubChanset::CopyFrom(const SubChanset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubChanset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubChanset::Swap(SubChanset* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubChanset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubChanset_descriptor_;
  metadata.reflection = SubChanset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubChanhop::kChannelsFieldNumber;
const int SubChanhop::kRateFieldNumber;
const int SubChanhop::kShuffleFieldNumber;
const int SubChanhop::kShuffleSkipFieldNumber;
const int SubChanhop::kOffsetFieldNumber;
#endif  // !_MSC_VER

SubChanhop::SubChanhop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubChanhop)
}

void SubChanhop::InitAsDefaultInstance() {
}

SubChanhop::SubChanhop(const SubChanhop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubChanhop)
}

void SubChanhop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rate_ = 0;
  shuffle_ = false;
  shuffle_skip_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubChanhop::~SubChanhop() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubChanhop)
  SharedDtor();
}

void SubChanhop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubChanhop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubChanhop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubChanhop_descriptor_;
}

const SubChanhop& SubChanhop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubChanhop* SubChanhop::default_instance_ = NULL;

SubChanhop* SubChanhop::New() const {
  return new SubChanhop;
}

void SubChanhop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubChanhop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rate_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubChanhop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubChanhop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (tag == 10) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channels(this->channels_size() - 1).data(),
            this->channels(this->channels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channels;
        if (input->ExpectTag(17)) goto parse_rate;
        break;
      }

      // optional double rate = 2;
      case 2: {
        if (tag == 17) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3;
      case 3: {
        if (tag == 24) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shuffle_skip;
        break;
      }

      // optional uint32 shuffle_skip = 4;
      case 4: {
        if (tag == 32) {
         parse_shuffle_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shuffle_skip_)));
          set_has_shuffle_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 5;
      case 5: {
        if (tag == 40) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubChanhop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubChanhop)
  return false;
#undef DO_
}

void SubChanhop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubChanhop)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channels(i).data(), this->channels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  // optional double rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rate(), output);
  }

  // optional bool shuffle = 3;
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  // optional uint32 shuffle_skip = 4;
  if (has_shuffle_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shuffle_skip(), output);
  }

  // optional uint32 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubChanhop)
}

::google::protobuf::uint8* SubChanhop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubChanhop)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channels(i).data(), this->channels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  // optional double rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rate(), target);
  }

  // optional bool shuffle = 3;
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  // optional uint32 shuffle_skip = 4;
  if (has_shuffle_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->shuffle_skip(), target);
  }

  // optional uint32 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubChanhop)
  return target;
}

int SubChanhop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double rate = 2;
    if (has_rate()) {
      total_size += 1 + 8;
    }

    // optional bool shuffle = 3;
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional uint32 shuffle_skip = 4;
    if (has_shuffle_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shuffle_skip());
    }

    // optional uint32 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  // repeated string channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubChanhop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubChanhop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubChanhop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubChanhop::MergeFrom(const SubChanhop& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_shuffle_skip()) {
      set_shuffle_skip(from.shuffle_skip());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubChanhop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubChanhop::CopyFrom(const SubChanhop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubChanhop::IsInitialized() const {

  return true;
}

void SubChanhop::Swap(SubChanhop* other) {
  if (other != this) {
    channels_.Swap(&other->channels_);
    std::swap(rate_, other->rate_);
    std::swap(shuffle_, other->shuffle_);
    std::swap(shuffle_skip_, other->shuffle_skip_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubChanhop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubChanhop_descriptor_;
  metadata.reflection = SubChanhop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubGps::kLatFieldNumber;
const int SubGps::kLonFieldNumber;
const int SubGps::kAltFieldNumber;
const int SubGps::kSpeedFieldNumber;
const int SubGps::kHeadingFieldNumber;
const int SubGps::kPrecisionFieldNumber;
const int SubGps::kFixFieldNumber;
const int SubGps::kTimeSecFieldNumber;
const int SubGps::kTimeUsecFieldNumber;
const int SubGps::kTypeFieldNumber;
const int SubGps::kNameFieldNumber;
#endif  // !_MSC_VER

SubGps::SubGps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubGps)
}

void SubGps::InitAsDefaultInstance() {
}

SubGps::SubGps(const SubGps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubGps)
}

void SubGps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  speed_ = 0;
  heading_ = 0;
  precision_ = 0;
  fix_ = 0u;
  time_sec_ = GOOGLE_ULONGLONG(0);
  time_usec_ = GOOGLE_ULONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubGps::~SubGps() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubGps)
  SharedDtor();
}

void SubGps::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SubGps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubGps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubGps_descriptor_;
}

const SubGps& SubGps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubGps* SubGps::default_instance_ = NULL;

SubGps* SubGps::New() const {
  return new SubGps;
}

void SubGps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubGps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lat_, time_sec_);
    fix_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    time_usec_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubGps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubGps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alt;
        break;
      }

      // required double alt = 3;
      case 3: {
        if (tag == 25) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed;
        break;
      }

      // required double speed = 4;
      case 4: {
        if (tag == 33) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }

      // required double heading = 5;
      case 5: {
        if (tag == 41) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_precision;
        break;
      }

      // required double precision = 6;
      case 6: {
        if (tag == 49) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fix;
        break;
      }

      // required uint32 fix = 7;
      case 7: {
        if (tag == 56) {
         parse_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_)));
          set_has_fix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time_sec;
        break;
      }

      // required uint64 time_sec = 8;
      case 8: {
        if (tag == 64) {
         parse_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time_usec;
        break;
      }

      // required uint64 time_usec = 9;
      case 9: {
        if (tag == 72) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_type;
        break;
      }

      // required string type = 10;
      case 10: {
        if (tag == 82) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // required string name = 11;
      case 11: {
        if (tag == 90) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubGps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubGps)
  return false;
#undef DO_
}

void SubGps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubGps)
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // required double alt = 3;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alt(), output);
  }

  // required double speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // required double heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // required double precision = 6;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->precision(), output);
  }

  // required uint32 fix = 7;
  if (has_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fix(), output);
  }

  // required uint64 time_sec = 8;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time_sec(), output);
  }

  // required uint64 time_usec = 9;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->time_usec(), output);
  }

  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->type(), output);
  }

  // required string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubGps)
}

::google::protobuf::uint8* SubGps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubGps)
  // required double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // required double alt = 3;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->alt(), target);
  }

  // required double speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  // required double heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // required double precision = 6;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->precision(), target);
  }

  // required uint32 fix = 7;
  if (has_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fix(), target);
  }

  // required uint64 time_sec = 8;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->time_sec(), target);
  }

  // required uint64 time_usec = 9;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->time_usec(), target);
  }

  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }

  // required string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubGps)
  return target;
}

int SubGps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double alt = 3;
    if (has_alt()) {
      total_size += 1 + 8;
    }

    // required double speed = 4;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // required double precision = 6;
    if (has_precision()) {
      total_size += 1 + 8;
    }

    // required uint32 fix = 7;
    if (has_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fix());
    }

    // required uint64 time_sec = 8;
    if (has_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_sec());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 time_usec = 9;
    if (has_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_usec());
    }

    // required string type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubGps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubGps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubGps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubGps::MergeFrom(const SubGps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_fix()) {
      set_fix(from.fix());
    }
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubGps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubGps::CopyFrom(const SubGps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubGps::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void SubGps::Swap(SubGps* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(speed_, other->speed_);
    std::swap(heading_, other->heading_);
    std::swap(precision_, other->precision_);
    std::swap(fix_, other->fix_);
    std::swap(time_sec_, other->time_sec_);
    std::swap(time_usec_, other->time_usec_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubGps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubGps_descriptor_;
  metadata.reflection = SubGps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubInterface::kInterfaceFieldNumber;
const int SubInterface::kFlagsFieldNumber;
const int SubInterface::kHardwareFieldNumber;
#endif  // !_MSC_VER

SubInterface::SubInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubInterface)
}

void SubInterface::InitAsDefaultInstance() {
}

SubInterface::SubInterface(const SubInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubInterface)
}

void SubInterface::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interface_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubInterface::~SubInterface() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubInterface)
  SharedDtor();
}

void SubInterface::SharedDtor() {
  if (interface_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interface_;
  }
  if (flags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flags_;
  }
  if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_;
  }
  if (this != default_instance_) {
  }
}

void SubInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubInterface_descriptor_;
}

const SubInterface& SubInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubInterface* SubInterface::default_instance_ = NULL;

SubInterface* SubInterface::New() const {
  return new SubInterface;
}

void SubInterface::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_interface()) {
      if (interface_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interface_->clear();
      }
    }
    if (has_flags()) {
      if (flags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flags_->clear();
      }
    }
    if (has_hardware()) {
      if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string interface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface().data(), this->interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interface");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_flags;
        break;
      }

      // required string flags = 2;
      case 2: {
        if (tag == 18) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flags().data(), this->flags().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hardware;
        break;
      }

      // optional string hardware = 3;
      case 3: {
        if (tag == 26) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubInterface)
  return false;
#undef DO_
}

void SubInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubInterface)
  // required string interface = 1;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interface(), output);
  }

  // required string flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->flags(), output);
  }

  // optional string hardware = 3;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hardware(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubInterface)
}

::google::protobuf::uint8* SubInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubInterface)
  // required string interface = 1;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interface(), target);
  }

  // required string flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flags(), target);
  }

  // optional string hardware = 3;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hardware(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubInterface)
  return target;
}

int SubInterface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string interface = 1;
    if (has_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface());
    }

    // required string flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flags());
    }

    // optional string hardware = 3;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubInterface::MergeFrom(const SubInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interface()) {
      set_interface(from.interface());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubInterface::CopyFrom(const SubInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubInterface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubInterface::Swap(SubInterface* other) {
  if (other != this) {
    std::swap(interface_, other->interface_);
    std::swap(flags_, other->flags_);
    std::swap(hardware_, other->hardware_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubInterface_descriptor_;
  metadata.reflection = SubInterface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubPacket::kTimeSecFieldNumber;
const int SubPacket::kTimeUsecFieldNumber;
const int SubPacket::kDltFieldNumber;
const int SubPacket::kSizeFieldNumber;
const int SubPacket::kDataFieldNumber;
#endif  // !_MSC_VER

SubPacket::SubPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubPacket)
}

void SubPacket::InitAsDefaultInstance() {
}

SubPacket::SubPacket(const SubPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubPacket)
}

void SubPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_sec_ = GOOGLE_ULONGLONG(0);
  time_usec_ = GOOGLE_ULONGLONG(0);
  dlt_ = 0u;
  size_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubPacket::~SubPacket() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubPacket)
  SharedDtor();
}

void SubPacket::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SubPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubPacket_descriptor_;
}

const SubPacket& SubPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubPacket* SubPacket::default_instance_ = NULL;

SubPacket* SubPacket::New() const {
  return new SubPacket;
}

void SubPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(time_sec_, size_);
    dlt_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_usec;
        break;
      }

      // required uint64 time_usec = 2;
      case 2: {
        if (tag == 16) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dlt;
        break;
      }

      // required uint32 dlt = 3;
      case 3: {
        if (tag == 24) {
         parse_dlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlt_)));
          set_has_dlt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint64 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubPacket)
  return false;
#undef DO_
}

void SubPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubPacket)
  // required uint64 time_sec = 1;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_sec(), output);
  }

  // required uint64 time_usec = 2;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_usec(), output);
  }

  // required uint32 dlt = 3;
  if (has_dlt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dlt(), output);
  }

  // required uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubPacket)
}

::google::protobuf::uint8* SubPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubPacket)
  // required uint64 time_sec = 1;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_sec(), target);
  }

  // required uint64 time_usec = 2;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_usec(), target);
  }

  // required uint32 dlt = 3;
  if (has_dlt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dlt(), target);
  }

  // required uint64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubPacket)
  return target;
}

int SubPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_sec = 1;
    if (has_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_sec());
    }

    // required uint64 time_usec = 2;
    if (has_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_usec());
    }

    // required uint32 dlt = 3;
    if (has_dlt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dlt());
    }

    // required uint64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubPacket::MergeFrom(const SubPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_dlt()) {
      set_dlt(from.dlt());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubPacket::CopyFrom(const SubPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SubPacket::Swap(SubPacket* other) {
  if (other != this) {
    std::swap(time_sec_, other->time_sec_);
    std::swap(time_usec_, other->time_usec_);
    std::swap(dlt_, other->dlt_);
    std::swap(size_, other->size_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubPacket_descriptor_;
  metadata.reflection = SubPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubSignal::kSignalDbmFieldNumber;
const int SubSignal::kNoiseDbmFieldNumber;
const int SubSignal::kSignalRssiFieldNumber;
const int SubSignal::kNoiseRssiFieldNumber;
const int SubSignal::kFreqKhzFieldNumber;
const int SubSignal::kChannelFieldNumber;
const int SubSignal::kDatarateFieldNumber;
#endif  // !_MSC_VER

SubSignal::SubSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSignal)
}

void SubSignal::InitAsDefaultInstance() {
}

SubSignal::SubSignal(const SubSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSignal)
}

void SubSignal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signal_dbm_ = 0;
  noise_dbm_ = 0;
  signal_rssi_ = 0;
  noise_rssi_ = 0;
  freq_khz_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datarate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSignal::~SubSignal() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSignal)
  SharedDtor();
}

void SubSignal::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void SubSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSignal_descriptor_;
}

const SubSignal& SubSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSignal* SubSignal::default_instance_ = NULL;

SubSignal* SubSignal::New() const {
  return new SubSignal;
}

void SubSignal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubSignal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(signal_dbm_, freq_khz_);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_->clear();
      }
    }
    datarate_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double signal_dbm = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_dbm_)));
          set_has_signal_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_noise_dbm;
        break;
      }

      // optional double noise_dbm = 2;
      case 2: {
        if (tag == 17) {
         parse_noise_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &noise_dbm_)));
          set_has_noise_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_signal_rssi;
        break;
      }

      // optional double signal_rssi = 3;
      case 3: {
        if (tag == 25) {
         parse_signal_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_rssi_)));
          set_has_signal_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_noise_rssi;
        break;
      }

      // optional double noise_rssi = 4;
      case 4: {
        if (tag == 33) {
         parse_noise_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &noise_rssi_)));
          set_has_noise_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_freq_khz;
        break;
      }

      // optional double freq_khz = 5;
      case 5: {
        if (tag == 41) {
         parse_freq_khz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_khz_)));
          set_has_freq_khz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (tag == 50) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_datarate;
        break;
      }

      // optional double datarate = 7;
      case 7: {
        if (tag == 57) {
         parse_datarate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datarate_)));
          set_has_datarate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSignal)
  return false;
#undef DO_
}

void SubSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSignal)
  // optional double signal_dbm = 1;
  if (has_signal_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->signal_dbm(), output);
  }

  // optional double noise_dbm = 2;
  if (has_noise_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->noise_dbm(), output);
  }

  // optional double signal_rssi = 3;
  if (has_signal_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->signal_rssi(), output);
  }

  // optional double noise_rssi = 4;
  if (has_noise_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->noise_rssi(), output);
  }

  // optional double freq_khz = 5;
  if (has_freq_khz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->freq_khz(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->channel(), output);
  }

  // optional double datarate = 7;
  if (has_datarate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->datarate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSignal)
}

::google::protobuf::uint8* SubSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSignal)
  // optional double signal_dbm = 1;
  if (has_signal_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->signal_dbm(), target);
  }

  // optional double noise_dbm = 2;
  if (has_noise_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->noise_dbm(), target);
  }

  // optional double signal_rssi = 3;
  if (has_signal_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->signal_rssi(), target);
  }

  // optional double noise_rssi = 4;
  if (has_noise_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->noise_rssi(), target);
  }

  // optional double freq_khz = 5;
  if (has_freq_khz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->freq_khz(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // optional double datarate = 7;
  if (has_datarate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->datarate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSignal)
  return target;
}

int SubSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double signal_dbm = 1;
    if (has_signal_dbm()) {
      total_size += 1 + 8;
    }

    // optional double noise_dbm = 2;
    if (has_noise_dbm()) {
      total_size += 1 + 8;
    }

    // optional double signal_rssi = 3;
    if (has_signal_rssi()) {
      total_size += 1 + 8;
    }

    // optional double noise_rssi = 4;
    if (has_noise_rssi()) {
      total_size += 1 + 8;
    }

    // optional double freq_khz = 5;
    if (has_freq_khz()) {
      total_size += 1 + 8;
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional double datarate = 7;
    if (has_datarate()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubSignal::MergeFrom(const SubSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_dbm()) {
      set_signal_dbm(from.signal_dbm());
    }
    if (from.has_noise_dbm()) {
      set_noise_dbm(from.noise_dbm());
    }
    if (from.has_signal_rssi()) {
      set_signal_rssi(from.signal_rssi());
    }
    if (from.has_noise_rssi()) {
      set_noise_rssi(from.noise_rssi());
    }
    if (from.has_freq_khz()) {
      set_freq_khz(from.freq_khz());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_datarate()) {
      set_datarate(from.datarate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSignal::CopyFrom(const SubSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSignal::IsInitialized() const {

  return true;
}

void SubSignal::Swap(SubSignal* other) {
  if (other != this) {
    std::swap(signal_dbm_, other->signal_dbm_);
    std::swap(noise_dbm_, other->noise_dbm_);
    std::swap(signal_rssi_, other->signal_rssi_);
    std::swap(noise_rssi_, other->noise_rssi_);
    std::swap(freq_khz_, other->freq_khz_);
    std::swap(channel_, other->channel_);
    std::swap(datarate_, other->datarate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSignal_descriptor_;
  metadata.reflection = SubSignal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubSpecset::kStartMhzFieldNumber;
const int SubSpecset::kEndMhzFieldNumber;
const int SubSpecset::kSamplesPerBucketFieldNumber;
const int SubSpecset::kBucketWidthHzFieldNumber;
const int SubSpecset::kEnableAmpFieldNumber;
const int SubSpecset::kIfAmpFieldNumber;
const int SubSpecset::kBasebandAmpFieldNumber;
#endif  // !_MSC_VER

SubSpecset::SubSpecset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSpecset)
}

void SubSpecset::InitAsDefaultInstance() {
}

SubSpecset::SubSpecset(const SubSpecset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSpecset)
}

void SubSpecset::SharedCtor() {
  _cached_size_ = 0;
  start_mhz_ = 0;
  end_mhz_ = 0;
  samples_per_bucket_ = 0;
  bucket_width_hz_ = 0;
  enable_amp_ = false;
  if_amp_ = GOOGLE_ULONGLONG(0);
  baseband_amp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSpecset::~SubSpecset() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSpecset)
  SharedDtor();
}

void SubSpecset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSpecset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSpecset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSpecset_descriptor_;
}

const SubSpecset& SubSpecset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSpecset* SubSpecset::default_instance_ = NULL;

SubSpecset* SubSpecset::New() const {
  return new SubSpecset;
}

void SubSpecset::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubSpecset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(start_mhz_, enable_amp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubSpecset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSpecset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_mhz = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_mhz_)));
          set_has_start_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_end_mhz;
        break;
      }

      // optional double end_mhz = 2;
      case 2: {
        if (tag == 17) {
         parse_end_mhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_mhz_)));
          set_has_end_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_samples_per_bucket;
        break;
      }

      // optional double samples_per_bucket = 3;
      case 3: {
        if (tag == 25) {
         parse_samples_per_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samples_per_bucket_)));
          set_has_samples_per_bucket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bucket_width_hz;
        break;
      }

      // optional double bucket_width_hz = 4;
      case 4: {
        if (tag == 33) {
         parse_bucket_width_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bucket_width_hz_)));
          set_has_bucket_width_hz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enable_amp;
        break;
      }

      // optional bool enable_amp = 5;
      case 5: {
        if (tag == 40) {
         parse_enable_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_amp_)));
          set_has_enable_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_if_amp;
        break;
      }

      // optional uint64 if_amp = 6;
      case 6: {
        if (tag == 48) {
         parse_if_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &if_amp_)));
          set_has_if_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_baseband_amp;
        break;
      }

      // optional uint64 baseband_amp = 7;
      case 7: {
        if (tag == 56) {
         parse_baseband_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseband_amp_)));
          set_has_baseband_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSpecset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSpecset)
  return false;
#undef DO_
}

void SubSpecset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSpecset)
  // optional double start_mhz = 1;
  if (has_start_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_mhz(), output);
  }

  // optional double end_mhz = 2;
  if (has_end_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_mhz(), output);
  }

  // optional double samples_per_bucket = 3;
  if (has_samples_per_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->samples_per_bucket(), output);
  }

  // optional double bucket_width_hz = 4;
  if (has_bucket_width_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bucket_width_hz(), output);
  }

  // optional bool enable_amp = 5;
  if (has_enable_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_amp(), output);
  }

  // optional uint64 if_amp = 6;
  if (has_if_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->if_amp(), output);
  }

  // optional uint64 baseband_amp = 7;
  if (has_baseband_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->baseband_amp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSpecset)
}

::google::protobuf::uint8* SubSpecset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSpecset)
  // optional double start_mhz = 1;
  if (has_start_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_mhz(), target);
  }

  // optional double end_mhz = 2;
  if (has_end_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_mhz(), target);
  }

  // optional double samples_per_bucket = 3;
  if (has_samples_per_bucket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->samples_per_bucket(), target);
  }

  // optional double bucket_width_hz = 4;
  if (has_bucket_width_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bucket_width_hz(), target);
  }

  // optional bool enable_amp = 5;
  if (has_enable_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_amp(), target);
  }

  // optional uint64 if_amp = 6;
  if (has_if_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->if_amp(), target);
  }

  // optional uint64 baseband_amp = 7;
  if (has_baseband_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->baseband_amp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSpecset)
  return target;
}

int SubSpecset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double start_mhz = 1;
    if (has_start_mhz()) {
      total_size += 1 + 8;
    }

    // optional double end_mhz = 2;
    if (has_end_mhz()) {
      total_size += 1 + 8;
    }

    // optional double samples_per_bucket = 3;
    if (has_samples_per_bucket()) {
      total_size += 1 + 8;
    }

    // optional double bucket_width_hz = 4;
    if (has_bucket_width_hz()) {
      total_size += 1 + 8;
    }

    // optional bool enable_amp = 5;
    if (has_enable_amp()) {
      total_size += 1 + 1;
    }

    // optional uint64 if_amp = 6;
    if (has_if_amp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->if_amp());
    }

    // optional uint64 baseband_amp = 7;
    if (has_baseband_amp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->baseband_amp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSpecset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubSpecset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubSpecset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubSpecset::MergeFrom(const SubSpecset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_mhz()) {
      set_start_mhz(from.start_mhz());
    }
    if (from.has_end_mhz()) {
      set_end_mhz(from.end_mhz());
    }
    if (from.has_samples_per_bucket()) {
      set_samples_per_bucket(from.samples_per_bucket());
    }
    if (from.has_bucket_width_hz()) {
      set_bucket_width_hz(from.bucket_width_hz());
    }
    if (from.has_enable_amp()) {
      set_enable_amp(from.enable_amp());
    }
    if (from.has_if_amp()) {
      set_if_amp(from.if_amp());
    }
    if (from.has_baseband_amp()) {
      set_baseband_amp(from.baseband_amp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubSpecset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSpecset::CopyFrom(const SubSpecset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSpecset::IsInitialized() const {

  return true;
}

void SubSpecset::Swap(SubSpecset* other) {
  if (other != this) {
    std::swap(start_mhz_, other->start_mhz_);
    std::swap(end_mhz_, other->end_mhz_);
    std::swap(samples_per_bucket_, other->samples_per_bucket_);
    std::swap(bucket_width_hz_, other->bucket_width_hz_);
    std::swap(enable_amp_, other->enable_amp_);
    std::swap(if_amp_, other->if_amp_);
    std::swap(baseband_amp_, other->baseband_amp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubSpecset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSpecset_descriptor_;
  metadata.reflection = SubSpecset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubSpectrum::kTimeSecFieldNumber;
const int SubSpectrum::kTimeUsecFieldNumber;
const int SubSpectrum::kStartMhzFieldNumber;
const int SubSpectrum::kEndMhzFieldNumber;
const int SubSpectrum::kBucketWidthHzFieldNumber;
const int SubSpectrum::kDataFieldNumber;
#endif  // !_MSC_VER

SubSpectrum::SubSpectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSpectrum)
}

void SubSpectrum::InitAsDefaultInstance() {
}

SubSpectrum::SubSpectrum(const SubSpectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSpectrum)
}

void SubSpectrum::SharedCtor() {
  _cached_size_ = 0;
  time_sec_ = GOOGLE_ULONGLONG(0);
  time_usec_ = GOOGLE_ULONGLONG(0);
  start_mhz_ = 0;
  end_mhz_ = 0;
  bucket_width_hz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSpectrum::~SubSpectrum() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSpectrum)
  SharedDtor();
}

void SubSpectrum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSpectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSpectrum_descriptor_;
}

const SubSpectrum& SubSpectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSpectrum* SubSpectrum::default_instance_ = NULL;

SubSpectrum* SubSpectrum::New() const {
  return new SubSpectrum;
}

void SubSpectrum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubSpectrum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(time_sec_, bucket_width_hz_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSpectrum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time_sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_usec;
        break;
      }

      // optional uint64 time_usec = 2;
      case 2: {
        if (tag == 16) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_start_mhz;
        break;
      }

      // optional double start_mhz = 3;
      case 3: {
        if (tag == 25) {
         parse_start_mhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_mhz_)));
          set_has_start_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_end_mhz;
        break;
      }

      // optional double end_mhz = 4;
      case 4: {
        if (tag == 33) {
         parse_end_mhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_mhz_)));
          set_has_end_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bucket_width_hz;
        break;
      }

      // optional double bucket_width_hz = 5;
      case 5: {
        if (tag == 41) {
         parse_bucket_width_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bucket_width_hz_)));
          set_has_bucket_width_hz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data;
        break;
      }

      // repeated int32 data = 6;
      case 6: {
        if (tag == 48) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_data())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSpectrum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSpectrum)
  return false;
#undef DO_
}

void SubSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSpectrum)
  // optional uint64 time_sec = 1;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_sec(), output);
  }

  // optional uint64 time_usec = 2;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_usec(), output);
  }

  // optional double start_mhz = 3;
  if (has_start_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_mhz(), output);
  }

  // optional double end_mhz = 4;
  if (has_end_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_mhz(), output);
  }

  // optional double bucket_width_hz = 5;
  if (has_bucket_width_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bucket_width_hz(), output);
  }

  // repeated int32 data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSpectrum)
}

::google::protobuf::uint8* SubSpectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSpectrum)
  // optional uint64 time_sec = 1;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_sec(), target);
  }

  // optional uint64 time_usec = 2;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_usec(), target);
  }

  // optional double start_mhz = 3;
  if (has_start_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_mhz(), target);
  }

  // optional double end_mhz = 4;
  if (has_end_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_mhz(), target);
  }

  // optional double bucket_width_hz = 5;
  if (has_bucket_width_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bucket_width_hz(), target);
  }

  // repeated int32 data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSpectrum)
  return target;
}

int SubSpectrum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time_sec = 1;
    if (has_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_sec());
    }

    // optional uint64 time_usec = 2;
    if (has_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_usec());
    }

    // optional double start_mhz = 3;
    if (has_start_mhz()) {
      total_size += 1 + 8;
    }

    // optional double end_mhz = 4;
    if (has_end_mhz()) {
      total_size += 1 + 8;
    }

    // optional double bucket_width_hz = 5;
    if (has_bucket_width_hz()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 data = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSpectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubSpectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubSpectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubSpectrum::MergeFrom(const SubSpectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_start_mhz()) {
      set_start_mhz(from.start_mhz());
    }
    if (from.has_end_mhz()) {
      set_end_mhz(from.end_mhz());
    }
    if (from.has_bucket_width_hz()) {
      set_bucket_width_hz(from.bucket_width_hz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubSpectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSpectrum::CopyFrom(const SubSpectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSpectrum::IsInitialized() const {

  return true;
}

void SubSpectrum::Swap(SubSpectrum* other) {
  if (other != this) {
    std::swap(time_sec_, other->time_sec_);
    std::swap(time_usec_, other->time_usec_);
    std::swap(start_mhz_, other->start_mhz_);
    std::swap(end_mhz_, other->end_mhz_);
    std::swap(bucket_width_hz_, other->bucket_width_hz_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubSpectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSpectrum_descriptor_;
  metadata.reflection = SubSpectrum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubSuccess::kSuccessFieldNumber;
const int SubSuccess::kCommandNumFieldNumber;
#endif  // !_MSC_VER

SubSuccess::SubSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSuccess)
}

void SubSuccess::InitAsDefaultInstance() {
}

SubSuccess::SubSuccess(const SubSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSuccess)
}

void SubSuccess::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  command_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSuccess::~SubSuccess() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSuccess)
  SharedDtor();
}

void SubSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSuccess_descriptor_;
}

const SubSuccess& SubSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSuccess* SubSuccess::default_instance_ = NULL;

SubSuccess* SubSuccess::New() const {
  return new SubSuccess;
}

void SubSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(success_, command_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command_num;
        break;
      }

      // required uint32 command_num = 2;
      case 2: {
        if (tag == 16) {
         parse_command_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_num_)));
          set_has_command_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSuccess)
  return false;
#undef DO_
}

void SubSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSuccess)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required uint32 command_num = 2;
  if (has_command_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->command_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSuccess)
}

::google::protobuf::uint8* SubSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSuccess)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required uint32 command_num = 2;
  if (has_command_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->command_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSuccess)
  return target;
}

int SubSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // required uint32 command_num = 2;
    if (has_command_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubSuccess::MergeFrom(const SubSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_command_num()) {
      set_command_num(from.command_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSuccess::CopyFrom(const SubSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubSuccess::Swap(SubSuccess* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(command_num_, other->command_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSuccess_descriptor_;
  metadata.reflection = SubSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Channels::kChannelsFieldNumber;
#endif  // !_MSC_VER

Channels::Channels()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.Channels)
}

void Channels::InitAsDefaultInstance() {
  channels_ = const_cast< ::KismetDatasource::SubChannels*>(&::KismetDatasource::SubChannels::default_instance());
}

Channels::Channels(const Channels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.Channels)
}

void Channels::SharedCtor() {
  _cached_size_ = 0;
  channels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channels::~Channels() {
  // @@protoc_insertion_point(destructor:KismetDatasource.Channels)
  SharedDtor();
}

void Channels::SharedDtor() {
  if (this != default_instance_) {
    delete channels_;
  }
}

void Channels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channels_descriptor_;
}

const Channels& Channels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

Channels* Channels::default_instance_ = NULL;

Channels* Channels::New() const {
  return new Channels;
}

void Channels::Clear() {
  if (has_channels()) {
    if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Channels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.Channels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubChannels channels = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.Channels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.Channels)
  return false;
#undef DO_
}

void Channels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.Channels)
  // required .KismetDatasource.SubChannels channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.Channels)
}

::google::protobuf::uint8* Channels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.Channels)
  // required .KismetDatasource.SubChannels channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.Channels)
  return target;
}

int Channels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KismetDatasource.SubChannels channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Channels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Channels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Channels::MergeFrom(const Channels& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      mutable_channels()->::KismetDatasource::SubChannels::MergeFrom(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Channels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channels::CopyFrom(const Channels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channels::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Channels::Swap(Channels* other) {
  if (other != this) {
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Channels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channels_descriptor_;
  metadata.reflection = Channels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CloseDatasource::CloseDatasource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.CloseDatasource)
}

void CloseDatasource::InitAsDefaultInstance() {
}

CloseDatasource::CloseDatasource(const CloseDatasource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.CloseDatasource)
}

void CloseDatasource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseDatasource::~CloseDatasource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.CloseDatasource)
  SharedDtor();
}

void CloseDatasource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseDatasource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseDatasource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseDatasource_descriptor_;
}

const CloseDatasource& CloseDatasource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

CloseDatasource* CloseDatasource::default_instance_ = NULL;

CloseDatasource* CloseDatasource::New() const {
  return new CloseDatasource;
}

void CloseDatasource::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseDatasource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.CloseDatasource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.CloseDatasource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.CloseDatasource)
  return false;
#undef DO_
}

void CloseDatasource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.CloseDatasource)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.CloseDatasource)
}

::google::protobuf::uint8* CloseDatasource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.CloseDatasource)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.CloseDatasource)
  return target;
}

int CloseDatasource::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseDatasource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseDatasource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseDatasource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseDatasource::MergeFrom(const CloseDatasource& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseDatasource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDatasource::CopyFrom(const CloseDatasource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDatasource::IsInitialized() const {

  return true;
}

void CloseDatasource::Swap(CloseDatasource* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseDatasource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseDatasource_descriptor_;
  metadata.reflection = CloseDatasource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configure::kChannelFieldNumber;
const int Configure::kHoppingFieldNumber;
const int Configure::kSpectrumFieldNumber;
#endif  // !_MSC_VER

Configure::Configure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.Configure)
}

void Configure::InitAsDefaultInstance() {
  channel_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  hopping_ = const_cast< ::KismetDatasource::SubChanhop*>(&::KismetDatasource::SubChanhop::default_instance());
  spectrum_ = const_cast< ::KismetDatasource::SubSpecset*>(&::KismetDatasource::SubSpecset::default_instance());
}

Configure::Configure(const Configure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.Configure)
}

void Configure::SharedCtor() {
  _cached_size_ = 0;
  channel_ = NULL;
  hopping_ = NULL;
  spectrum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:KismetDatasource.Configure)
  SharedDtor();
}

void Configure::SharedDtor() {
  if (this != default_instance_) {
    delete channel_;
    delete hopping_;
    delete spectrum_;
  }
}

void Configure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configure_descriptor_;
}

const Configure& Configure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

Configure* Configure::default_instance_ = NULL;

Configure* Configure::New() const {
  return new Configure;
}

void Configure::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_channel()) {
      if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_hopping()) {
      if (hopping_ != NULL) hopping_->::KismetDatasource::SubChanhop::Clear();
    }
    if (has_spectrum()) {
      if (spectrum_ != NULL) spectrum_->::KismetDatasource::SubSpecset::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.Configure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KismetDatasource.SubChanset channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hopping;
        break;
      }

      // optional .KismetDatasource.SubChanhop hopping = 2;
      case 2: {
        if (tag == 18) {
         parse_hopping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spectrum;
        break;
      }

      // optional .KismetDatasource.SubSpecset spectrum = 3;
      case 3: {
        if (tag == 26) {
         parse_spectrum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.Configure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.Configure)
  return false;
#undef DO_
}

void Configure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.Configure)
  // optional .KismetDatasource.SubChanset channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel(), output);
  }

  // optional .KismetDatasource.SubChanhop hopping = 2;
  if (has_hopping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hopping(), output);
  }

  // optional .KismetDatasource.SubSpecset spectrum = 3;
  if (has_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spectrum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.Configure)
}

::google::protobuf::uint8* Configure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.Configure)
  // optional .KismetDatasource.SubChanset channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel(), target);
  }

  // optional .KismetDatasource.SubChanhop hopping = 2;
  if (has_hopping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hopping(), target);
  }

  // optional .KismetDatasource.SubSpecset spectrum = 3;
  if (has_spectrum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spectrum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.Configure)
  return target;
}

int Configure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KismetDatasource.SubChanset channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel());
    }

    // optional .KismetDatasource.SubChanhop hopping = 2;
    if (has_hopping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hopping());
    }

    // optional .KismetDatasource.SubSpecset spectrum = 3;
    if (has_spectrum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spectrum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configure::MergeFrom(const Configure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      mutable_channel()->::KismetDatasource::SubChanset::MergeFrom(from.channel());
    }
    if (from.has_hopping()) {
      mutable_hopping()->::KismetDatasource::SubChanhop::MergeFrom(from.hopping());
    }
    if (from.has_spectrum()) {
      mutable_spectrum()->::KismetDatasource::SubSpecset::MergeFrom(from.spectrum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configure::CopyFrom(const Configure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {

  if (has_channel()) {
    if (!this->channel().IsInitialized()) return false;
  }
  return true;
}

void Configure::Swap(Configure* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(hopping_, other->hopping_);
    std::swap(spectrum_, other->spectrum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configure_descriptor_;
  metadata.reflection = Configure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigureReport::kSuccessFieldNumber;
const int ConfigureReport::kChannelFieldNumber;
const int ConfigureReport::kHoppingFieldNumber;
const int ConfigureReport::kMessageFieldNumber;
const int ConfigureReport::kWarningFieldNumber;
#endif  // !_MSC_VER

ConfigureReport::ConfigureReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ConfigureReport)
}

void ConfigureReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  channel_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  hopping_ = const_cast< ::KismetDatasource::SubChanhop*>(&::KismetDatasource::SubChanhop::default_instance());
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
}

ConfigureReport::ConfigureReport(const ConfigureReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ConfigureReport)
}

void ConfigureReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = NULL;
  channel_ = NULL;
  hopping_ = NULL;
  message_ = NULL;
  warning_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigureReport::~ConfigureReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ConfigureReport)
  SharedDtor();
}

void ConfigureReport::SharedDtor() {
  if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warning_;
  }
  if (this != default_instance_) {
    delete success_;
    delete channel_;
    delete hopping_;
    delete message_;
  }
}

void ConfigureReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigureReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigureReport_descriptor_;
}

const ConfigureReport& ConfigureReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ConfigureReport* ConfigureReport::default_instance_ = NULL;

ConfigureReport* ConfigureReport::New() const {
  return new ConfigureReport;
}

void ConfigureReport::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_hopping()) {
      if (hopping_ != NULL) hopping_->::KismetDatasource::SubChanhop::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
    if (has_warning()) {
      if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warning_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigureReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ConfigureReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }

      // optional .KismetDatasource.SubChanset channel = 2;
      case 2: {
        if (tag == 18) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hopping;
        break;
      }

      // optional .KismetDatasource.SubChanhop hopping = 3;
      case 3: {
        if (tag == 26) {
         parse_hopping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional .KismetExternal.MsgbusMessage message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_warning;
        break;
      }

      // optional string warning = 5;
      case 5: {
        if (tag == 42) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ConfigureReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ConfigureReport)
  return false;
#undef DO_
}

void ConfigureReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ConfigureReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success(), output);
  }

  // optional .KismetDatasource.SubChanset channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel(), output);
  }

  // optional .KismetDatasource.SubChanhop hopping = 3;
  if (has_hopping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hopping(), output);
  }

  // optional .KismetExternal.MsgbusMessage message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->message(), output);
  }

  // optional string warning = 5;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->warning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ConfigureReport)
}

::google::protobuf::uint8* ConfigureReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ConfigureReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success(), target);
  }

  // optional .KismetDatasource.SubChanset channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel(), target);
  }

  // optional .KismetDatasource.SubChanhop hopping = 3;
  if (has_hopping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hopping(), target);
  }

  // optional .KismetExternal.MsgbusMessage message = 4;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->message(), target);
  }

  // optional string warning = 5;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->warning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ConfigureReport)
  return target;
}

int ConfigureReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KismetDatasource.SubSuccess success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .KismetDatasource.SubChanset channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel());
    }

    // optional .KismetDatasource.SubChanhop hopping = 3;
    if (has_hopping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hopping());
    }

    // optional .KismetExternal.MsgbusMessage message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional string warning = 5;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigureReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigureReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigureReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigureReport::MergeFrom(const ConfigureReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_channel()) {
      mutable_channel()->::KismetDatasource::SubChanset::MergeFrom(from.channel());
    }
    if (from.has_hopping()) {
      mutable_hopping()->::KismetDatasource::SubChanhop::MergeFrom(from.hopping());
    }
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigureReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigureReport::CopyFrom(const ConfigureReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigureReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void ConfigureReport::Swap(ConfigureReport* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(channel_, other->channel_);
    std::swap(hopping_, other->hopping_);
    std::swap(message_, other->message_);
    std::swap(warning_, other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigureReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigureReport_descriptor_;
  metadata.reflection = ConfigureReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataReport::kGpsFieldNumber;
const int DataReport::kMessageFieldNumber;
const int DataReport::kPacketFieldNumber;
const int DataReport::kSignalFieldNumber;
const int DataReport::kSpectrumFieldNumber;
const int DataReport::kWarningFieldNumber;
#endif  // !_MSC_VER

DataReport::DataReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.DataReport)
}

void DataReport::InitAsDefaultInstance() {
  gps_ = const_cast< ::KismetDatasource::SubGps*>(&::KismetDatasource::SubGps::default_instance());
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
  packet_ = const_cast< ::KismetDatasource::SubPacket*>(&::KismetDatasource::SubPacket::default_instance());
  signal_ = const_cast< ::KismetDatasource::SubSignal*>(&::KismetDatasource::SubSignal::default_instance());
  spectrum_ = const_cast< ::KismetDatasource::SubSpectrum*>(&::KismetDatasource::SubSpectrum::default_instance());
}

DataReport::DataReport(const DataReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.DataReport)
}

void DataReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gps_ = NULL;
  message_ = NULL;
  packet_ = NULL;
  signal_ = NULL;
  spectrum_ = NULL;
  warning_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReport::~DataReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.DataReport)
  SharedDtor();
}

void DataReport::SharedDtor() {
  if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warning_;
  }
  if (this != default_instance_) {
    delete gps_;
    delete message_;
    delete packet_;
    delete signal_;
    delete spectrum_;
  }
}

void DataReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReport_descriptor_;
}

const DataReport& DataReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

DataReport* DataReport::default_instance_ = NULL;

DataReport* DataReport::New() const {
  return new DataReport;
}

void DataReport::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_gps()) {
      if (gps_ != NULL) gps_->::KismetDatasource::SubGps::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
    if (has_packet()) {
      if (packet_ != NULL) packet_->::KismetDatasource::SubPacket::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::KismetDatasource::SubSignal::Clear();
    }
    if (has_spectrum()) {
      if (spectrum_ != NULL) spectrum_->::KismetDatasource::SubSpectrum::Clear();
    }
    if (has_warning()) {
      if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warning_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.DataReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KismetDatasource.SubGps gps = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetExternal.MsgbusMessage message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_packet;
        break;
      }

      // optional .KismetDatasource.SubPacket packet = 3;
      case 3: {
        if (tag == 26) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signal;
        break;
      }

      // optional .KismetDatasource.SubSignal signal = 4;
      case 4: {
        if (tag == 34) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_spectrum;
        break;
      }

      // optional .KismetDatasource.SubSpectrum spectrum = 5;
      case 5: {
        if (tag == 42) {
         parse_spectrum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_warning;
        break;
      }

      // optional string warning = 6;
      case 6: {
        if (tag == 50) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.DataReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.DataReport)
  return false;
#undef DO_
}

void DataReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.DataReport)
  // optional .KismetDatasource.SubGps gps = 1;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps(), output);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(), output);
  }

  // optional .KismetDatasource.SubPacket packet = 3;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packet(), output);
  }

  // optional .KismetDatasource.SubSignal signal = 4;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signal(), output);
  }

  // optional .KismetDatasource.SubSpectrum spectrum = 5;
  if (has_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->spectrum(), output);
  }

  // optional string warning = 6;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->warning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.DataReport)
}

::google::protobuf::uint8* DataReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.DataReport)
  // optional .KismetDatasource.SubGps gps = 1;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps(), target);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }

  // optional .KismetDatasource.SubPacket packet = 3;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->packet(), target);
  }

  // optional .KismetDatasource.SubSignal signal = 4;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->signal(), target);
  }

  // optional .KismetDatasource.SubSpectrum spectrum = 5;
  if (has_spectrum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->spectrum(), target);
  }

  // optional string warning = 6;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->warning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.DataReport)
  return target;
}

int DataReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KismetDatasource.SubGps gps = 1;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

    // optional .KismetExternal.MsgbusMessage message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional .KismetDatasource.SubPacket packet = 3;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }

    // optional .KismetDatasource.SubSignal signal = 4;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional .KismetDatasource.SubSpectrum spectrum = 5;
    if (has_spectrum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spectrum());
    }

    // optional string warning = 6;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataReport::MergeFrom(const DataReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps()) {
      mutable_gps()->::KismetDatasource::SubGps::MergeFrom(from.gps());
    }
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
    if (from.has_packet()) {
      mutable_packet()->::KismetDatasource::SubPacket::MergeFrom(from.packet());
    }
    if (from.has_signal()) {
      mutable_signal()->::KismetDatasource::SubSignal::MergeFrom(from.signal());
    }
    if (from.has_spectrum()) {
      mutable_spectrum()->::KismetDatasource::SubSpectrum::MergeFrom(from.spectrum());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReport::CopyFrom(const DataReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReport::IsInitialized() const {

  if (has_gps()) {
    if (!this->gps().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  if (has_packet()) {
    if (!this->packet().IsInitialized()) return false;
  }
  return true;
}

void DataReport::Swap(DataReport* other) {
  if (other != this) {
    std::swap(gps_, other->gps_);
    std::swap(message_, other->message_);
    std::swap(packet_, other->packet_);
    std::swap(signal_, other->signal_);
    std::swap(spectrum_, other->spectrum_);
    std::swap(warning_, other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReport_descriptor_;
  metadata.reflection = DataReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorReport::kSuccessFieldNumber;
const int ErrorReport::kMessageFieldNumber;
#endif  // !_MSC_VER

ErrorReport::ErrorReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ErrorReport)
}

void ErrorReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
}

ErrorReport::ErrorReport(const ErrorReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ErrorReport)
}

void ErrorReport::SharedCtor() {
  _cached_size_ = 0;
  success_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorReport::~ErrorReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ErrorReport)
  SharedDtor();
}

void ErrorReport::SharedDtor() {
  if (this != default_instance_) {
    delete success_;
    delete message_;
  }
}

void ErrorReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorReport_descriptor_;
}

const ErrorReport& ErrorReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ErrorReport* ErrorReport::default_instance_ = NULL;

ErrorReport* ErrorReport::New() const {
  return new ErrorReport;
}

void ErrorReport::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ErrorReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetExternal.MsgbusMessage message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ErrorReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ErrorReport)
  return false;
#undef DO_
}

void ErrorReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ErrorReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success(), output);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ErrorReport)
}

::google::protobuf::uint8* ErrorReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ErrorReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success(), target);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ErrorReport)
  return target;
}

int ErrorReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KismetDatasource.SubSuccess success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .KismetExternal.MsgbusMessage message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorReport::MergeFrom(const ErrorReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorReport::CopyFrom(const ErrorReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void ErrorReport::Swap(ErrorReport* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorReport_descriptor_;
  metadata.reflection = ErrorReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListInterfaces::ListInterfaces()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ListInterfaces)
}

void ListInterfaces::InitAsDefaultInstance() {
}

ListInterfaces::ListInterfaces(const ListInterfaces& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ListInterfaces)
}

void ListInterfaces::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListInterfaces::~ListInterfaces() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ListInterfaces)
  SharedDtor();
}

void ListInterfaces::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListInterfaces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInterfaces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListInterfaces_descriptor_;
}

const ListInterfaces& ListInterfaces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ListInterfaces* ListInterfaces::default_instance_ = NULL;

ListInterfaces* ListInterfaces::New() const {
  return new ListInterfaces;
}

void ListInterfaces::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListInterfaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ListInterfaces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ListInterfaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ListInterfaces)
  return false;
#undef DO_
}

void ListInterfaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ListInterfaces)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ListInterfaces)
}

::google::protobuf::uint8* ListInterfaces::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ListInterfaces)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ListInterfaces)
  return target;
}

int ListInterfaces::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInterfaces::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListInterfaces* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListInterfaces*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListInterfaces::MergeFrom(const ListInterfaces& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListInterfaces::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInterfaces::CopyFrom(const ListInterfaces& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInterfaces::IsInitialized() const {

  return true;
}

void ListInterfaces::Swap(ListInterfaces* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListInterfaces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListInterfaces_descriptor_;
  metadata.reflection = ListInterfaces_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InterfacesReport::kSuccessFieldNumber;
const int InterfacesReport::kMessageFieldNumber;
const int InterfacesReport::kInterfacesFieldNumber;
#endif  // !_MSC_VER

InterfacesReport::InterfacesReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.InterfacesReport)
}

void InterfacesReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
}

InterfacesReport::InterfacesReport(const InterfacesReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.InterfacesReport)
}

void InterfacesReport::SharedCtor() {
  _cached_size_ = 0;
  success_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterfacesReport::~InterfacesReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.InterfacesReport)
  SharedDtor();
}

void InterfacesReport::SharedDtor() {
  if (this != default_instance_) {
    delete success_;
    delete message_;
  }
}

void InterfacesReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterfacesReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterfacesReport_descriptor_;
}

const InterfacesReport& InterfacesReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

InterfacesReport* InterfacesReport::default_instance_ = NULL;

InterfacesReport* InterfacesReport::New() const {
  return new InterfacesReport;
}

void InterfacesReport::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
  }
  interfaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterfacesReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.InterfacesReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetExternal.MsgbusMessage message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interfaces;
        break;
      }

      // repeated .KismetDatasource.SubInterface interfaces = 3;
      case 3: {
        if (tag == 26) {
         parse_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interfaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interfaces;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.InterfacesReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.InterfacesReport)
  return false;
#undef DO_
}

void InterfacesReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.InterfacesReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success(), output);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(), output);
  }

  // repeated .KismetDatasource.SubInterface interfaces = 3;
  for (int i = 0; i < this->interfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->interfaces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.InterfacesReport)
}

::google::protobuf::uint8* InterfacesReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.InterfacesReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success(), target);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }

  // repeated .KismetDatasource.SubInterface interfaces = 3;
  for (int i = 0; i < this->interfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->interfaces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.InterfacesReport)
  return target;
}

int InterfacesReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KismetDatasource.SubSuccess success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .KismetExternal.MsgbusMessage message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

  }
  // repeated .KismetDatasource.SubInterface interfaces = 3;
  total_size += 1 * this->interfaces_size();
  for (int i = 0; i < this->interfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interfaces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterfacesReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterfacesReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterfacesReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterfacesReport::MergeFrom(const InterfacesReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  interfaces_.MergeFrom(from.interfaces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterfacesReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfacesReport::CopyFrom(const InterfacesReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfacesReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->interfaces())) return false;
  return true;
}

void InterfacesReport::Swap(InterfacesReport* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    interfaces_.Swap(&other->interfaces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterfacesReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterfacesReport_descriptor_;
  metadata.reflection = InterfacesReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMessageFieldNumber;
const int Message::kWarningFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.Message)
}

void Message::InitAsDefaultInstance() {
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = NULL;
  warning_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:KismetDatasource.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warning_;
  }
  if (this != default_instance_) {
    delete message_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
    if (has_warning()) {
      if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warning_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KismetExternal.MsgbusMessage message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_warning;
        break;
      }

      // optional string warning = 2;
      case 2: {
        if (tag == 18) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.Message)
  // optional .KismetExternal.MsgbusMessage message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message(), output);
  }

  // optional string warning = 2;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->warning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.Message)
  // optional .KismetExternal.MsgbusMessage message = 1;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message(), target);
  }

  // optional string warning = 2;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->warning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KismetExternal.MsgbusMessage message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional string warning = 2;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(warning_, other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewSource::kDefinitionFieldNumber;
const int NewSource::kSourcetypeFieldNumber;
const int NewSource::kUuidFieldNumber;
#endif  // !_MSC_VER

NewSource::NewSource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.NewSource)
}

void NewSource::InitAsDefaultInstance() {
}

NewSource::NewSource(const NewSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.NewSource)
}

void NewSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewSource::~NewSource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.NewSource)
  SharedDtor();
}

void NewSource::SharedDtor() {
  if (definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete definition_;
  }
  if (sourcetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcetype_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void NewSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSource_descriptor_;
}

const NewSource& NewSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

NewSource* NewSource::default_instance_ = NULL;

NewSource* NewSource::New() const {
  return new NewSource;
}

void NewSource::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_definition()) {
      if (definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        definition_->clear();
      }
    }
    if (has_sourcetype()) {
      if (sourcetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourcetype_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.NewSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sourcetype;
        break;
      }

      // required string sourcetype = 2;
      case 2: {
        if (tag == 18) {
         parse_sourcetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcetype().data(), this->sourcetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourcetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // required string uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.NewSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.NewSource)
  return false;
#undef DO_
}

void NewSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.NewSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->definition(), output);
  }

  // required string sourcetype = 2;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcetype().data(), this->sourcetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourcetype(), output);
  }

  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.NewSource)
}

::google::protobuf::uint8* NewSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.NewSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->definition(), target);
  }

  // required string sourcetype = 2;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcetype().data(), this->sourcetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourcetype(), target);
  }

  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.NewSource)
  return target;
}

int NewSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string definition = 1;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

    // required string sourcetype = 2;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcetype());
    }

    // required string uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewSource::MergeFrom(const NewSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_definition()) {
      set_definition(from.definition());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSource::CopyFrom(const NewSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewSource::Swap(NewSource* other) {
  if (other != this) {
    std::swap(definition_, other->definition_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewSource_descriptor_;
  metadata.reflection = NewSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenSource::kDefinitionFieldNumber;
#endif  // !_MSC_VER

OpenSource::OpenSource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.OpenSource)
}

void OpenSource::InitAsDefaultInstance() {
}

OpenSource::OpenSource(const OpenSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.OpenSource)
}

void OpenSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSource::~OpenSource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.OpenSource)
  SharedDtor();
}

void OpenSource::SharedDtor() {
  if (definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete definition_;
  }
  if (this != default_instance_) {
  }
}

void OpenSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSource_descriptor_;
}

const OpenSource& OpenSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

OpenSource* OpenSource::default_instance_ = NULL;

OpenSource* OpenSource::New() const {
  return new OpenSource;
}

void OpenSource::Clear() {
  if (has_definition()) {
    if (definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      definition_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.OpenSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.OpenSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.OpenSource)
  return false;
#undef DO_
}

void OpenSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.OpenSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->definition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.OpenSource)
}

::google::protobuf::uint8* OpenSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.OpenSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->definition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.OpenSource)
  return target;
}

int OpenSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string definition = 1;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSource::MergeFrom(const OpenSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_definition()) {
      set_definition(from.definition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSource::CopyFrom(const OpenSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenSource::Swap(OpenSource* other) {
  if (other != this) {
    std::swap(definition_, other->definition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSource_descriptor_;
  metadata.reflection = OpenSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenSourceReport::kSuccessFieldNumber;
const int OpenSourceReport::kDltFieldNumber;
const int OpenSourceReport::kCaptureInterfaceFieldNumber;
const int OpenSourceReport::kChannelsFieldNumber;
const int OpenSourceReport::kChannelFieldNumber;
const int OpenSourceReport::kHardwareFieldNumber;
const int OpenSourceReport::kMessageFieldNumber;
const int OpenSourceReport::kSpecsetFieldNumber;
const int OpenSourceReport::kUuidFieldNumber;
const int OpenSourceReport::kWarningFieldNumber;
#endif  // !_MSC_VER

OpenSourceReport::OpenSourceReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.OpenSourceReport)
}

void OpenSourceReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  channels_ = const_cast< ::KismetDatasource::SubChannels*>(&::KismetDatasource::SubChannels::default_instance());
  channel_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
  specset_ = const_cast< ::KismetDatasource::SubSpecset*>(&::KismetDatasource::SubSpecset::default_instance());
}

OpenSourceReport::OpenSourceReport(const OpenSourceReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.OpenSourceReport)
}

void OpenSourceReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = NULL;
  dlt_ = 0u;
  capture_interface_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channels_ = NULL;
  channel_ = NULL;
  hardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
  specset_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warning_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSourceReport::~OpenSourceReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.OpenSourceReport)
  SharedDtor();
}

void OpenSourceReport::SharedDtor() {
  if (capture_interface_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capture_interface_;
  }
  if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warning_;
  }
  if (this != default_instance_) {
    delete success_;
    delete channels_;
    delete channel_;
    delete message_;
    delete specset_;
  }
}

void OpenSourceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSourceReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSourceReport_descriptor_;
}

const OpenSourceReport& OpenSourceReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

OpenSourceReport* OpenSourceReport::default_instance_ = NULL;

OpenSourceReport* OpenSourceReport::New() const {
  return new OpenSourceReport;
}

void OpenSourceReport::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    dlt_ = 0u;
    if (has_capture_interface()) {
      if (capture_interface_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        capture_interface_->clear();
      }
    }
    if (has_channels()) {
      if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_hardware()) {
      if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_->clear();
      }
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
    if (has_specset()) {
      if (specset_ != NULL) specset_->::KismetDatasource::SubSpecset::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_warning()) {
      if (warning_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warning_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSourceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.OpenSourceReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dlt;
        break;
      }

      // optional uint32 dlt = 2;
      case 2: {
        if (tag == 16) {
         parse_dlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlt_)));
          set_has_dlt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capture_interface;
        break;
      }

      // optional string capture_interface = 3;
      case 3: {
        if (tag == 26) {
         parse_capture_interface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capture_interface().data(), this->capture_interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "capture_interface");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_channels;
        break;
      }

      // optional .KismetDatasource.SubChannels channels = 4;
      case 4: {
        if (tag == 34) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional .KismetDatasource.SubChanset channel = 5;
      case 5: {
        if (tag == 42) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hardware;
        break;
      }

      // optional string hardware = 6;
      case 6: {
        if (tag == 50) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_message;
        break;
      }

      // optional .KismetExternal.MsgbusMessage message = 7;
      case 7: {
        if (tag == 58) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_specset;
        break;
      }

      // optional .KismetDatasource.SubSpecset specset = 8;
      case 8: {
        if (tag == 66) {
         parse_specset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_uuid;
        break;
      }

      // optional string uuid = 9;
      case 9: {
        if (tag == 74) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_warning;
        break;
      }

      // optional string warning = 10;
      case 10: {
        if (tag == 82) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.OpenSourceReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.OpenSourceReport)
  return false;
#undef DO_
}

void OpenSourceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.OpenSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success(), output);
  }

  // optional uint32 dlt = 2;
  if (has_dlt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dlt(), output);
  }

  // optional string capture_interface = 3;
  if (has_capture_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture_interface().data(), this->capture_interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture_interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->capture_interface(), output);
  }

  // optional .KismetDatasource.SubChannels channels = 4;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->channels(), output);
  }

  // optional .KismetDatasource.SubChanset channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->channel(), output);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hardware(), output);
  }

  // optional .KismetExternal.MsgbusMessage message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->message(), output);
  }

  // optional .KismetDatasource.SubSpecset specset = 8;
  if (has_specset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->specset(), output);
  }

  // optional string uuid = 9;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->uuid(), output);
  }

  // optional string warning = 10;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->warning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.OpenSourceReport)
}

::google::protobuf::uint8* OpenSourceReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.OpenSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success(), target);
  }

  // optional uint32 dlt = 2;
  if (has_dlt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dlt(), target);
  }

  // optional string capture_interface = 3;
  if (has_capture_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture_interface().data(), this->capture_interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capture_interface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->capture_interface(), target);
  }

  // optional .KismetDatasource.SubChannels channels = 4;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->channels(), target);
  }

  // optional .KismetDatasource.SubChanset channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->channel(), target);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hardware(), target);
  }

  // optional .KismetExternal.MsgbusMessage message = 7;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->message(), target);
  }

  // optional .KismetDatasource.SubSpecset specset = 8;
  if (has_specset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->specset(), target);
  }

  // optional string uuid = 9;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uuid(), target);
  }

  // optional string warning = 10;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->warning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.OpenSourceReport)
  return target;
}

int OpenSourceReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KismetDatasource.SubSuccess success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional uint32 dlt = 2;
    if (has_dlt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dlt());
    }

    // optional string capture_interface = 3;
    if (has_capture_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture_interface());
    }

    // optional .KismetDatasource.SubChannels channels = 4;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channels());
    }

    // optional .KismetDatasource.SubChanset channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel());
    }

    // optional string hardware = 6;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

    // optional .KismetExternal.MsgbusMessage message = 7;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional .KismetDatasource.SubSpecset specset = 8;
    if (has_specset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specset());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string uuid = 9;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string warning = 10;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSourceReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSourceReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSourceReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSourceReport::MergeFrom(const OpenSourceReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_dlt()) {
      set_dlt(from.dlt());
    }
    if (from.has_capture_interface()) {
      set_capture_interface(from.capture_interface());
    }
    if (from.has_channels()) {
      mutable_channels()->::KismetDatasource::SubChannels::MergeFrom(from.channels());
    }
    if (from.has_channel()) {
      mutable_channel()->::KismetDatasource::SubChanset::MergeFrom(from.channel());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
    if (from.has_specset()) {
      mutable_specset()->::KismetDatasource::SubSpecset::MergeFrom(from.specset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSourceReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSourceReport::CopyFrom(const OpenSourceReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSourceReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void OpenSourceReport::Swap(OpenSourceReport* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(dlt_, other->dlt_);
    std::swap(capture_interface_, other->capture_interface_);
    std::swap(channels_, other->channels_);
    std::swap(channel_, other->channel_);
    std::swap(hardware_, other->hardware_);
    std::swap(message_, other->message_);
    std::swap(specset_, other->specset_);
    std::swap(uuid_, other->uuid_);
    std::swap(warning_, other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSourceReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSourceReport_descriptor_;
  metadata.reflection = OpenSourceReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProbeSource::kDefinitionFieldNumber;
#endif  // !_MSC_VER

ProbeSource::ProbeSource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ProbeSource)
}

void ProbeSource::InitAsDefaultInstance() {
}

ProbeSource::ProbeSource(const ProbeSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ProbeSource)
}

void ProbeSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbeSource::~ProbeSource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ProbeSource)
  SharedDtor();
}

void ProbeSource::SharedDtor() {
  if (definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete definition_;
  }
  if (this != default_instance_) {
  }
}

void ProbeSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbeSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProbeSource_descriptor_;
}

const ProbeSource& ProbeSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ProbeSource* ProbeSource::default_instance_ = NULL;

ProbeSource* ProbeSource::New() const {
  return new ProbeSource;
}

void ProbeSource::Clear() {
  if (has_definition()) {
    if (definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      definition_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProbeSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ProbeSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ProbeSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ProbeSource)
  return false;
#undef DO_
}

void ProbeSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ProbeSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->definition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ProbeSource)
}

::google::protobuf::uint8* ProbeSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ProbeSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->definition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ProbeSource)
  return target;
}

int ProbeSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string definition = 1;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbeSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProbeSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProbeSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProbeSource::MergeFrom(const ProbeSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_definition()) {
      set_definition(from.definition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProbeSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeSource::CopyFrom(const ProbeSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProbeSource::Swap(ProbeSource* other) {
  if (other != this) {
    std::swap(definition_, other->definition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProbeSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProbeSource_descriptor_;
  metadata.reflection = ProbeSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProbeSourceReport::kSuccessFieldNumber;
const int ProbeSourceReport::kMessageFieldNumber;
const int ProbeSourceReport::kChannelsFieldNumber;
const int ProbeSourceReport::kChansetFieldNumber;
const int ProbeSourceReport::kSpecsetFieldNumber;
const int ProbeSourceReport::kHardwareFieldNumber;
#endif  // !_MSC_VER

ProbeSourceReport::ProbeSourceReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ProbeSourceReport)
}

void ProbeSourceReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  message_ = const_cast< ::KismetExternal::MsgbusMessage*>(&::KismetExternal::MsgbusMessage::default_instance());
  channels_ = const_cast< ::KismetDatasource::SubChannels*>(&::KismetDatasource::SubChannels::default_instance());
  chanset_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  specset_ = const_cast< ::KismetDatasource::SubSpecset*>(&::KismetDatasource::SubSpecset::default_instance());
}

ProbeSourceReport::ProbeSourceReport(const ProbeSourceReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ProbeSourceReport)
}

void ProbeSourceReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = NULL;
  message_ = NULL;
  channels_ = NULL;
  chanset_ = NULL;
  specset_ = NULL;
  hardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbeSourceReport::~ProbeSourceReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ProbeSourceReport)
  SharedDtor();
}

void ProbeSourceReport::SharedDtor() {
  if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_;
  }
  if (this != default_instance_) {
    delete success_;
    delete message_;
    delete channels_;
    delete chanset_;
    delete specset_;
  }
}

void ProbeSourceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbeSourceReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProbeSourceReport_descriptor_;
}

const ProbeSourceReport& ProbeSourceReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ProbeSourceReport* ProbeSourceReport::default_instance_ = NULL;

ProbeSourceReport* ProbeSourceReport::New() const {
  return new ProbeSourceReport;
}

void ProbeSourceReport::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetExternal::MsgbusMessage::Clear();
    }
    if (has_channels()) {
      if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
    }
    if (has_chanset()) {
      if (chanset_ != NULL) chanset_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_specset()) {
      if (specset_ != NULL) specset_->::KismetDatasource::SubSpecset::Clear();
    }
    if (has_hardware()) {
      if (hardware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProbeSourceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ProbeSourceReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetExternal.MsgbusMessage message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }

      // optional .KismetDatasource.SubChannels channels = 3;
      case 3: {
        if (tag == 26) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chanset;
        break;
      }

      // optional .KismetDatasource.SubChanset chanset = 4;
      case 4: {
        if (tag == 34) {
         parse_chanset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chanset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_specset;
        break;
      }

      // optional .KismetDatasource.SubSpecset specset = 5;
      case 5: {
        if (tag == 42) {
         parse_specset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hardware;
        break;
      }

      // optional string hardware = 6;
      case 6: {
        if (tag == 50) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ProbeSourceReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ProbeSourceReport)
  return false;
#undef DO_
}

void ProbeSourceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ProbeSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success(), output);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(), output);
  }

  // optional .KismetDatasource.SubChannels channels = 3;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channels(), output);
  }

  // optional .KismetDatasource.SubChanset chanset = 4;
  if (has_chanset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chanset(), output);
  }

  // optional .KismetDatasource.SubSpecset specset = 5;
  if (has_specset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->specset(), output);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hardware(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ProbeSourceReport)
}

::google::protobuf::uint8* ProbeSourceReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ProbeSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success(), target);
  }

  // optional .KismetExternal.MsgbusMessage message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }

  // optional .KismetDatasource.SubChannels channels = 3;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channels(), target);
  }

  // optional .KismetDatasource.SubChanset chanset = 4;
  if (has_chanset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chanset(), target);
  }

  // optional .KismetDatasource.SubSpecset specset = 5;
  if (has_specset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->specset(), target);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hardware(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ProbeSourceReport)
  return target;
}

int ProbeSourceReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KismetDatasource.SubSuccess success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .KismetExternal.MsgbusMessage message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional .KismetDatasource.SubChannels channels = 3;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channels());
    }

    // optional .KismetDatasource.SubChanset chanset = 4;
    if (has_chanset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chanset());
    }

    // optional .KismetDatasource.SubSpecset specset = 5;
    if (has_specset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specset());
    }

    // optional string hardware = 6;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbeSourceReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProbeSourceReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProbeSourceReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProbeSourceReport::MergeFrom(const ProbeSourceReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_message()) {
      mutable_message()->::KismetExternal::MsgbusMessage::MergeFrom(from.message());
    }
    if (from.has_channels()) {
      mutable_channels()->::KismetDatasource::SubChannels::MergeFrom(from.channels());
    }
    if (from.has_chanset()) {
      mutable_chanset()->::KismetDatasource::SubChanset::MergeFrom(from.chanset());
    }
    if (from.has_specset()) {
      mutable_specset()->::KismetDatasource::SubSpecset::MergeFrom(from.specset());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProbeSourceReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeSourceReport::CopyFrom(const ProbeSourceReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeSourceReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  if (has_chanset()) {
    if (!this->chanset().IsInitialized()) return false;
  }
  return true;
}

void ProbeSourceReport::Swap(ProbeSourceReport* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(channels_, other->channels_);
    std::swap(chanset_, other->chanset_);
    std::swap(specset_, other->specset_);
    std::swap(hardware_, other->hardware_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProbeSourceReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProbeSourceReport_descriptor_;
  metadata.reflection = ProbeSourceReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KismetDatasource

// @@protoc_insertion_point(global_scope)
