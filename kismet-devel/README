Kismet 3.0.1
Mike Kershaw <dragorn@kismetwireless.net>
http://www.kismetwireless.net
Licensed under the GPL

1.  What is Kismet
2.  Feature Overview
3.  Typical Uses
4.  Required Libraries/Utilities
5.  Suidroot & Security
6.  Upgrading From Previous Versions
7.  Operating Systems
8.  Capture Sources
9.  Compiling
10. Configuration
11. Troubleshooting
12. Panels Interface
13. Network Mapping
14. Drone Remotes
15. Intrusion Detection

1.  What is Kismet

    Kismet is an 802.11 layer2 wireless network detector, sniffer, and
    intrusion detection system.  Kismet will work with any wireless card which
    support raw monitoring (rfmon) mode, and can sniff 802.11b, 802.11a, and
    802.11g traffic.  Kismet is fully passive and undetectable when in
    operation. Kismet automatically tracks all networks in range and is able to
    detect (or infer) hidden networks, attack attempts, find rogue access
    points, and find unauthorised users.

2.  Feature Overview

    Kismet has many features useful in different situations for monitoring
    wireless networks:

    - Ethereal/Tcpdump compatable data logging
    - Airsnort compatible weak-iv packet logging
    - Network IP range detection
    - Built-in channel hopping and multicard split channel hopping
    - Hidden network SSID decloaking
    - Graphical mapping of networks
    - Client/Server architecture allows multiple clients to view a single
      Kismet server simultaneously
    - Manufacturer and model identification of access points and clients
    - Detection of known default access point configurations
    - Runtime decoding of WEP packets for known networks
    - Named pipe output for integration with other tools, such as a layer3 IDS
      like Snort
    - Multiplexing of multiple simultaneous capture sources on a single Kismet
      instance
    - Distributed remote drone sniffing
    - XML output
    - Over 20 supported card types

3.  Typical Uses

    Common applications Kismet is useful for:

    - Wardriving:  Mobile detection of wireless networks, logging and mapping
      of network location, WEP, etc.
    - Site survey:  Monitoring and graphing signal strength and location.
    - Distributed IDS:  Multiple Remote Drone sniffers distributed throughout
      an installation monitored by a single server, possibly combined with a
      layer3 IDS like Snort.
    - Rogue AP Detection:  Stationary or mobile sniffers to enforce site policy
      against rogue access points.

4.  Required Libraries

    Kismet is primary self-contained, however for some features it requires
    some external libraries or utilities.

    - GPSD (any version): http://russnelson.com/gpsd/ 
      REQUIRED for GPS support
   
      GPSD is a daemon which listens on a serial port for GPS data, parses it,
      and makes it available via a TCP socket.  Kismet can use a GPSD on the
      local system, or if there is a wired ethernet connection available it can
      use a gps on a remote host.  

      The latest versions of GPSD fix compile issues which occured on some
      systems and it's highly reccomended you get the latest.

      GPSDrive distributes an alternate version of GPSD, which should work with
      Kismet.

    - Imagemagick (5.4.7+): http://www.imagemagick.org/
      REQUIRED for gpsmap map generation

      Imagemagick is a graphics generation library which can read and write in
      almost any format.  Kismet requires a recent version of Imagemagick due
      to IMs frequently changing API.  If you do not plan to use gpsmap, you
      can skip this library.

    - Expat (??): ??
      REQUIRED for gpsmap map generation

      Expat is an XML processing library.  Kismet requires this for parsing
      netxml and gpsxml output logs.  If you do not plan to use gpsmap, you can
      skip this library.

      Some versions of Expat included in distributions or other system
      utilities (ie, XFree86-cvs) contain errors that make it impossible to
      compile expat.h.  Make sure you have the latest stable Expat version, and
      remove offending duplicate headers if necessary.

    - Ethereal (any): http://www.ethereal.com
      RQUIRED for wtapfile capture replay

      Ethereal is the premier packet dissector.  The packet dump logs Kismet
      creates can be opened in Ethereal for further examination.  Kismet uses
      libwiretap from Ethereal for saving packet dump files and replaying
      stored dumps, however Kismet has a builtin dump writer and can replay
      pcap files using libpcap.  

      Kismet requires a compiled copy of the Ethereal source available to link
      the libwiretap library.  By default the configure script will look in
      /usr/src/ for this.

      If you do not need to replay compressed dumps, you don't need a compiled
      copy of Ethereal.

5.  Suidroot & Security

    In order to configure the wireless card for rfmon and start the packet
    capture, Kismet needs root access.  As soon as root access is no longer
    required, Kismet drops to a designated user so that potentially hostile
    remote data isn't processed as root.

    If channel hopping is enabled, Kismet forks and retains one process as
    root for changing the channel of the capture sources.

    For Kismet to have root access, it can be installed two different ways:
    - Normal installation via 'make install' requires Kismet be started as
      root.  
    - Suid-root installation via 'make suidinstall'.  DO NOT INSTALL KISMET
      SUID-ROOT IF YOU HAVE OTHER USERS ON YOUR SYSTEM.  Suid-root installation
      will allow unprivileged users to set the wireless card to rfmon (breaking
      any connections using wireless) and capture data.
   
6.  Upgrading from Previous Versions

    Upgrading to Kismet 3.1+:
      Kismet 3.1 has significantly changed how Kismet operates again.  There
      have been config file changes, changes to the names of capture types,
      and various other mayhem.  Be sure to upgrade your config file or things
      will definitely not work how you expect them to.

7.  Operating Systems

    Kismet will work (at some level) on any operating system which has Posix
    compatibility, however for it to do native packet capturing it needs
    drivers which are capable of reporting packets in rfmon.  Remote sources
    such as WSP100 or Drones can be used on any platform you can get Kismet to
    compile on.

    - Linux (Intel, PPC, MIPS, X-Scale, Arm, etc)
      Known supported cards: ACX100, Atheros, Cisco, Prism2, Orinoco, WSP100,
      Drone, wtapfile, pcapfile, wrt54g

      Kismet will work with any distribution of Linux.  Currently, Linux is the
      reccomended platform for running Kismet because it has the largest
      selection of rfmon capable drivers.

    - OpenBSD
      Known supported cards: Prism2, WSP100, Drone, wtapfile, pcapfile
    
      Thanks to the efforts of Pedro la Peu, OpenBSD is the best supported of
      the BSD variants.  The Prism2 drivers as of OpenBSD
      3.2 support a standard rfmon, performance with other drivers may be
      varied.

    - FreeBSD
      Known supported cards: WSP100, Drone, wtapfile, pcapfile
      
      FreeBSD seems to have broken wireless drivers for most cards which claim
      to have rfmon support but return scrambled data.  

      FreeBSD-current is beginning to unify the driver interface and monitor
      mode, so hopefully it can become better supported in the future.

    - NetBSD
      Known supported cards: WSP100, Drone, wtapfile, pcapfile
    
      There have been no reports positive or negative about NetBSD drivers.
      Please email if you have them working.

    - MacOSX
      Known supported cards: Airport, WSP100, Drone, wtapfile, pcapfile

      MacOSX is supported for Airport (classic) cards only, using the Viha
      drivers at http://www.dopesquad.net/security/.  There are no rfmon
      drivers available for Airport Extreme cards currently.

      Other third-party drivers may support rfmon for other pcmcia and usb
      cards under OSX - let me know if your drivers support rfmon, and I'll
      add support in Kismet.

    - Win32 (Cygwin)
      Known supported cards: WSP100, Drone, wtapfile, pcapfile

      Win32 ONLY works with remote captures.  There are no public rfmon drivers
      for win32, and no reports of any in development.  Kismet on Win32
      requires cygwin for the Posix layer.

      Don't use win32 if you want to capture data natively.

8.  Capture Sources
    
    A capture source in Kismet is anything which provides packets to the Kismet
    engine.  Capture sources define the underlying engine needed to capture
    data from the interface, how to change channel, and how to enter rfmon
    mode.

    Source type     Cards               OS          Driver
    --------------- ------------------- ----------- -------------------------
    acx100          TI ACX100           Linux       ACX100
                    http://acx100.sourceforge.net/
                    Capture interface:  'ethX'
                    ACX100 drivers handle the 22mbit cards branded by DLink
                    and others.

    cisco           Aironet 340,350     Linux       Kernel 2.4.10 - 2.4.19
                    Capture interface:  'ethX'  
                    Standard Cisco cards in Linux.  Works only with
                    the Linux kernel drivers, not the drivers found on
                    cisco.com or pcmcia-cs.

    cisco_wifix     Aironet 340,350     Linux       Kernel 2.4.20+, CVS  
                    http://sourceforge.net/projects/airo-linux/  
                    Capture interface:  'ethX:wifiX'
                    Kernel 2.4.20+ and CVS drivers use ethX for normal mode
                    and wifiX for monitor mode.  Kismet needs to know both
                    devices, which may not necessarily be the same number,
                    for example 'eth1:wifi0'.
                    Linux kernel 2.4.20 and 2.4.21 have highly unstable cisco
                    drivers and should be avoided.

    cisco_openbsd   Aironet 340,350     OpenBSD     Kernel
                    Capture interface:  'anX'  
                    OpenBSD cisco drivers are not fully supported currently,
                    but may become so.  Packet capture probably will not
                    work correctly.

    hostap          Prism/2             Linux       HostAP 0.4
                    http://hostap.epitest.fi/
                    Capture interface:  'wlanX'  
                    HostAP drivers drive the Prism/2 chipset in access point
                    mode, but also can drive the cards in client and monitor
                    modes.  The HostAP drivers seem to change how they go
                    into monitor mode fairly often, but this source should 
                    manage to get them going.

    kismet_drone    n/a                 Any         n/a
                    Capture interface:  'dronehost:port'  
                    The remote drone capture source connects to a Kismet
                    drone and proceses the packets.  Refer to the Remote 
                    Drone section of the README for more details about how
                    to set up a drone.

    madwifi_a       Atheros             Linux       madwifi-cvs
                    http://sourceforge.net/projects/madwifi/
                    Capture interface:  'athX'
                    Madwifi drivers in 802.11a-only mode. 

    madwifi_b       Atheros             Linux       madwifi-cvs
                    http://sourceforge.net/projects/madwifi/
                    Capture interface:  'athX'
                    Madwifi drivers in 802.11b-only mode. 

    madwifi_g       Atheros             Linux       madwifi-cvs
                    http://sourceforge.net/projects/madwifi/
                    Capture interface:  'athX'
                    Madwifi drivers in 802.11g-only mode.  This will, 
                    obviously, also see 11b networks.

    madwifi_ab      Atheros             Linux       madwifi-cvs
                    http://sourceforge.net/projects/madwifi/
                    Capture interface:  'athX'
                    Madwifi drivers in 802.11a and 802.11b combo mode.  This
                    will seamlessly switch between bands during channel 
                    hopping.

    madwifi_ag      Atheros             Linux       madwifi-cvs
                    http://sourceforge.net/projects/madwifi/
                    Capture interface:  'athX'
                    Madwifi drivers in 802.11a and 802.11g combo mode.  This
                    will seamlessly switch between bands during channel 
                    hopping.

    orinoco         Lucent, Orinoco     Linux       Patched orinoco_cs
                    http://airsnort.shmoo.com/orinocoinfo.html
                    Capture interface:  'ethX'
                    The standard orinoco_cs drivers do not support monitor mode
                    but they work well after being patched with the above.

    pcapfile        n/a                 Any         n/a
                    Capture interface:  '/path/to/file' 
                    The pcapfile capture source feeds a stored 802.11-encap
                    dump file through the Kismet engine again.  This can be
                    useful for debugging or rescanning old logs for 
                    alert conditions.  Pcapfile sources are only available
                    if Kismet was compiled with libpcap support.

    prism_openbsd   Prism/2             OpenBSD     Kernel
                    Capture interface:  'wiX'
                    Full support for Prism2 under OpenBSD

    prism54g        PrismGT             Linux       prism54
                    http://www.prism54.org
                    Capture interface:  'ethX'
                    PrismGT 802.11g drivers supporting monitor mode.

    viha            Airport             OSX         viha
                    http://www.dopesquad.net/security/
                    Capture interface:  'enX'
                    Monitor mode support for Airport under OSX.  Does not
                    support Airport Extreme.

    vtar5k          Atheros 802.11a     Linux       vtar5k
                    http://team.vantronix.net/ar5k/
                    vtar5k drivers handle some Atheros 802.11a cards.  Chances
                    are you'll have better luck with madwifi drivers.

    wlanng_legacy   Prism/2             Linux       wlan-ng 0.1.3 and earlier
                    http://www.linux-wlan.com/
                    Capture interface:  'wlanX'
                    Old wlan-ng drivers didn't support pcap capturing and
                    use a netlink socket to the kernel.  These are still in
                    use on some embedded systems (like the Zaurus).

    wlanng          Prism/2             Linux       wlan-ng 0.1.4 - 0.1.9
                    http://www.linux-wlan.com/
                    Capture interface:  'wlanX'  
                    Wlan-ng prism2 drivers prior to the AVS headers.

    wlanng_avs      Prism/2             Linux       wlan-ng 0.2.0+
                    http://www.linux-wlan.com/
                    Capture interface:  'wlanX'
                    Newer wlan-ng drivers support a new header type and 
                    slightly different monitor commands to report wepped
                    packets.

    wrt54g          Linksys WRT54G      Linux       linksys
                    http://seattlewireless.net/index.cgi/LinksysWrt54g  
                    Capture interface:  'ethX'
                    Support for the drivers found in the embedded Linux 
                    inside the Linksys WRT54G (and probably other APs using
                    the same firmware).

    wsp100          NetChem WSP100      Any         n/a
                    http://networkchemistry.com/
                    Capture interface:  'host:port'
                    The WSP100 is an embedded device which reports 802.11
                    packets over UDP.

    wtapfile        n/a                 Any         n/a
                    Capture interface:  '/path/to/file'  
                    Wtapfile sources are the same as pcapfile sources but
                    they use the Ethereal libwiretap loader.  libwiretap can
                    automatically decompress gzipped files, etc.  Wtapfile
                    sources are only available if Kismet was compiled with
                    libwiretap support.
9.  Compiling
    
    Compiling should be fairly straightforward.  It uses the normal configure
    scripts found in most open source projects, and should build with any
    modern version of gcc.

    1.  Download any libraries and external utilities needed
    2.  Run './configure' with any special options you want (see
        './configure --help')
    3.  Run 'make' or 'gmake'
    4.  Run 'make install' or 'make suidinstall' - SEE THE SECURITY SECTION
        OF THE README BEFORE INSTALLING KISMET SUIDROOT!

    Crosscompiling Kismet can sometimes have problems with the libpcap 
    autoconf scripts not being able to detect the kernel type and version
    of the target system.  Overriding the configuration script variables
    and passing extra configuration options can fix this:

    'ac_cv_linux_vers=foo ./configure --with-pcap=linux ...'

10. Configuration

    Kismet is controlled by 2 primary configuration files:
    kismet.conf controls the server backend, and kismet_ui.conf controls the
    panels user interface.  By default, these files are in /usr/local/etc/.
    Remote drone servers use a third file, kismet_drone.conf.

    Kismet configuration files are a simple 'variable=value' format.

    Key kismet.conf configuration variables:

        Conf Variable    Usage
        ---------------  ------------------------------------------------------
        version          Version of Kismet config.  Users shouldn't need to 
                         change this.       
        servername       Name of Kismet server, for use in setting up multiple 
                         servers.
        source           Defines a Kismet source.  Each source provides packets
                         to Kismet.  Format is 'sourcetype,interface,name'.
                         Multiple sources can be defined with multiple 'source'
                         lines.
        suiduser         User Kismet drops to after binding to root sources.
        channelhop       Controls if Kismet hops channels or stays on the
                         initial channel.  (True or False)  
        channelvelocity  Number of hops per second  
        splitchannels    Divide position in the channel sequence between 
                         sources.  

11. Troubleshooting
    
    Some common problems with Kismet have easy solutions:

    PROBLEM: Fatal errors about old configuration file values
      Kismet has evolved over time.  This has made changes to the config files
      necessary, and obsoleted old options.  Kismet will automatically detect 
      old config files and alert on them.
    FIX: Upgrade your config files.  'make forceinstall' or 'forcesuidinstall'
      will replace old files, or you can copy the config file from the conf/
      directory manually and update it for your configuration.

    PROBLEM: Fatal error about being unable to find the suiduser
      Kismet drops the privileges of the main packet processor to a specified
      user for security - handling hostile remote data as root is just a bad
      idea.  If a nonexistent user is specified, Kismet will bail.
    FIX: Set a valid user as the suiduser config variable.  If you're sure you
      don't want privilege dropping, you can run configure with the 
      '--disable-setuid' option, but this is NOT reccomended for most users.

    PROBLEM: Fatal error about specifying a uid-0 target for suiduser
      Kismet needs to drop out of root for security purposes.  If you tell it
      that the user to switch to is 'root' (or another uid-0 user, if you
      happened to make one), it can't do this.
    FIX:  See fix above for errors about finding the suiduser.

    PROBLEM: Fatal error enabling monitor mode, 'monitor' ioctl not available
      Some capture sources use a private ioctl, 'monitor', to enable rfmon.
      If Kismet is unable to find this ioctl, it means that the wrong 
      interface was specified, the wrong capture type is being used, or 
      most commonly, the drivers you are using have not been patched or the
      patched drivers are not being loaded.
      Be sure to download any patches needed for the drivers you are using, 
      and make sure that no other copies of those drivers exist in your
      /lib/modules/kern-version/ directory.  You may need to restart pcmcia-cs
      if your wireless card was already running when you installed the patched
      drivers.
    FIX: Provide the correct interface and ensure that the patched drivers are
      loaded.

    PROBLEM: Fatal error about a Cisco card not reporting the correct 
      link type in Linux
    FIX: Use the correct Cisco card drivers.  The ones from cisco.com and
      the ones in pcmcia-cs don't support rfmon, but act as if they do.

    PROBLEM: Fatal error about being unable to open a file for writing
      The most common cause of this problem is that the suiduser you specified
      for Kismet to drop to does not have rights to write to the directory 
      Kismet is trying to log to.
      If you did not modify the 'logtemplate' configuration file variable, 
      Kismet defaults to the current directory for saving logs.  You can set
      an explicit path in the logtemplate variable to put your logs in the same
      place every time.
    FIX: Start Kismet from a directory that the suiduser can write to, or set
      the logtemplate variable to always put the logs in a directory the 
      suiduser can write to.

