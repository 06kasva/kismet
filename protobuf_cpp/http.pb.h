// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#ifndef PROTOBUF_http_2eproto__INCLUDED
#define PROTOBUF_http_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KismetExternalHttp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_http_2eproto();
void protobuf_AssignDesc_http_2eproto();
void protobuf_ShutdownFile_http_2eproto();

class HttpAuthToken;
class HttpRegisterUri;
class SubHttpPostData;
class HttpRequest;
class SubHttpHeader;
class HttpResponse;

// ===================================================================

class HttpAuthToken : public ::google::protobuf::Message {
 public:
  HttpAuthToken();
  virtual ~HttpAuthToken();

  HttpAuthToken(const HttpAuthToken& from);

  inline HttpAuthToken& operator=(const HttpAuthToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpAuthToken& default_instance();

  void Swap(HttpAuthToken* other);

  // implements Message ----------------------------------------------

  HttpAuthToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpAuthToken& from);
  void MergeFrom(const HttpAuthToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:KismetExternalHttp.HttpAuthToken)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static HttpAuthToken* default_instance_;
};
// -------------------------------------------------------------------

class HttpRegisterUri : public ::google::protobuf::Message {
 public:
  HttpRegisterUri();
  virtual ~HttpRegisterUri();

  HttpRegisterUri(const HttpRegisterUri& from);

  inline HttpRegisterUri& operator=(const HttpRegisterUri& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpRegisterUri& default_instance();

  void Swap(HttpRegisterUri* other);

  // implements Message ----------------------------------------------

  HttpRegisterUri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpRegisterUri& from);
  void MergeFrom(const HttpRegisterUri& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // required string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // required bool auth_required = 3;
  inline bool has_auth_required() const;
  inline void clear_auth_required();
  static const int kAuthRequiredFieldNumber = 3;
  inline bool auth_required() const;
  inline void set_auth_required(bool value);

  // @@protoc_insertion_point(class_scope:KismetExternalHttp.HttpRegisterUri)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_auth_required();
  inline void clear_has_auth_required();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* method_;
  bool auth_required_;
  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static HttpRegisterUri* default_instance_;
};
// -------------------------------------------------------------------

class SubHttpPostData : public ::google::protobuf::Message {
 public:
  SubHttpPostData();
  virtual ~SubHttpPostData();

  SubHttpPostData(const SubHttpPostData& from);

  inline SubHttpPostData& operator=(const SubHttpPostData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubHttpPostData& default_instance();

  void Swap(SubHttpPostData* other);

  // implements Message ----------------------------------------------

  SubHttpPostData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubHttpPostData& from);
  void MergeFrom(const SubHttpPostData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string field = 1;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::std::string& field() const;
  inline void set_field(const ::std::string& value);
  inline void set_field(const char* value);
  inline void set_field(const char* value, size_t size);
  inline ::std::string* mutable_field();
  inline ::std::string* release_field();
  inline void set_allocated_field(::std::string* field);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:KismetExternalHttp.SubHttpPostData)
 private:
  inline void set_has_field();
  inline void clear_has_field();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* field_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static SubHttpPostData* default_instance_;
};
// -------------------------------------------------------------------

class HttpRequest : public ::google::protobuf::Message {
 public:
  HttpRequest();
  virtual ~HttpRequest();

  HttpRequest(const HttpRequest& from);

  inline HttpRequest& operator=(const HttpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpRequest& default_instance();

  void Swap(HttpRequest* other);

  // implements Message ----------------------------------------------

  HttpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpRequest& from);
  void MergeFrom(const HttpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required string uri = 2;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 2;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // required string method = 3;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // repeated .KismetExternalHttp.SubHttpPostData post_data = 4;
  inline int post_data_size() const;
  inline void clear_post_data();
  static const int kPostDataFieldNumber = 4;
  inline const ::KismetExternalHttp::SubHttpPostData& post_data(int index) const;
  inline ::KismetExternalHttp::SubHttpPostData* mutable_post_data(int index);
  inline ::KismetExternalHttp::SubHttpPostData* add_post_data();
  inline const ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpPostData >&
      post_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpPostData >*
      mutable_post_data();

  // @@protoc_insertion_point(class_scope:KismetExternalHttp.HttpRequest)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_method();
  inline void clear_has_method();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* method_;
  ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpPostData > post_data_;
  ::google::protobuf::uint32 req_id_;
  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static HttpRequest* default_instance_;
};
// -------------------------------------------------------------------

class SubHttpHeader : public ::google::protobuf::Message {
 public:
  SubHttpHeader();
  virtual ~SubHttpHeader();

  SubHttpHeader(const SubHttpHeader& from);

  inline SubHttpHeader& operator=(const SubHttpHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubHttpHeader& default_instance();

  void Swap(SubHttpHeader* other);

  // implements Message ----------------------------------------------

  SubHttpHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubHttpHeader& from);
  void MergeFrom(const SubHttpHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const char* value, size_t size);
  inline ::std::string* mutable_header();
  inline ::std::string* release_header();
  inline void set_allocated_header(::std::string* header);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:KismetExternalHttp.SubHttpHeader)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* header_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static SubHttpHeader* default_instance_;
};
// -------------------------------------------------------------------

class HttpResponse : public ::google::protobuf::Message {
 public:
  HttpResponse();
  virtual ~HttpResponse();

  HttpResponse(const HttpResponse& from);

  inline HttpResponse& operator=(const HttpResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpResponse& default_instance();

  void Swap(HttpResponse* other);

  // implements Message ----------------------------------------------

  HttpResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpResponse& from);
  void MergeFrom(const HttpResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // repeated .KismetExternalHttp.SubHttpHeader header_content = 2;
  inline int header_content_size() const;
  inline void clear_header_content();
  static const int kHeaderContentFieldNumber = 2;
  inline const ::KismetExternalHttp::SubHttpHeader& header_content(int index) const;
  inline ::KismetExternalHttp::SubHttpHeader* mutable_header_content(int index);
  inline ::KismetExternalHttp::SubHttpHeader* add_header_content();
  inline const ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpHeader >&
      header_content() const;
  inline ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpHeader >*
      mutable_header_content();

  // optional bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 resultcode = 4;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultcodeFieldNumber = 4;
  inline ::google::protobuf::uint32 resultcode() const;
  inline void set_resultcode(::google::protobuf::uint32 value);

  // optional bool close_response = 5;
  inline bool has_close_response() const;
  inline void clear_close_response();
  static const int kCloseResponseFieldNumber = 5;
  inline bool close_response() const;
  inline void set_close_response(bool value);

  // @@protoc_insertion_point(class_scope:KismetExternalHttp.HttpResponse)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_close_response();
  inline void clear_has_close_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpHeader > header_content_;
  ::google::protobuf::uint32 req_id_;
  ::google::protobuf::uint32 resultcode_;
  ::std::string* content_;
  bool close_response_;
  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static HttpResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// HttpAuthToken

// required string token = 1;
inline bool HttpAuthToken::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpAuthToken::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpAuthToken::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpAuthToken::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& HttpAuthToken::token() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpAuthToken.token)
  return *token_;
}
inline void HttpAuthToken::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpAuthToken.token)
}
inline void HttpAuthToken::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.HttpAuthToken.token)
}
inline void HttpAuthToken::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.HttpAuthToken.token)
}
inline ::std::string* HttpAuthToken::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpAuthToken.token)
  return token_;
}
inline ::std::string* HttpAuthToken::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpAuthToken::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.HttpAuthToken.token)
}

// -------------------------------------------------------------------

// HttpRegisterUri

// required string uri = 1;
inline bool HttpRegisterUri::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpRegisterUri::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpRegisterUri::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpRegisterUri::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& HttpRegisterUri::uri() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRegisterUri.uri)
  return *uri_;
}
inline void HttpRegisterUri::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpRegisterUri.uri)
}
inline void HttpRegisterUri::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.HttpRegisterUri.uri)
}
inline void HttpRegisterUri::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.HttpRegisterUri.uri)
}
inline ::std::string* HttpRegisterUri::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpRegisterUri.uri)
  return uri_;
}
inline ::std::string* HttpRegisterUri::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpRegisterUri::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.HttpRegisterUri.uri)
}

// required string method = 2;
inline bool HttpRegisterUri::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpRegisterUri::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpRegisterUri::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpRegisterUri::clear_method() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& HttpRegisterUri::method() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRegisterUri.method)
  return *method_;
}
inline void HttpRegisterUri::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpRegisterUri.method)
}
inline void HttpRegisterUri::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.HttpRegisterUri.method)
}
inline void HttpRegisterUri::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.HttpRegisterUri.method)
}
inline ::std::string* HttpRegisterUri::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpRegisterUri.method)
  return method_;
}
inline ::std::string* HttpRegisterUri::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpRegisterUri::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.HttpRegisterUri.method)
}

// required bool auth_required = 3;
inline bool HttpRegisterUri::has_auth_required() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpRegisterUri::set_has_auth_required() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpRegisterUri::clear_has_auth_required() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpRegisterUri::clear_auth_required() {
  auth_required_ = false;
  clear_has_auth_required();
}
inline bool HttpRegisterUri::auth_required() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRegisterUri.auth_required)
  return auth_required_;
}
inline void HttpRegisterUri::set_auth_required(bool value) {
  set_has_auth_required();
  auth_required_ = value;
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpRegisterUri.auth_required)
}

// -------------------------------------------------------------------

// SubHttpPostData

// required string field = 1;
inline bool SubHttpPostData::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubHttpPostData::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubHttpPostData::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubHttpPostData::clear_field() {
  if (field_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_->clear();
  }
  clear_has_field();
}
inline const ::std::string& SubHttpPostData::field() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.SubHttpPostData.field)
  return *field_;
}
inline void SubHttpPostData::set_field(const ::std::string& value) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  field_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.SubHttpPostData.field)
}
inline void SubHttpPostData::set_field(const char* value) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  field_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.SubHttpPostData.field)
}
inline void SubHttpPostData::set_field(const char* value, size_t size) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  field_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.SubHttpPostData.field)
}
inline ::std::string* SubHttpPostData::mutable_field() {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.SubHttpPostData.field)
  return field_;
}
inline ::std::string* SubHttpPostData::release_field() {
  clear_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = field_;
    field_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubHttpPostData::set_allocated_field(::std::string* field) {
  if (field_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_;
  }
  if (field) {
    set_has_field();
    field_ = field;
  } else {
    clear_has_field();
    field_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.SubHttpPostData.field)
}

// required string content = 2;
inline bool SubHttpPostData::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubHttpPostData::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubHttpPostData::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubHttpPostData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SubHttpPostData::content() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.SubHttpPostData.content)
  return *content_;
}
inline void SubHttpPostData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.SubHttpPostData.content)
}
inline void SubHttpPostData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.SubHttpPostData.content)
}
inline void SubHttpPostData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.SubHttpPostData.content)
}
inline ::std::string* SubHttpPostData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.SubHttpPostData.content)
  return content_;
}
inline ::std::string* SubHttpPostData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubHttpPostData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.SubHttpPostData.content)
}

// -------------------------------------------------------------------

// HttpRequest

// required uint32 req_id = 1;
inline bool HttpRequest::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpRequest::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpRequest::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpRequest::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 HttpRequest::req_id() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRequest.req_id)
  return req_id_;
}
inline void HttpRequest::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpRequest.req_id)
}

// required string uri = 2;
inline bool HttpRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpRequest::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& HttpRequest::uri() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRequest.uri)
  return *uri_;
}
inline void HttpRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.HttpRequest.uri)
}
inline ::std::string* HttpRequest::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpRequest.uri)
  return uri_;
}
inline ::std::string* HttpRequest::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpRequest::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.HttpRequest.uri)
}

// required string method = 3;
inline bool HttpRequest::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpRequest::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpRequest::clear_method() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& HttpRequest::method() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRequest.method)
  return *method_;
}
inline void HttpRequest::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpRequest.method)
}
inline void HttpRequest::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.HttpRequest.method)
}
inline void HttpRequest::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.HttpRequest.method)
}
inline ::std::string* HttpRequest::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpRequest.method)
  return method_;
}
inline ::std::string* HttpRequest::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpRequest::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.HttpRequest.method)
}

// repeated .KismetExternalHttp.SubHttpPostData post_data = 4;
inline int HttpRequest::post_data_size() const {
  return post_data_.size();
}
inline void HttpRequest::clear_post_data() {
  post_data_.Clear();
}
inline const ::KismetExternalHttp::SubHttpPostData& HttpRequest::post_data(int index) const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpRequest.post_data)
  return post_data_.Get(index);
}
inline ::KismetExternalHttp::SubHttpPostData* HttpRequest::mutable_post_data(int index) {
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpRequest.post_data)
  return post_data_.Mutable(index);
}
inline ::KismetExternalHttp::SubHttpPostData* HttpRequest::add_post_data() {
  // @@protoc_insertion_point(field_add:KismetExternalHttp.HttpRequest.post_data)
  return post_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpPostData >&
HttpRequest::post_data() const {
  // @@protoc_insertion_point(field_list:KismetExternalHttp.HttpRequest.post_data)
  return post_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpPostData >*
HttpRequest::mutable_post_data() {
  // @@protoc_insertion_point(field_mutable_list:KismetExternalHttp.HttpRequest.post_data)
  return &post_data_;
}

// -------------------------------------------------------------------

// SubHttpHeader

// required string header = 1;
inline bool SubHttpHeader::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubHttpHeader::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubHttpHeader::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubHttpHeader::clear_header() {
  if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_->clear();
  }
  clear_has_header();
}
inline const ::std::string& SubHttpHeader::header() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.SubHttpHeader.header)
  return *header_;
}
inline void SubHttpHeader::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  header_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.SubHttpHeader.header)
}
inline void SubHttpHeader::set_header(const char* value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  header_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.SubHttpHeader.header)
}
inline void SubHttpHeader::set_header(const char* value, size_t size) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.SubHttpHeader.header)
}
inline ::std::string* SubHttpHeader::mutable_header() {
  set_has_header();
  if (header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.SubHttpHeader.header)
  return header_;
}
inline ::std::string* SubHttpHeader::release_header() {
  clear_has_header();
  if (header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubHttpHeader::set_allocated_header(::std::string* header) {
  if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete header_;
  }
  if (header) {
    set_has_header();
    header_ = header;
  } else {
    clear_has_header();
    header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.SubHttpHeader.header)
}

// required string content = 2;
inline bool SubHttpHeader::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubHttpHeader::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubHttpHeader::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubHttpHeader::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SubHttpHeader::content() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.SubHttpHeader.content)
  return *content_;
}
inline void SubHttpHeader::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.SubHttpHeader.content)
}
inline void SubHttpHeader::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.SubHttpHeader.content)
}
inline void SubHttpHeader::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.SubHttpHeader.content)
}
inline ::std::string* SubHttpHeader::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.SubHttpHeader.content)
  return content_;
}
inline ::std::string* SubHttpHeader::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubHttpHeader::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.SubHttpHeader.content)
}

// -------------------------------------------------------------------

// HttpResponse

// required uint32 req_id = 1;
inline bool HttpResponse::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpResponse::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpResponse::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpResponse::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 HttpResponse::req_id() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpResponse.req_id)
  return req_id_;
}
inline void HttpResponse::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpResponse.req_id)
}

// repeated .KismetExternalHttp.SubHttpHeader header_content = 2;
inline int HttpResponse::header_content_size() const {
  return header_content_.size();
}
inline void HttpResponse::clear_header_content() {
  header_content_.Clear();
}
inline const ::KismetExternalHttp::SubHttpHeader& HttpResponse::header_content(int index) const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpResponse.header_content)
  return header_content_.Get(index);
}
inline ::KismetExternalHttp::SubHttpHeader* HttpResponse::mutable_header_content(int index) {
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpResponse.header_content)
  return header_content_.Mutable(index);
}
inline ::KismetExternalHttp::SubHttpHeader* HttpResponse::add_header_content() {
  // @@protoc_insertion_point(field_add:KismetExternalHttp.HttpResponse.header_content)
  return header_content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpHeader >&
HttpResponse::header_content() const {
  // @@protoc_insertion_point(field_list:KismetExternalHttp.HttpResponse.header_content)
  return header_content_;
}
inline ::google::protobuf::RepeatedPtrField< ::KismetExternalHttp::SubHttpHeader >*
HttpResponse::mutable_header_content() {
  // @@protoc_insertion_point(field_mutable_list:KismetExternalHttp.HttpResponse.header_content)
  return &header_content_;
}

// optional bytes content = 3;
inline bool HttpResponse::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpResponse::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpResponse::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpResponse::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& HttpResponse::content() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpResponse.content)
  return *content_;
}
inline void HttpResponse::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpResponse.content)
}
inline void HttpResponse::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetExternalHttp.HttpResponse.content)
}
inline void HttpResponse::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetExternalHttp.HttpResponse.content)
}
inline ::std::string* HttpResponse::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KismetExternalHttp.HttpResponse.content)
  return content_;
}
inline ::std::string* HttpResponse::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpResponse::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KismetExternalHttp.HttpResponse.content)
}

// optional uint32 resultcode = 4;
inline bool HttpResponse::has_resultcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpResponse::set_has_resultcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpResponse::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpResponse::clear_resultcode() {
  resultcode_ = 0u;
  clear_has_resultcode();
}
inline ::google::protobuf::uint32 HttpResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpResponse.resultcode)
  return resultcode_;
}
inline void HttpResponse::set_resultcode(::google::protobuf::uint32 value) {
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpResponse.resultcode)
}

// optional bool close_response = 5;
inline bool HttpResponse::has_close_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpResponse::set_has_close_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpResponse::clear_has_close_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpResponse::clear_close_response() {
  close_response_ = false;
  clear_has_close_response();
}
inline bool HttpResponse::close_response() const {
  // @@protoc_insertion_point(field_get:KismetExternalHttp.HttpResponse.close_response)
  return close_response_;
}
inline void HttpResponse::set_close_response(bool value) {
  set_has_close_response();
  close_response_ = value;
  // @@protoc_insertion_point(field_set:KismetExternalHttp.HttpResponse.close_response)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KismetExternalHttp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_http_2eproto__INCLUDED
