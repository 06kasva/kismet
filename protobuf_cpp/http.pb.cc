// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KismetHttp {

namespace {

const ::google::protobuf::Descriptor* HttpRegisterUri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRegisterUri_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpRequest_PostDataEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpResponse_HeaderContentEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_http_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_http_2eproto() {
  protobuf_AddDesc_http_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "http.proto");
  GOOGLE_CHECK(file != NULL);
  HttpRegisterUri_descriptor_ = file->message_type(0);
  static const int HttpRegisterUri_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, method_),
  };
  HttpRegisterUri_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpRegisterUri_descriptor_,
      HttpRegisterUri::default_instance_,
      HttpRegisterUri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, _has_bits_[0]),
      -1,
      -1,
      sizeof(HttpRegisterUri),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, _internal_metadata_),
      -1);
  HttpRequest_descriptor_ = file->message_type(1);
  static const int HttpRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, post_data_),
  };
  HttpRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpRequest_descriptor_,
      HttpRequest::default_instance_,
      HttpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(HttpRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _internal_metadata_),
      -1);
  HttpRequest_PostDataEntry_descriptor_ = HttpRequest_descriptor_->nested_type(0);
  HttpResponse_descriptor_ = file->message_type(2);
  static const int HttpResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, header_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, close_response_),
  };
  HttpResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpResponse_descriptor_,
      HttpResponse::default_instance_,
      HttpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(HttpResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _internal_metadata_),
      -1);
  HttpResponse_HeaderContentEntry_descriptor_ = HttpResponse_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_http_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpRegisterUri_descriptor_, &HttpRegisterUri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpRequest_descriptor_, &HttpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HttpRequest_PostDataEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                HttpRequest_PostDataEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpResponse_descriptor_, &HttpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HttpResponse_HeaderContentEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                HttpResponse_HeaderContentEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_http_2eproto() {
  delete HttpRegisterUri::default_instance_;
  delete HttpRegisterUri_reflection_;
  delete HttpRequest::default_instance_;
  delete HttpRequest_reflection_;
  delete HttpResponse::default_instance_;
  delete HttpResponse_reflection_;
}

void protobuf_AddDesc_http_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_http_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhttp.proto\022\nKismetHttp\".\n\017HttpRegister"
    "Uri\022\013\n\003uri\030\001 \002(\t\022\016\n\006method\030\002 \002(\t\"\245\001\n\013Htt"
    "pRequest\022\016\n\006req_id\030\001 \002(\r\022\013\n\003uri\030\002 \002(\t\022\016\n"
    "\006method\030\003 \002(\t\0228\n\tpost_data\030\004 \003(\0132%.Kisme"
    "tHttp.HttpRequest.PostDataEntry\032/\n\rPostD"
    "ataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
    "\"\326\001\n\014HttpResponse\022\016\n\006req_id\030\001 \002(\r\022C\n\016hea"
    "der_content\030\002 \003(\0132+.KismetHttp.HttpRespo"
    "nse.HeaderContentEntry\022\017\n\007content\030\003 \001(\014\022"
    "\022\n\nresultcode\030\004 \001(\r\022\026\n\016close_response\030\005 "
    "\001(\010\0324\n\022HeaderContentEntry\022\013\n\003key\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\t:\0028\001", 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http.proto", &protobuf_RegisterTypes);
  HttpRegisterUri::default_instance_ = new HttpRegisterUri();
  HttpRequest::default_instance_ = new HttpRequest();
  HttpResponse::default_instance_ = new HttpResponse();
  HttpRegisterUri::default_instance_->InitAsDefaultInstance();
  HttpRequest::default_instance_->InitAsDefaultInstance();
  HttpResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_http_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_http_2eproto {
  StaticDescriptorInitializer_http_2eproto() {
    protobuf_AddDesc_http_2eproto();
  }
} static_descriptor_initializer_http_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpRegisterUri::kUriFieldNumber;
const int HttpRegisterUri::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRegisterUri::HttpRegisterUri()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetHttp.HttpRegisterUri)
}

void HttpRegisterUri::InitAsDefaultInstance() {
}

HttpRegisterUri::HttpRegisterUri(const HttpRegisterUri& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetHttp.HttpRegisterUri)
}

void HttpRegisterUri::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRegisterUri::~HttpRegisterUri() {
  // @@protoc_insertion_point(destructor:KismetHttp.HttpRegisterUri)
  SharedDtor();
}

void HttpRegisterUri::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HttpRegisterUri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRegisterUri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRegisterUri_descriptor_;
}

const HttpRegisterUri& HttpRegisterUri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpRegisterUri* HttpRegisterUri::default_instance_ = NULL;

HttpRegisterUri* HttpRegisterUri::New(::google::protobuf::Arena* arena) const {
  HttpRegisterUri* n = new HttpRegisterUri;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpRegisterUri::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetHttp.HttpRegisterUri)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_method()) {
      method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HttpRegisterUri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetHttp.HttpRegisterUri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpRegisterUri.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }

      // required string method = 2;
      case 2: {
        if (tag == 18) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpRegisterUri.method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetHttp.HttpRegisterUri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetHttp.HttpRegisterUri)
  return false;
#undef DO_
}

void HttpRegisterUri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetHttp.HttpRegisterUri)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRegisterUri.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRegisterUri.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetHttp.HttpRegisterUri)
}

::google::protobuf::uint8* HttpRegisterUri::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetHttp.HttpRegisterUri)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRegisterUri.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRegisterUri.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetHttp.HttpRegisterUri)
  return target;
}

int HttpRegisterUri::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetHttp.HttpRegisterUri)
  int total_size = 0;

  if (has_uri()) {
    // required string uri = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  if (has_method()) {
    // required string method = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  return total_size;
}
int HttpRegisterUri::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetHttp.HttpRegisterUri)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uri = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

    // required string method = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRegisterUri::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetHttp.HttpRegisterUri)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HttpRegisterUri* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpRegisterUri>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetHttp.HttpRegisterUri)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetHttp.HttpRegisterUri)
    MergeFrom(*source);
  }
}

void HttpRegisterUri::MergeFrom(const HttpRegisterUri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetHttp.HttpRegisterUri)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_method()) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HttpRegisterUri::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetHttp.HttpRegisterUri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRegisterUri::CopyFrom(const HttpRegisterUri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetHttp.HttpRegisterUri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRegisterUri::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HttpRegisterUri::Swap(HttpRegisterUri* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRegisterUri::InternalSwap(HttpRegisterUri* other) {
  uri_.Swap(&other->uri_);
  method_.Swap(&other->method_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpRegisterUri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRegisterUri_descriptor_;
  metadata.reflection = HttpRegisterUri_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpRegisterUri

// required string uri = 1;
bool HttpRegisterUri::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpRegisterUri::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpRegisterUri::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpRegisterUri::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& HttpRegisterUri::uri() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpRegisterUri.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRegisterUri::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetHttp.HttpRegisterUri.uri)
}
 void HttpRegisterUri::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetHttp.HttpRegisterUri.uri)
}
 void HttpRegisterUri::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetHttp.HttpRegisterUri.uri)
}
 ::std::string* HttpRegisterUri::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:KismetHttp.HttpRegisterUri.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRegisterUri::release_uri() {
  // @@protoc_insertion_point(field_release:KismetHttp.HttpRegisterUri.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRegisterUri::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:KismetHttp.HttpRegisterUri.uri)
}

// required string method = 2;
bool HttpRegisterUri::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HttpRegisterUri::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
void HttpRegisterUri::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void HttpRegisterUri::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
 const ::std::string& HttpRegisterUri::method() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpRegisterUri.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRegisterUri::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetHttp.HttpRegisterUri.method)
}
 void HttpRegisterUri::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetHttp.HttpRegisterUri.method)
}
 void HttpRegisterUri::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetHttp.HttpRegisterUri.method)
}
 ::std::string* HttpRegisterUri::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:KismetHttp.HttpRegisterUri.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRegisterUri::release_method() {
  // @@protoc_insertion_point(field_release:KismetHttp.HttpRegisterUri.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRegisterUri::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:KismetHttp.HttpRegisterUri.method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpRequest::kReqIdFieldNumber;
const int HttpRequest::kUriFieldNumber;
const int HttpRequest::kMethodFieldNumber;
const int HttpRequest::kPostDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRequest::HttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetHttp.HttpRequest)
}

void HttpRequest::InitAsDefaultInstance() {
}

HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetHttp.HttpRequest)
}

void HttpRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = 0u;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_data_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  post_data_.SetEntryDescriptor(
      &::KismetHttp::HttpRequest_PostDataEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:KismetHttp.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRequest_descriptor_;
}

const HttpRequest& HttpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpRequest* HttpRequest::default_instance_ = NULL;

HttpRequest* HttpRequest::New(::google::protobuf::Arena* arena) const {
  HttpRequest* n = new HttpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetHttp.HttpRequest)
  if (_has_bits_[0 / 32] & 7u) {
    req_id_ = 0u;
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_method()) {
      method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  post_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetHttp.HttpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // required string uri = 2;
      case 2: {
        if (tag == 18) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpRequest.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // required string method = 3;
      case 3: {
        if (tag == 26) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpRequest.method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_post_data;
        break;
      }

      // map<string, string> post_data = 4;
      case 4: {
        if (tag == 34) {
         parse_post_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_post_data:
          HttpRequest_PostDataEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&post_data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpRequest.PostDataEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpRequest.PostDataEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_post_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetHttp.HttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetHttp.HttpRequest)
  return false;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetHttp.HttpRequest)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRequest.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // required string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRequest.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // map<string, string> post_data = 4;
  if (!this->post_data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpRequest.PostDataEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpRequest.PostDataEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->post_data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->post_data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->post_data().begin();
          it != this->post_data().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HttpRequest_PostDataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(post_data_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HttpRequest_PostDataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->post_data().begin();
          it != this->post_data().end(); ++it) {
        entry.reset(post_data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetHttp.HttpRequest)
}

::google::protobuf::uint8* HttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetHttp.HttpRequest)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // required string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRequest.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // required string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetHttp.HttpRequest.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // map<string, string> post_data = 4;
  if (!this->post_data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpRequest.PostDataEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpRequest.PostDataEntry.value");
      }
    };

    if (deterministic &&
        this->post_data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->post_data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->post_data().begin();
          it != this->post_data().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HttpRequest_PostDataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(post_data_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HttpRequest_PostDataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->post_data().begin();
          it != this->post_data().end(); ++it) {
        entry.reset(post_data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetHttp.HttpRequest)
  return target;
}

int HttpRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetHttp.HttpRequest)
  int total_size = 0;

  if (has_req_id()) {
    // required uint32 req_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->req_id());
  }

  if (has_uri()) {
    // required string uri = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  if (has_method()) {
    // required string method = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  return total_size;
}
int HttpRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetHttp.HttpRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 req_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->req_id());

    // required string uri = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

    // required string method = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // map<string, string> post_data = 4;
  total_size += 1 * this->post_data_size();
  {
    ::google::protobuf::scoped_ptr<HttpRequest_PostDataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->post_data().begin();
        it != this->post_data().end(); ++it) {
      entry.reset(post_data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetHttp.HttpRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HttpRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetHttp.HttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetHttp.HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetHttp.HttpRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  post_data_.MergeFrom(from.post_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_method()) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetHttp.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetHttp.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequest::InternalSwap(HttpRequest* other) {
  std::swap(req_id_, other->req_id_);
  uri_.Swap(&other->uri_);
  method_.Swap(&other->method_);
  post_data_.Swap(&other->post_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRequest_descriptor_;
  metadata.reflection = HttpRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpRequest

// required uint32 req_id = 1;
bool HttpRequest::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpRequest::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpRequest::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpRequest::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
 ::google::protobuf::uint32 HttpRequest::req_id() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpRequest.req_id)
  return req_id_;
}
 void HttpRequest::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:KismetHttp.HttpRequest.req_id)
}

// required string uri = 2;
bool HttpRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HttpRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void HttpRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void HttpRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& HttpRequest::uri() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetHttp.HttpRequest.uri)
}
 void HttpRequest::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetHttp.HttpRequest.uri)
}
 void HttpRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetHttp.HttpRequest.uri)
}
 ::std::string* HttpRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:KismetHttp.HttpRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRequest::release_uri() {
  // @@protoc_insertion_point(field_release:KismetHttp.HttpRequest.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:KismetHttp.HttpRequest.uri)
}

// required string method = 3;
bool HttpRequest::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HttpRequest::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
void HttpRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void HttpRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
 const ::std::string& HttpRequest::method() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetHttp.HttpRequest.method)
}
 void HttpRequest::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetHttp.HttpRequest.method)
}
 void HttpRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetHttp.HttpRequest.method)
}
 ::std::string* HttpRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:KismetHttp.HttpRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRequest::release_method() {
  // @@protoc_insertion_point(field_release:KismetHttp.HttpRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:KismetHttp.HttpRequest.method)
}

// map<string, string> post_data = 4;
int HttpRequest::post_data_size() const {
  return post_data_.size();
}
void HttpRequest::clear_post_data() {
  post_data_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HttpRequest::post_data() const {
  // @@protoc_insertion_point(field_map:KismetHttp.HttpRequest.post_data)
  return post_data_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HttpRequest::mutable_post_data() {
  // @@protoc_insertion_point(field_mutable_map:KismetHttp.HttpRequest.post_data)
  return post_data_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpResponse::kReqIdFieldNumber;
const int HttpResponse::kHeaderContentFieldNumber;
const int HttpResponse::kContentFieldNumber;
const int HttpResponse::kResultcodeFieldNumber;
const int HttpResponse::kCloseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpResponse::HttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetHttp.HttpResponse)
}

void HttpResponse::InitAsDefaultInstance() {
}

HttpResponse::HttpResponse(const HttpResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetHttp.HttpResponse)
}

void HttpResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = 0u;
  header_content_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  header_content_.SetEntryDescriptor(
      &::KismetHttp::HttpResponse_HeaderContentEntry_descriptor_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultcode_ = 0u;
  close_response_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:KismetHttp.HttpResponse)
  SharedDtor();
}

void HttpResponse::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpResponse_descriptor_;
}

const HttpResponse& HttpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpResponse* HttpResponse::default_instance_ = NULL;

HttpResponse* HttpResponse::New(::google::protobuf::Arena* arena) const {
  HttpResponse* n = new HttpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetHttp.HttpResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HttpResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HttpResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(req_id_, resultcode_);
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    close_response_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  header_content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetHttp.HttpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header_content;
        break;
      }

      // map<string, string> header_content = 2;
      case 2: {
        if (tag == 18) {
         parse_header_content:
          DO_(input->IncrementRecursionDepth());
         parse_loop_header_content:
          HttpResponse_HeaderContentEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&header_content_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpResponse.HeaderContentEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetHttp.HttpResponse.HeaderContentEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_header_content;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resultcode;
        break;
      }

      // optional uint32 resultcode = 4;
      case 4: {
        if (tag == 32) {
         parse_resultcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_close_response;
        break;
      }

      // optional bool close_response = 5;
      case 5: {
        if (tag == 40) {
         parse_close_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_response_)));
          set_has_close_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetHttp.HttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetHttp.HttpResponse)
  return false;
#undef DO_
}

void HttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetHttp.HttpResponse)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // map<string, string> header_content = 2;
  if (!this->header_content().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpResponse.HeaderContentEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpResponse.HeaderContentEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->header_content().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->header_content().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->header_content().begin();
          it != this->header_content().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HttpResponse_HeaderContentEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(header_content_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HttpResponse_HeaderContentEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->header_content().begin();
          it != this->header_content().end(); ++it) {
        entry.reset(header_content_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // optional uint32 resultcode = 4;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resultcode(), output);
  }

  // optional bool close_response = 5;
  if (has_close_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->close_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetHttp.HttpResponse)
}

::google::protobuf::uint8* HttpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetHttp.HttpResponse)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // map<string, string> header_content = 2;
  if (!this->header_content().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpResponse.HeaderContentEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "KismetHttp.HttpResponse.HeaderContentEntry.value");
      }
    };

    if (deterministic &&
        this->header_content().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->header_content().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->header_content().begin();
          it != this->header_content().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HttpResponse_HeaderContentEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(header_content_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HttpResponse_HeaderContentEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->header_content().begin();
          it != this->header_content().end(); ++it) {
        entry.reset(header_content_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // optional uint32 resultcode = 4;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resultcode(), target);
  }

  // optional bool close_response = 5;
  if (has_close_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->close_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetHttp.HttpResponse)
  return target;
}

int HttpResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetHttp.HttpResponse)
  int total_size = 0;

  // required uint32 req_id = 1;
  if (has_req_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->req_id());
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint32 resultcode = 4;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional bool close_response = 5;
    if (has_close_response()) {
      total_size += 1 + 1;
    }

  }
  // map<string, string> header_content = 2;
  total_size += 1 * this->header_content_size();
  {
    ::google::protobuf::scoped_ptr<HttpResponse_HeaderContentEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->header_content().begin();
        it != this->header_content().end(); ++it) {
      entry.reset(header_content_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetHttp.HttpResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HttpResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetHttp.HttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetHttp.HttpResponse)
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetHttp.HttpResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  header_content_.MergeFrom(from.header_content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_close_response()) {
      set_close_response(from.close_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetHttp.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetHttp.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HttpResponse::Swap(HttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpResponse::InternalSwap(HttpResponse* other) {
  std::swap(req_id_, other->req_id_);
  header_content_.Swap(&other->header_content_);
  content_.Swap(&other->content_);
  std::swap(resultcode_, other->resultcode_);
  std::swap(close_response_, other->close_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpResponse_descriptor_;
  metadata.reflection = HttpResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpResponse

// required uint32 req_id = 1;
bool HttpResponse::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpResponse::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpResponse::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpResponse::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
 ::google::protobuf::uint32 HttpResponse::req_id() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpResponse.req_id)
  return req_id_;
}
 void HttpResponse::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:KismetHttp.HttpResponse.req_id)
}

// map<string, string> header_content = 2;
int HttpResponse::header_content_size() const {
  return header_content_.size();
}
void HttpResponse::clear_header_content() {
  header_content_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HttpResponse::header_content() const {
  // @@protoc_insertion_point(field_map:KismetHttp.HttpResponse.header_content)
  return header_content_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HttpResponse::mutable_header_content() {
  // @@protoc_insertion_point(field_mutable_map:KismetHttp.HttpResponse.header_content)
  return header_content_.MutableMap();
}

// optional bytes content = 3;
bool HttpResponse::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HttpResponse::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void HttpResponse::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void HttpResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& HttpResponse::content() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpResponse.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpResponse::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetHttp.HttpResponse.content)
}
 void HttpResponse::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetHttp.HttpResponse.content)
}
 void HttpResponse::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetHttp.HttpResponse.content)
}
 ::std::string* HttpResponse::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:KismetHttp.HttpResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpResponse::release_content() {
  // @@protoc_insertion_point(field_release:KismetHttp.HttpResponse.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:KismetHttp.HttpResponse.content)
}

// optional uint32 resultcode = 4;
bool HttpResponse::has_resultcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HttpResponse::set_has_resultcode() {
  _has_bits_[0] |= 0x00000008u;
}
void HttpResponse::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void HttpResponse::clear_resultcode() {
  resultcode_ = 0u;
  clear_has_resultcode();
}
 ::google::protobuf::uint32 HttpResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpResponse.resultcode)
  return resultcode_;
}
 void HttpResponse::set_resultcode(::google::protobuf::uint32 value) {
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:KismetHttp.HttpResponse.resultcode)
}

// optional bool close_response = 5;
bool HttpResponse::has_close_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HttpResponse::set_has_close_response() {
  _has_bits_[0] |= 0x00000010u;
}
void HttpResponse::clear_has_close_response() {
  _has_bits_[0] &= ~0x00000010u;
}
void HttpResponse::clear_close_response() {
  close_response_ = false;
  clear_has_close_response();
}
 bool HttpResponse::close_response() const {
  // @@protoc_insertion_point(field_get:KismetHttp.HttpResponse.close_response)
  return close_response_;
}
 void HttpResponse::set_close_response(bool value) {
  set_has_close_response();
  close_response_ = value;
  // @@protoc_insertion_point(field_set:KismetHttp.HttpResponse.close_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace KismetHttp

// @@protoc_insertion_point(global_scope)
