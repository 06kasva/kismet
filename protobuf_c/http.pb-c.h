/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: http.proto */

#ifndef PROTOBUF_C_http_2eproto__INCLUDED
#define PROTOBUF_C_http_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _KismetHttp__HttpRegisterUri KismetHttp__HttpRegisterUri;
typedef struct _KismetHttp__HttpRequest KismetHttp__HttpRequest;
typedef struct _KismetHttp__HttpRequest__PostDataEntry KismetHttp__HttpRequest__PostDataEntry;
typedef struct _KismetHttp__HttpResponse KismetHttp__HttpResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Define an endpoint (Helper->Kismet)
 * Registers a HTTP endpoint; requests to this endpoint will be sent to the
 * helper via the HttpRequest message, which will, in turn, expect replies
 * via the HttpResponse message.
 */
struct  _KismetHttp__HttpRegisterUri
{
  ProtobufCMessage base;
  /*
   * Full URI, including file type; Helpers cannot take advantage of the Kismet
   * multi-serialization types so they must define a URI for each type
   */
  char *uri;
  /*
   * Method; ie GET or POST; a URI can only implement a single method and
   * must register multiple URIs for multiple methods.
   */
  char *method;
};
#define KISMET_HTTP__HTTP_REGISTER_URI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_http__http_register_uri__descriptor) \
    , NULL, NULL }


struct  _KismetHttp__HttpRequest__PostDataEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define KISMET_HTTP__HTTP_REQUEST__POST_DATA_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_http__http_request__post_data_entry__descriptor) \
    , NULL, NULL }


/*
 * Handle an incoming HTTP request (Kismet->Helper)
 */
struct  _KismetHttp__HttpRequest
{
  ProtobufCMessage base;
  /*
   * Unique ID of request, must be returned in the HttpResponse
   */
  uint32_t req_id;
  /*
   * Full URI of request
   */
  char *uri;
  /*
   * Method
   */
  char *method;
  /*
   * If post, a map of post variables
   */
  size_t n_post_data;
  KismetHttp__HttpRequest__PostDataEntry **post_data;
};
#define KISMET_HTTP__HTTP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_http__http_request__descriptor) \
    , 0, NULL, NULL, 0,NULL }


/*
 * Respond to HTTP data (Helper->Kismet)
 */
struct  _KismetHttp__HttpResponse
{
  ProtobufCMessage base;
  /*
   * Unique ID of request we're responding to
   */
  uint32_t req_id;
  /*
   * Content being sent, if any
   */
  protobuf_c_boolean has_content;
  ProtobufCBinaryData content;
  /*
   * Result code, if we're concluding this connection
   */
  protobuf_c_boolean has_resultcode;
  uint32_t resultcode;
  /*
   * Is this the end of this connection?
   */
  protobuf_c_boolean has_close_response;
  protobuf_c_boolean close_response;
};
#define KISMET_HTTP__HTTP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_http__http_response__descriptor) \
    , 0, 0,{0,NULL}, 0,0, 0,0 }


/* KismetHttp__HttpRegisterUri methods */
void   kismet_http__http_register_uri__init
                     (KismetHttp__HttpRegisterUri         *message);
size_t kismet_http__http_register_uri__get_packed_size
                     (const KismetHttp__HttpRegisterUri   *message);
size_t kismet_http__http_register_uri__pack
                     (const KismetHttp__HttpRegisterUri   *message,
                      uint8_t             *out);
size_t kismet_http__http_register_uri__pack_to_buffer
                     (const KismetHttp__HttpRegisterUri   *message,
                      ProtobufCBuffer     *buffer);
KismetHttp__HttpRegisterUri *
       kismet_http__http_register_uri__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_http__http_register_uri__free_unpacked
                     (KismetHttp__HttpRegisterUri *message,
                      ProtobufCAllocator *allocator);
/* KismetHttp__HttpRequest__PostDataEntry methods */
void   kismet_http__http_request__post_data_entry__init
                     (KismetHttp__HttpRequest__PostDataEntry         *message);
/* KismetHttp__HttpRequest methods */
void   kismet_http__http_request__init
                     (KismetHttp__HttpRequest         *message);
size_t kismet_http__http_request__get_packed_size
                     (const KismetHttp__HttpRequest   *message);
size_t kismet_http__http_request__pack
                     (const KismetHttp__HttpRequest   *message,
                      uint8_t             *out);
size_t kismet_http__http_request__pack_to_buffer
                     (const KismetHttp__HttpRequest   *message,
                      ProtobufCBuffer     *buffer);
KismetHttp__HttpRequest *
       kismet_http__http_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_http__http_request__free_unpacked
                     (KismetHttp__HttpRequest *message,
                      ProtobufCAllocator *allocator);
/* KismetHttp__HttpResponse methods */
void   kismet_http__http_response__init
                     (KismetHttp__HttpResponse         *message);
size_t kismet_http__http_response__get_packed_size
                     (const KismetHttp__HttpResponse   *message);
size_t kismet_http__http_response__pack
                     (const KismetHttp__HttpResponse   *message,
                      uint8_t             *out);
size_t kismet_http__http_response__pack_to_buffer
                     (const KismetHttp__HttpResponse   *message,
                      ProtobufCBuffer     *buffer);
KismetHttp__HttpResponse *
       kismet_http__http_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_http__http_response__free_unpacked
                     (KismetHttp__HttpResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*KismetHttp__HttpRegisterUri_Closure)
                 (const KismetHttp__HttpRegisterUri *message,
                  void *closure_data);
typedef void (*KismetHttp__HttpRequest__PostDataEntry_Closure)
                 (const KismetHttp__HttpRequest__PostDataEntry *message,
                  void *closure_data);
typedef void (*KismetHttp__HttpRequest_Closure)
                 (const KismetHttp__HttpRequest *message,
                  void *closure_data);
typedef void (*KismetHttp__HttpResponse_Closure)
                 (const KismetHttp__HttpResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kismet_http__http_register_uri__descriptor;
extern const ProtobufCMessageDescriptor kismet_http__http_request__descriptor;
extern const ProtobufCMessageDescriptor kismet_http__http_request__post_data_entry__descriptor;
extern const ProtobufCMessageDescriptor kismet_http__http_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_http_2eproto__INCLUDED */
