Kismet 2009-02-TEST1
Mike Kershaw <dragorn@kismetwireless.net>
http://www.kismetwireless.net

1.  What is Kismet
2.  Upgrading from earlier versions
3.  Quick start
4.  Suidroot & Security
5.  Capture sources
6.  Caveats and quirks for specific drivers
7.  Supported capture sources
8.  Plugins
9.  GPS
10. Logging
10. Server configuration options

1.  What is Kismet

    Kismet is an 802.11 wireless network detector, sniffer, and intrusion
    detection system.  Kismet will work with any wireless card which
    supports raw monitoring mode, and can sniff 802.11b, 802.11a, 802.11g,
    and 802.11n traffic (devices and drivers permitting).

    Kismet also sports a plugin architecture allowing for additional
    non-802.11 protocols to be decoded.

    Kismet identifies networks by passively collecting packets and detecting
    networks, which allows it to detect (and given time, expose the names
    of) hidden networks and the presence of non-beaconing networks via data
    traffic.

2.  Upgrading from earlier Kismet versions

    This release marks a major change in how Kismet works and is configured.
    While many aspects are similar, many others (the client, configuring
    sources and channels, etc) are very different.  

    To take advantage of the new features, replace your existing
    configuration files with the latest configuration data.
    
    Most notably:
     * Sources are defined differently.  See the "Capture Sources" section.
     * All UI configuration is handled inside the Kismet client and stored
       in the users home directory in ~/.kismet/kismet_ui.conf
     * Most situations which were previously fatal conditions which caused
       Kismet to exit can now be recovered from.
     * New filtering options
     * New alert options

3.  Quick start

    PLEASE read the full manual, but for the impatient, here is the BARE
    MINIMUM needed to get Kismet working:

    * Download Kismet from http://www.kismetwireless.net/download.shtml
    * Run "./configure".  Pay attention to the output!  If Kismet cannot
      find all the headers and libraries it needs, major functionality may
      be missing.  Most notably, compiling Kismet yourself will require
      the development packages and headers, usually called foo-dev or
      foo-devel.
    * Compile Kismet with "make".
    * Install Kismet with either "make install" or "make suidinstall".
      YOU MUST READ THE "SUID INSTALLATION & SECURITY" SECTION OF THE 
      README OR YOUR SYSTEM MAY BE INSECURE.
    * If you have installed Kismet as suid-root, add your user to the
      "kismet" group

    * Run "kismet".  If you did not install Kismet with suid-root support,
      you need to start it as root in nearly all situations.  This is not
      recommended as it is less secure than privsep mode, where packet
      processing is segregated from admin rights.
    * When prompted to start the Kismet server, choose "Yes"
    * When prompted to add a capture interface, add your wireless interface.
      In nearly all cases, Kismet will autodetect the device type and
      supported channels.  If it does not, you will have to manually define
      the capture type (as explained later in this README)
    * Logs will be stored in the directory you started Kismet from, unless
      changed via the "logprefix" config file or "--log-prefix" startup
      option.

    * READ THE REST OF THIS README.  Kismet has a lot of features and a lot
      of configuration options, to get the most out of it you should read
      all of the documentation.

3b.  Windows quick start

    Using the CACE Package:

    * Download the Win32/Cygwin installer created by CACE and linked from
      the download page (http://www.kismetwireless.net/download.shtml
    * Run the installer
    * Start Kismet
    * Pick your AirPcap or Kismet Drone sources

    * READ THE READ OF THIS README.

    Compiling it yourself:

    * Download the Cygwin setup tool (http://www.cygwin.org)
    * Install Cygwin with make, GCC, libncurses, libncurses-dev
    * Download the Airpcap_Devpack from CACE Support
    * Put Airpcap_Devpack and Libpcap_Devpack in the kismet source directory
    * Run "./configure"
    * Compile Kismet with "make".
    * Install Kismet with "make install"

    NOTE: KISMET WILL **ONLY** WORK WITH THE CACE AIRPCAP DEVICE, SAVED PCAP
    FILES, -OR- REMOTE KISMET DRONES RUNNING ON A SUPPORTED PLATFORM.  NO 
    OTHER HARDWARE IS SUPPORTED IN WINDOWS, PERIOD.  WINDOWS DRIVERS DO NOT 
    INCLUDE SUPPORT FOR WIFI MONITORING WHICH KISMET REQUIRES.  THERE IS NO
    WAY TO CHANGE THIS.

3c.  OSX/Darwin quick start

    * Download Kismet from http://www.kismetwireless.net/download.shtml
    * Run "./configure".  Pay attention to the output!  If Kismet cannot
      find all the headers and libraries it needs, major functionality may
      be missing.  Notably, you may need to install libpcap manually.

      The libpcap included with OSX does not support PPI logging.  Kismet
      will not be able to log to PPI correctly.

      Configure will automatically detect OSX and default to the group
      "staff" for OSX suidinstall.

    * Compile Kismet with "make".
    * Install Kismet with either "make install" or "make suidinstall".
      YOU MUST READ THE "SUID INSTALLATION & SECURITY" SECTION OF THE 
      README OR YOUR SYSTEM MAY BE VULNERABLE.
    * If you have installed Kismet as suid-root, add your user to the
      "staff" group if it is not already.

    * Run "kismet".  If you did not install Kismet with suid-root support,
      you need to start it as root in nearly all situations.  This is not
      recommended as it is less secure than privsep mode, where packet
      processing is segregated from admin rights.
    * When prompted to start the Kismet server, choose "Yes"
    * When prompted to add a capture interface, add your wireless interface.
      In nearly all cases, Kismet will autodetect the device type and
      supported channels.  If it does not, you will have to manually define
      the capture type (as explained later in this README)

      For many Macs, this will be 'en1', however start a terminal and check
      the output of "ifconfig -a".

      The wireless interface must be enabled in the wireless control panel
      for Kismet to work, otherwise it will not find any networks.

      Kismet currently ONLY works with the Airport wireless devices, NOT USB
      WIRELESS DEVICES.
    * Logs will be stored in the directory you started Kismet from, unless
      changed via the "logprefix" config file or "--log-prefix" startup
      option.

    * READ THE REST OF THIS README

4.  Suidroot & Security

    In order to configure the wireless card for monitor mode and start
    capturing packets, Kismet needs root access.  There are two ways to
    accomplish this:  Start Kismet as root, or install it so that the
    control components are set to start as root.

    Starting Kismet as root means that Kismet will continue running as root.
    In theory this presents no additional risk, however if there are any
    flaws in the Kismet packet dissection code then it may be possible for a
    malicious packet to cause code execution as root.  Additionally,
    third-party plugins will run as root, and may not be secure.

    Installing Kismet as suid-root creates a limited-functionality binary
    (kismet_capture) which is only launchable by members of the "kismet"
    group.  Kismet uses this to configure cards and control the channels,
    while packet decoding happens only in the user component, significantly
    limiting the attack surface.

    Distributions are strongly encouraged to use this method as it allows
    standard group controls for what users can use Kismet to change card
    states.

    Embedded systems typically have much less storage space and RAM, and
    often do not enforce user/root separation as strictly due to these
    limitations.  On embedded systems, Kismet may be installed without the
    kismet_capture binary and run in root mode only, however the above
    risks still apply.

    Under no situation should the kismet_server binary itself be set
    suidroot as this will bypass any security checks.

5.  Capture sources

    All packets in Kismet come from a capture source.  Capture sources are
    typically network cards on the local system, however they can also be a
    previously recorded file or a remote capture system running a Kismet
    drone.

    Kismet will, in most cases, autodetect the driver and supported channels
    for a capture source given only the network interface.  For many users
    this will be sufficient, however many expanded options are available for
    capture sources.

    Kismet captures packets at the 802.11 layer.  This requires changing the
    mode of the network interface, making it unavailable for normal use.  In
    most cases it is not possible to remain associated to a wireless network
    while running Kismet on the same interface.

    Capture sources may be added via the Kismet UI under the "Add Source"
    option, in which case the options may be added under the "Options:"
    field, comma separated.  They may also be defined in the kismet.conf
    configuration file as the "ncsource=" option, such as:
        ncsource=wlan0:option1=foo,option2=bar

    Source options:
      name=foo          Custom name for the source (otherwise it will be
                         named the same as the capture interface).  This is
                         completely arbitrary and meaningful only to the
                         user.
      type=foo          Sources which can not autodetect the type must have
                         the type specified.  This is rarely necessary.
                         Additional information on supported source types
                         follows.
      uuid=foo          Users wishing a static unique identifier on sources
                         may specify one here.  This is not necessary for
                         most users.  UUID is of the format:
                           XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
      hop=true|false    Disable channel hopping on this source.  Default
                         behavior is for channel sources to hop channels to
                         cover the entire spectrum.  
      velocity=#        Channel hop velocity (number of channels per
                         second), Kismet can hop 1-10 channels per second.
      dwell=#           Channel dwell time, the number of seconds Kismet
                         will wait on each channel.  If hopping is enabled
                         and a channel dwell time is specified, Kismet will
                         hop at N seconds per channel, instead of N channels
                         per second.
      channellist=name  Use an alternate channel list instead of the
                         autodetected list of channels supported by this
                         interface.  The channellist must be defined.
      split=true|false  When multiple sources use the same channel list
                         (either autodetected or by the channellist= option)
                         Kismet will split them so that they do not cover the
                         same channels at the same time.  Sources can be 
                         forced to ignore this and begin hopping at the
                         beginning of the channel list regardless of overlap.
      retry=true|false  Kismet will attempt to re-open a capture source
                         which has encountered an error.  This behavior can
                         be disabled if the user wants the source to remain
                         closed.
      vap=interface     Create a secondary named interface for capture
                         instead of trying to change the mode of the
                         existing interface.  This is primarily only for use
                         by drivers using the mac80211 interface under
                         Linux.  Users wishing to do Kismet+Managed or
                         Kismet+Injection should create a vap.
      wpa_scan=time     When using a mac80211 VAP, Kismet can use
                         wpa_supplicant on a managed interface to trigger
                         hardware assisted scans, enabling some view of the
                         rest of the spectrum without significantly
                         disrupting operation of the managed VAP.  Suggested
                         time for scan intervals is 15 seconds.
      validatefcs=t|f   True/False.  Kismet normally will not bother trying
                         to validate the FCS checksum of incoming packets
                         because most drivers only report valid frames in
                         the first place.  Packet sources which report
                         invalid frames by default will enable this option
                         automatically.  If the drivers have been manually
                         configured to report invalid packets, this should
                         be specified to prevent Kismet from processing
                         broken packets.

    Example sources (these are given as config file parameters, however they
    will work equally well as command-line options, ie "-c wlan0"):
      Capture on wlan0, channel 6, don't channel hop
       ncsource=wlan0:hop=false,channel=6

      Capture on wlan0, 802.11b channels only even if it supports 5GHz
       ncsource=wlan0:channellist=IEEE80211b

      Create a VAP on wlan0 named wlan0mon and use wpa_supplicant to
      give us some view of other channels, while remaining associated to a
      network:
       ncsource=wlan0:vap=wlan0mon,hop=false,wpa_scan=15

      Read from a pre-recorded pcap file:
       ncsource=/home/foo/old.pcap

      Capture using an Airpcap device on Windows
       ncsource=airpcap

      Capture using a remote capture drone
       ncsource=drone:host=10.10.100.2,port=2502

    Channel lists:

    Channel lists control the channels and patterns hopped to by capture
    sources in Kismet, when the channels can not be autodetected (or when
    the user wishes to override them for some reason).

    Channels can typically be specified as IEEE channels (11, 36, etc) 
    or as frequencies (2401, 5200) however some platforms and drivers may
    not support specifying channels or frequencies out of the IEEE standard
    range.

    channellist=name:channel,channel,channel

    Additionally, individual channels in the list can be weighted so that
    more time is spent on them; for a weighting value of 3, 3x more time is
    spent on that channel.

    channellist=foo:1:3,6:3,11:3,2,3,4,5,6,7,8,9,10

    Up to 256 channels may be specified in a channel list.  For greater
    numbers of channels, a range must be specified.

    Ranges may consist of channels or of frequencies.

    channellist=name:range-[start]-[end]-[overlap]-[iteration]

    Channels between start and end, at a given iteration.  Kismet will not hop
    directly between channels that overlap.

    channellist=foo:range-1-11-3-1

    A similar range using frequencies (802.11 2.4GHz channels are ~20MHz
    wide; technically 22 but 20 suffices, and 5 MHz apart).

    channellist=foo:range-2412-2462-20-5

    Ranges are NOT split between sources.  Multiple sources hopping on the
    same channel list which includes a range will not split the expanded
    range - in other words, channel ranges are treated as a single channel
    entry.

    Multiple ranges can be specified in a single channel list, separated by
    commas.  They may also be mixed with channels:

    channellist=foo:range-1-11-3-1,36,52

6.  Caveats and quirks for specific drivers:

    Mac80211 General (Linux):

      At the time of this release, the mac80211 drivers in Linux are
      undergoing significant development, which means at any given time they
      can exhibit extremely odd behavior or be outright broken.  Users are
      encouraged to upgrade to the latest kernel, and to consider installing
      the compat-wireless backport package, if problems are experienced.

    Madwifi (Linux):

      Madwifi-ng has been largely deprecated by ath5k/ath9k for normal
      usage.  These drivers support multi-vap more cleanly via the mac80211
      layer and do not, typically, have the same problems historically
      present in madwifi.  
      
      Madwifi-ng sources can be specified as either the VAP (ath0, mon0,
      etc) or as the control interface (wifi0, wifi1).  However, IF THE
      CONTROL INTERFACE IS SPECIFIED, Kismet cannot extract the list of
      supported channels, and will default to IEEE80211b channels.

      Madwifi-ng continues to have problems with multi-vap and initial vap
      creation.  It is recommended that the initial VAP creation be turned off
      by the module parameter "autocreate=none" when loading ath_pci.  If the
      madwifi monitor vap stops reporting packets soon after being created,
      this is often the cause.

      Combining managed and monitor VAPs appears to still not work well.

    WL (Linux)

      Broadcom has released a binary version of their drivers called WL.
      These drivers are incapable of monitor mode, and cannot be used with
      Kismet.  Kismet will autodetect them and report this to the user.

    OTUS (Linux)

      Atheros released a driver for the 802.11n USB devices; however, this
      does not have support for monitor mode and cannot be used with Kismet.
      The ar9170 driver project is providing mac80211 kernel support for
      this card, and works with Kismet.  ar9170 has been merged with the
      wireless-git development kernel and should be present in the
      compat-wireless packages.

    Orinoco (Linux)

      Due to problems in monitor mode with newer firmwares, the Orinoco kernel
      drivers have disabled monitor mode for newer/"modern" firmware versions
      in the Orinoco cards.

      Kismet will attempt to use the device, but warn the user that it will
      probably fail.  Monitor support can be forced on in the module via the
      module parameter "force_monitor=1" when loading orinoco.ko.

    NDISWrapper (Linux)

      The NDIS-Wrapper driver loads Windows drivers into the Linux network
      stack.  These drivers are not capable of monitor mode, and will not
      work with Kismet.

      Note:  The rndis drivers are NOT the same as ndiswrapper.  rndis
      drivers are for a specific USB chipset and are not related to
      ndiswrapper.

    BSD (BSD Generic)

      Cards which work under the generic BSD framework for monitor mode with
      radiotap headers should work with Kismet via the source types
      "radiotap_bsd_ag", "radiotap_bsd_a", "radiotap_bsd_g", and
      "radiotap_bsd".  Channel detection and device type autodetection are
      currently not supported.

      ncsource=wl0:type=radiotap_bsd_ag

    Windows

      ONLY THE AIRPCAP DEVICE IS SUPPORTED UNDER WINDOWS.  THIS IS A
      SPECIFIC HARDWARE DEVICE MADE BY CACE TECHNOLOGIES.

      The airpcap has monitor mode drivers with a public interface for
      controlling them.  This is the only device Kismet can capture packets
      from on Windows.

    USB Devices (OSX)

      Only devices using the Airport IOKit drivers are supported on OSX.
      USB devices are, in general, not supported because the drivers lack
      monitor mode or a method to set the channel.

7.  Supported capture source types

    Capture source types are only required in specific situations where
    Kismet cannot detect the capture source type automatically.

    Linux Capture Sources:

      All modern drivers on Linux use the mac80211 driver framework.  Kismet
      will auto-detect any driver using this framework.  A generic source
      type 'mac80211' can be used for forcing a type, however it is not
      strictly useful to do so.

      adm8211           Kernel adm8211 driver
      acx100            Kernel acx100 driver
      hostap            Kernel prism2 driver
      ipw2100           Kernel Intel 2100 driver
      ipw2200           Kernel Intel 2200 driver
      ipw2915           Kernel Intel 2915 driver
      ipw3945           Kernel intel 3945 driver
      mac80211          Generic mac80211 capture source for any mac80211
                        drivers.
      madwifi           Madwifi/Madwifi-ng
      madwifi_a         Alias for madwifi, default 802.11a channels
      madwifi_b         Alias for madwifi, default 802.11b/g channels
      madwifi_g         Alias for madwifi, default 802.11b/g channels
      madwifi_ag        Alias for madwifi, default 802.11abg channels
      nokia770          Conexant-based driver in Nokia Maemo tablets
      nokia800          Alias for nokia770
      nokia810          Alias for nokia770

      pcapfile          Pcap-formatted previously recorded file
      drone             Remote Kismet packet capture, source options
                        "host=..." and "port=..." are required.
                        ncsource=drone:host=localhost,port=2502

    BSD Capture Sources:

      Currently, the BSD packet capture sources do not support autodetection
      or channel detection.

      Capture on BSD should work with any driver which supports monitor mode
      and which uses the standard BSD IOCTLs to set the mode and channel.

      Patches/Additional BSD support welcome.

      radiotap_bsd      Generic BSD capture source, default 802.11b/g channels
      radiotap_bsd_g    Default 802.11b/g channels
      radiotap_bsd_a    Default 802.11a channels
      radiotap_bsd_ag   Default 802.11abg channels

      pcapfile          Pcap-formatted previously recorded file
      drone             Remote Kismet packet capture, source options
                        "host=..." and "port=..." are required.

    Windows Capture Sources:

      Currently ONLY THE AIRPCAP DEVICE, PCAP FILE, AND DRONES RUNNING ON A
      SUPPORTED PLATFORM are supported under Windows.  NO OTHER DEVICES CAN
      BE USED FOR PACKET CAPTURE.

      airpcap           Airpcap generic source.  Will autodetect the channel
                        ranges.  Interface 'airpcap' will detect the first
                        airpcap device (ncsource=airpcap), interface paths
                        may be used to specify specific devices
                        (ncsource=\\.\airpcap01)
      airpcap_ask       List available sources and ask which one to use.
                        Should NOT be used when launched by the Kismet UI.

      pcapfile          Pcap-formatted previously recorded file
      drone             Remote Kismet packet capture, source options
                        "host=..." and "port=..." are required.

    OSX/Macintosh Capture Sources:
      darwin            Any device controlled by the Airport IOKit drivers
                        under OSX.  Default 802.11b/g channels.

      pcapfile          Pcap-formatted previously recorded file
      drone             Remote Kismet packet capture, source options
                        "host=..." and "port=..." are required.
8.  Plugins

    Kismet plugins can do almost anything that the native Kismet process can
    do.  This includes extending the logging capability, adding IDS alerts,
    defining new capture sources (within some limitations), and adding new
    features to the Kismet UI.

    Plugins for the Kismet server (capture and logging process) are loaded
    from the system-wide plugin directory (/usr/local/lib/kismet/ by
    default) or from the users Kismet settings directory
    (~/.kismet/plugins).

    When running Kismet with privilege separation enabled (installed
    kismet_capture as root), plugins are loaded after the root control
    daemon is started.  Plugins cannot perform root-only operations.

    When running Kismet without privilege separation (launching as root),
    plugins run with root privileges.  This is not recommended.

    Server plugins are only loaded when kismet.conf contains:
      allowplugins=true

    Client plugins are loaded from the system-wide plugin directory
    (/usr/local/lib/kismet_client by default) or from the users Kismet
    settings directory (~/.kismet/client_plugins).

    The Kismet UI provides mechanisms for loading plugins (and specifying
    plugins to be loaded automatically on startup) via the Plugins menu.

    Occasionally, plugins can cause startup problems (due to errors, or more
    often, version mismatches).  Kismet will attempt to specify which plugin
    caused the failure.  Removing the offending plugin from the plugins
    directory will resolve the problem.  Recompiling the plugin with the
    installed version of Kismet will often fix loading problems.

9.  GPS

    Kismet can integrate with a GPS device to provide coordinates for
    networks it has detected.  These can be logged to the pcap file when PPI
    logging is enabled, and to an XML file for processing with Kismap, included 
    with the Kismet source, as well as other third-party tools.

    Kismet can use the GPS network daemon 'gpsd', or can parse NMEA directly
    from the GPS unit.

    The GPS is controlled with the Kismet server config, kismet.conf.  For
    using gpsd with gpsd running on the local system:

      gps=true
      gpstype=gpsd
      gpshost=localhost:2947
      gpsmodelock=false
      gpsreconnect=true

    By specifying gpsreconnect, if gpsd crashes or Kismet otherwises looses
    its connection, it will be re-established.  Gpsmodelock compensates for
    certain broken GPS/GPSd combinations, where the GPS never reports a
    valid lock.  By forcing a gpsmodelock=true, Kismet assumes the GPS
    always has a 2d lock.

    For using a GPS device without gpsd:

      gps=true
      gpstype=serial
      gpsdevice=/dev/ttyS0
      gpsreconnect=true

    The gpsdevice parameter should be set to the proper serial device for
    your GPS.  For USB GPS devices this will typically be /dev/ttyUSB0, and 
    for bluetooth devices this will often by /dev/rfcomm0 or similar.  Check
    the output of "dmesg" after plugging in your device.

    Kismet cannot know the location of a network, it can only know the
    location where it saw a signal.   By circling the suspected location,
    you can provide more GPS data for processing the network center point.

    Kismet keeps running averages of the network location, however this is
    not incredibly accurate, due to averaging and imprecision in
    floating point math.  For plotting network locations, the gps file
    should be used.

10. Logging

    By default Kismet will log the pcap file, gps log, alerts, and network
    log in XML and plaintext.

    By default, Kismet will try to log to pcapfiles using the PPI per-packet
    header.  The PPI header is a well-documented header supported by
    Wireshark and other tools, which can contain spectrum data, radio data
    such as signal and noise levels, and GPS data.

    PPI is only available with recent libpcap versions.  When it is not
    available, Kismet will fall back to standard 802.11 format with no extra
    headers.

    The pcap logging format is controlled by:
      pcapdumpformat=ppi
      or
      pcapdumpformat=80211

    The naming of logfiles is controlled by the "logtemplate" configuration
    option.  By default, Kismet logs in the directory it is started in
    (unless modified with the "--log-prefix" option).

    The following variables can be used in the logtemplate:
        %p      Prefix (as given by --log-prefix)
        %n      Logging name (as given by --log-title)
        %d      Starting date, Mmm-DD-YYYY
        %D      Starting date, YYYYMMDD
        %t      Starting time, HH-MM-SS
        %i      Incremental, in the case of multiple logs of the same name
        %l      Log type (pcapdump, netxml, etc)
        %h      Home directory of the user Kismet was started as

    The default log template with a --log-prefix of /tmp and a --log-title
    of Kismet would expand from:
      logtemplate=%p%n-%D-%t-%i.%l
    to (for example):
      /tmp/Kismet-20090428-12-45-33-1.pcapdump

    Nested directories may be used (for example, with a template of the form
    "%p/%l/%D-%t"), however they must be created prior to starting Kismet,
    Kismet will not create the directories itself.

    Most users should never need to change the logtemplate, however the
    option remains available.  When changing the template, be sure to
    include the "%p" prefix option in a logical location (ie, at the
    beginning of the template) or else the --log-prefix argument will not
    function as expected.


10. Other Configuration

    Kismet is divided into two main processes:  kismet_server and
    kismet_client.  The server portion (responsible for capture, logging,
    and decoding) is controlled by kismet.conf (by default in
    /usr/local/etc) and the client is configured via preferences options.

    For the most part, Kismet can run with no additional configuration by
    adding capture sources runtime with the UI, however for
    standalone/headless operation or advanced configuration, users will want
    to edit the config file.

    The Kismet config is a plain text file with option=value pairs.  Lines
    beginning with # are considered comments and are ignored.

    Most configuration options are self-explanatory or documented in the
    config file itself.

    By default Kismet only listens to the loopback interface on port 2501.
    This may be changed:

    listen=tcp://ip:port     Define the IP and port Kismet listens on.  By 
                              default, for security reasons, Kismet will 
                              listen only on 127.0.0.1, the loopback interface.  
                              To listen on any interface, use the IP 0.0.0.0.
    allowedhosts=...         Comma-separated list of IP addresses allowed to 
                              connect to the Kismet server.  IP ranges may be 
                              specified with netmasks (ie 10.10.10.0/24)
    maxclients=N             Maximum number of clients allowed to simultaneously
                              connect to the Kismet server.
    maxbacklog=5000          Maximum number of backlogged "lines" the server
                              keeps for clients which are not keeping up
                              with the network protocol.  This also affects
                              the amount of RAM potentially used by the
                              Kismet server process, and may need to be
                              lowered on extremely RAM-limited systems.

    Kismet servers may also be configured to act as Kismet drones, exporting
    a TCP stream of live packets:

    dronelisten=..           Same as above, for drone capabilities
    droneallowedhosts=..     ...
    dronemaxclients=..       ...
    droneringlen=65535       Equivalent of maxbacklog for Kismet clients,
                              maximum amount of space used for backlogged
                              packets as a drone.  May be reduced on
                              extremely RAM-limited systems.

    Kismet can export packets directly to other tools by creating a virtual
    network interface (supported on Linux, minimal support on OSX and BSD
    due to limited tuntap driver implementations on these platforms):

    tuntap_export=true       Enable tuntap export
    tuntap_device=kistap0    Virtual network interface created

    Sound can be generated by the Kismet server, however typically this
    would be done by the Kismet UI and thusly sound is disabled by default.
    The options sound, soundplay, sound_new, etc, in the Kismet config file
    control sound and speech playing from the server.

