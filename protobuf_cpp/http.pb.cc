// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KismetExternalHttp {

namespace {

const ::google::protobuf::Descriptor* HttpAuthToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpAuthToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpRegisterUri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRegisterUri_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubHttpPostData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubHttpPostData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubHttpHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubHttpHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_http_2eproto() {
  protobuf_AddDesc_http_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "http.proto");
  GOOGLE_CHECK(file != NULL);
  HttpAuthToken_descriptor_ = file->message_type(0);
  static const int HttpAuthToken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAuthToken, token_),
  };
  HttpAuthToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpAuthToken_descriptor_,
      HttpAuthToken::default_instance_,
      HttpAuthToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAuthToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpAuthToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpAuthToken));
  HttpRegisterUri_descriptor_ = file->message_type(1);
  static const int HttpRegisterUri_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, auth_required_),
  };
  HttpRegisterUri_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpRegisterUri_descriptor_,
      HttpRegisterUri::default_instance_,
      HttpRegisterUri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRegisterUri, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpRegisterUri));
  SubHttpPostData_descriptor_ = file->message_type(2);
  static const int SubHttpPostData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpPostData, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpPostData, content_),
  };
  SubHttpPostData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubHttpPostData_descriptor_,
      SubHttpPostData::default_instance_,
      SubHttpPostData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpPostData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpPostData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubHttpPostData));
  HttpRequest_descriptor_ = file->message_type(3);
  static const int HttpRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, post_data_),
  };
  HttpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpRequest_descriptor_,
      HttpRequest::default_instance_,
      HttpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpRequest));
  SubHttpHeader_descriptor_ = file->message_type(4);
  static const int SubHttpHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpHeader, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpHeader, content_),
  };
  SubHttpHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubHttpHeader_descriptor_,
      SubHttpHeader::default_instance_,
      SubHttpHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubHttpHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubHttpHeader));
  HttpResponse_descriptor_ = file->message_type(5);
  static const int HttpResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, header_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, close_response_),
  };
  HttpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpResponse_descriptor_,
      HttpResponse::default_instance_,
      HttpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_http_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpAuthToken_descriptor_, &HttpAuthToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpRegisterUri_descriptor_, &HttpRegisterUri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubHttpPostData_descriptor_, &SubHttpPostData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpRequest_descriptor_, &HttpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubHttpHeader_descriptor_, &SubHttpHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpResponse_descriptor_, &HttpResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_http_2eproto() {
  delete HttpAuthToken::default_instance_;
  delete HttpAuthToken_reflection_;
  delete HttpRegisterUri::default_instance_;
  delete HttpRegisterUri_reflection_;
  delete SubHttpPostData::default_instance_;
  delete SubHttpPostData_reflection_;
  delete HttpRequest::default_instance_;
  delete HttpRequest_reflection_;
  delete SubHttpHeader::default_instance_;
  delete SubHttpHeader_reflection_;
  delete HttpResponse::default_instance_;
  delete HttpResponse_reflection_;
}

void protobuf_AddDesc_http_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhttp.proto\022\022KismetExternalHttp\"\036\n\rHttp"
    "AuthToken\022\r\n\005token\030\001 \002(\t\"E\n\017HttpRegister"
    "Uri\022\013\n\003uri\030\001 \002(\t\022\016\n\006method\030\002 \002(\t\022\025\n\rauth"
    "_required\030\003 \002(\010\"1\n\017SubHttpPostData\022\r\n\005fi"
    "eld\030\001 \002(\t\022\017\n\007content\030\002 \002(\t\"r\n\013HttpReques"
    "t\022\016\n\006req_id\030\001 \002(\r\022\013\n\003uri\030\002 \002(\t\022\016\n\006method"
    "\030\003 \002(\t\0226\n\tpost_data\030\004 \003(\0132#.KismetExtern"
    "alHttp.SubHttpPostData\"0\n\rSubHttpHeader\022"
    "\016\n\006header\030\001 \002(\t\022\017\n\007content\030\002 \002(\t\"\226\001\n\014Htt"
    "pResponse\022\016\n\006req_id\030\001 \002(\r\0229\n\016header_cont"
    "ent\030\002 \003(\0132!.KismetExternalHttp.SubHttpHe"
    "ader\022\017\n\007content\030\003 \001(\014\022\022\n\nresultcode\030\004 \001("
    "\r\022\026\n\016close_response\030\005 \001(\010", 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http.proto", &protobuf_RegisterTypes);
  HttpAuthToken::default_instance_ = new HttpAuthToken();
  HttpRegisterUri::default_instance_ = new HttpRegisterUri();
  SubHttpPostData::default_instance_ = new SubHttpPostData();
  HttpRequest::default_instance_ = new HttpRequest();
  SubHttpHeader::default_instance_ = new SubHttpHeader();
  HttpResponse::default_instance_ = new HttpResponse();
  HttpAuthToken::default_instance_->InitAsDefaultInstance();
  HttpRegisterUri::default_instance_->InitAsDefaultInstance();
  SubHttpPostData::default_instance_->InitAsDefaultInstance();
  HttpRequest::default_instance_->InitAsDefaultInstance();
  SubHttpHeader::default_instance_->InitAsDefaultInstance();
  HttpResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_http_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_http_2eproto {
  StaticDescriptorInitializer_http_2eproto() {
    protobuf_AddDesc_http_2eproto();
  }
} static_descriptor_initializer_http_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HttpAuthToken::kTokenFieldNumber;
#endif  // !_MSC_VER

HttpAuthToken::HttpAuthToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetExternalHttp.HttpAuthToken)
}

void HttpAuthToken::InitAsDefaultInstance() {
}

HttpAuthToken::HttpAuthToken(const HttpAuthToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetExternalHttp.HttpAuthToken)
}

void HttpAuthToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpAuthToken::~HttpAuthToken() {
  // @@protoc_insertion_point(destructor:KismetExternalHttp.HttpAuthToken)
  SharedDtor();
}

void HttpAuthToken::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void HttpAuthToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpAuthToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpAuthToken_descriptor_;
}

const HttpAuthToken& HttpAuthToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpAuthToken* HttpAuthToken::default_instance_ = NULL;

HttpAuthToken* HttpAuthToken::New() const {
  return new HttpAuthToken;
}

void HttpAuthToken::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpAuthToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetExternalHttp.HttpAuthToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetExternalHttp.HttpAuthToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetExternalHttp.HttpAuthToken)
  return false;
#undef DO_
}

void HttpAuthToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetExternalHttp.HttpAuthToken)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetExternalHttp.HttpAuthToken)
}

::google::protobuf::uint8* HttpAuthToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetExternalHttp.HttpAuthToken)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetExternalHttp.HttpAuthToken)
  return target;
}

int HttpAuthToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpAuthToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpAuthToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpAuthToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpAuthToken::MergeFrom(const HttpAuthToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpAuthToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpAuthToken::CopyFrom(const HttpAuthToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpAuthToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HttpAuthToken::Swap(HttpAuthToken* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpAuthToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpAuthToken_descriptor_;
  metadata.reflection = HttpAuthToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpRegisterUri::kUriFieldNumber;
const int HttpRegisterUri::kMethodFieldNumber;
const int HttpRegisterUri::kAuthRequiredFieldNumber;
#endif  // !_MSC_VER

HttpRegisterUri::HttpRegisterUri()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetExternalHttp.HttpRegisterUri)
}

void HttpRegisterUri::InitAsDefaultInstance() {
}

HttpRegisterUri::HttpRegisterUri(const HttpRegisterUri& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetExternalHttp.HttpRegisterUri)
}

void HttpRegisterUri::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_required_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRegisterUri::~HttpRegisterUri() {
  // @@protoc_insertion_point(destructor:KismetExternalHttp.HttpRegisterUri)
  SharedDtor();
}

void HttpRegisterUri::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

void HttpRegisterUri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRegisterUri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRegisterUri_descriptor_;
}

const HttpRegisterUri& HttpRegisterUri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpRegisterUri* HttpRegisterUri::default_instance_ = NULL;

HttpRegisterUri* HttpRegisterUri::New() const {
  return new HttpRegisterUri;
}

void HttpRegisterUri::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    auth_required_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpRegisterUri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetExternalHttp.HttpRegisterUri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }

      // required string method = 2;
      case 2: {
        if (tag == 18) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_auth_required;
        break;
      }

      // required bool auth_required = 3;
      case 3: {
        if (tag == 24) {
         parse_auth_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auth_required_)));
          set_has_auth_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetExternalHttp.HttpRegisterUri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetExternalHttp.HttpRegisterUri)
  return false;
#undef DO_
}

void HttpRegisterUri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetExternalHttp.HttpRegisterUri)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // required bool auth_required = 3;
  if (has_auth_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auth_required(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetExternalHttp.HttpRegisterUri)
}

::google::protobuf::uint8* HttpRegisterUri::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetExternalHttp.HttpRegisterUri)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  // required bool auth_required = 3;
  if (has_auth_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auth_required(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetExternalHttp.HttpRegisterUri)
  return target;
}

int HttpRegisterUri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // required string method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // required bool auth_required = 3;
    if (has_auth_required()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRegisterUri::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpRegisterUri* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpRegisterUri*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpRegisterUri::MergeFrom(const HttpRegisterUri& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_auth_required()) {
      set_auth_required(from.auth_required());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpRegisterUri::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRegisterUri::CopyFrom(const HttpRegisterUri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRegisterUri::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HttpRegisterUri::Swap(HttpRegisterUri* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(method_, other->method_);
    std::swap(auth_required_, other->auth_required_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpRegisterUri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRegisterUri_descriptor_;
  metadata.reflection = HttpRegisterUri_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubHttpPostData::kFieldFieldNumber;
const int SubHttpPostData::kContentFieldNumber;
#endif  // !_MSC_VER

SubHttpPostData::SubHttpPostData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetExternalHttp.SubHttpPostData)
}

void SubHttpPostData::InitAsDefaultInstance() {
}

SubHttpPostData::SubHttpPostData(const SubHttpPostData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetExternalHttp.SubHttpPostData)
}

void SubHttpPostData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubHttpPostData::~SubHttpPostData() {
  // @@protoc_insertion_point(destructor:KismetExternalHttp.SubHttpPostData)
  SharedDtor();
}

void SubHttpPostData::SharedDtor() {
  if (field_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SubHttpPostData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubHttpPostData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubHttpPostData_descriptor_;
}

const SubHttpPostData& SubHttpPostData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

SubHttpPostData* SubHttpPostData::default_instance_ = NULL;

SubHttpPostData* SubHttpPostData::New() const {
  return new SubHttpPostData;
}

void SubHttpPostData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubHttpPostData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetExternalHttp.SubHttpPostData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "field");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetExternalHttp.SubHttpPostData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetExternalHttp.SubHttpPostData)
  return false;
#undef DO_
}

void SubHttpPostData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetExternalHttp.SubHttpPostData)
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetExternalHttp.SubHttpPostData)
}

::google::protobuf::uint8* SubHttpPostData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetExternalHttp.SubHttpPostData)
  // required string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetExternalHttp.SubHttpPostData)
  return target;
}

int SubHttpPostData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubHttpPostData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubHttpPostData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubHttpPostData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubHttpPostData::MergeFrom(const SubHttpPostData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubHttpPostData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubHttpPostData::CopyFrom(const SubHttpPostData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubHttpPostData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubHttpPostData::Swap(SubHttpPostData* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubHttpPostData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubHttpPostData_descriptor_;
  metadata.reflection = SubHttpPostData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpRequest::kReqIdFieldNumber;
const int HttpRequest::kUriFieldNumber;
const int HttpRequest::kMethodFieldNumber;
const int HttpRequest::kPostDataFieldNumber;
#endif  // !_MSC_VER

HttpRequest::HttpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetExternalHttp.HttpRequest)
}

void HttpRequest::InitAsDefaultInstance() {
}

HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetExternalHttp.HttpRequest)
}

void HttpRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = 0u;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:KismetExternalHttp.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

void HttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRequest_descriptor_;
}

const HttpRequest& HttpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpRequest* HttpRequest::default_instance_ = NULL;

HttpRequest* HttpRequest::New() const {
  return new HttpRequest;
}

void HttpRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    req_id_ = 0u;
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
  }
  post_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetExternalHttp.HttpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // required string uri = 2;
      case 2: {
        if (tag == 18) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // required string method = 3;
      case 3: {
        if (tag == 26) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_post_data;
        break;
      }

      // repeated .KismetExternalHttp.SubHttpPostData post_data = 4;
      case 4: {
        if (tag == 34) {
         parse_post_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_post_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetExternalHttp.HttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetExternalHttp.HttpRequest)
  return false;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetExternalHttp.HttpRequest)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // required string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // repeated .KismetExternalHttp.SubHttpPostData post_data = 4;
  for (int i = 0; i < this->post_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->post_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetExternalHttp.HttpRequest)
}

::google::protobuf::uint8* HttpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetExternalHttp.HttpRequest)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // required string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // required string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // repeated .KismetExternalHttp.SubHttpPostData post_data = 4;
  for (int i = 0; i < this->post_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->post_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetExternalHttp.HttpRequest)
  return target;
}

int HttpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // required string uri = 2;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // required string method = 3;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

  }
  // repeated .KismetExternalHttp.SubHttpPostData post_data = 4;
  total_size += 1 * this->post_data_size();
  for (int i = 0; i < this->post_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  post_data_.MergeFrom(from.post_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->post_data())) return false;
  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(uri_, other->uri_);
    std::swap(method_, other->method_);
    post_data_.Swap(&other->post_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRequest_descriptor_;
  metadata.reflection = HttpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubHttpHeader::kHeaderFieldNumber;
const int SubHttpHeader::kContentFieldNumber;
#endif  // !_MSC_VER

SubHttpHeader::SubHttpHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetExternalHttp.SubHttpHeader)
}

void SubHttpHeader::InitAsDefaultInstance() {
}

SubHttpHeader::SubHttpHeader(const SubHttpHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetExternalHttp.SubHttpHeader)
}

void SubHttpHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubHttpHeader::~SubHttpHeader() {
  // @@protoc_insertion_point(destructor:KismetExternalHttp.SubHttpHeader)
  SharedDtor();
}

void SubHttpHeader::SharedDtor() {
  if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete header_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SubHttpHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubHttpHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubHttpHeader_descriptor_;
}

const SubHttpHeader& SubHttpHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

SubHttpHeader* SubHttpHeader::default_instance_ = NULL;

SubHttpHeader* SubHttpHeader::New() const {
  return new SubHttpHeader;
}

void SubHttpHeader::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        header_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubHttpHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetExternalHttp.SubHttpHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "header");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetExternalHttp.SubHttpHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetExternalHttp.SubHttpHeader)
  return false;
#undef DO_
}

void SubHttpHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetExternalHttp.SubHttpHeader)
  // required string header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetExternalHttp.SubHttpHeader)
}

::google::protobuf::uint8* SubHttpHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetExternalHttp.SubHttpHeader)
  // required string header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetExternalHttp.SubHttpHeader)
  return target;
}

int SubHttpHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubHttpHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubHttpHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubHttpHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubHttpHeader::MergeFrom(const SubHttpHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubHttpHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubHttpHeader::CopyFrom(const SubHttpHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubHttpHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubHttpHeader::Swap(SubHttpHeader* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubHttpHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubHttpHeader_descriptor_;
  metadata.reflection = SubHttpHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpResponse::kReqIdFieldNumber;
const int HttpResponse::kHeaderContentFieldNumber;
const int HttpResponse::kContentFieldNumber;
const int HttpResponse::kResultcodeFieldNumber;
const int HttpResponse::kCloseResponseFieldNumber;
#endif  // !_MSC_VER

HttpResponse::HttpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetExternalHttp.HttpResponse)
}

void HttpResponse::InitAsDefaultInstance() {
}

HttpResponse::HttpResponse(const HttpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetExternalHttp.HttpResponse)
}

void HttpResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultcode_ = 0u;
  close_response_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:KismetExternalHttp.HttpResponse)
  SharedDtor();
}

void HttpResponse::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void HttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpResponse_descriptor_;
}

const HttpResponse& HttpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpResponse* HttpResponse::default_instance_ = NULL;

HttpResponse* HttpResponse::New() const {
  return new HttpResponse;
}

void HttpResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HttpResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(req_id_, resultcode_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    close_response_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  header_content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetExternalHttp.HttpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header_content;
        break;
      }

      // repeated .KismetExternalHttp.SubHttpHeader header_content = 2;
      case 2: {
        if (tag == 18) {
         parse_header_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_header_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header_content;
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resultcode;
        break;
      }

      // optional uint32 resultcode = 4;
      case 4: {
        if (tag == 32) {
         parse_resultcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_close_response;
        break;
      }

      // optional bool close_response = 5;
      case 5: {
        if (tag == 40) {
         parse_close_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_response_)));
          set_has_close_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetExternalHttp.HttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetExternalHttp.HttpResponse)
  return false;
#undef DO_
}

void HttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetExternalHttp.HttpResponse)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // repeated .KismetExternalHttp.SubHttpHeader header_content = 2;
  for (int i = 0; i < this->header_content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header_content(i), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // optional uint32 resultcode = 4;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resultcode(), output);
  }

  // optional bool close_response = 5;
  if (has_close_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->close_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetExternalHttp.HttpResponse)
}

::google::protobuf::uint8* HttpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetExternalHttp.HttpResponse)
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // repeated .KismetExternalHttp.SubHttpHeader header_content = 2;
  for (int i = 0; i < this->header_content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header_content(i), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // optional uint32 resultcode = 4;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resultcode(), target);
  }

  // optional bool close_response = 5;
  if (has_close_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->close_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetExternalHttp.HttpResponse)
  return target;
}

int HttpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint32 resultcode = 4;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional bool close_response = 5;
    if (has_close_response()) {
      total_size += 1 + 1;
    }

  }
  // repeated .KismetExternalHttp.SubHttpHeader header_content = 2;
  total_size += 1 * this->header_content_size();
  for (int i = 0; i < this->header_content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header_content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  header_content_.MergeFrom(from.header_content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_close_response()) {
      set_close_response(from.close_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->header_content())) return false;
  return true;
}

void HttpResponse::Swap(HttpResponse* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    header_content_.Swap(&other->header_content_);
    std::swap(content_, other->content_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(close_response_, other->close_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpResponse_descriptor_;
  metadata.reflection = HttpResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KismetExternalHttp

// @@protoc_insertion_point(global_scope)
