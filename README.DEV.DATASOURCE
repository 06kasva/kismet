Data Sources

Data sources replace the PacketSource class in Kismet.

1.  Data sources

    Data sources are generic sources of data; data can come in the form of packets
    or complete parsed network objects.

    A data source consists of three main components:

      1. The data capture 'driver' code.  This can be in any language, and 
         communicates with the Kismet server code over a simple IPC protocol.
         This protocol may be piped over a network socket in the case of
         Kismet drones.

         Because each capture driver runs as its own binary, it is free to use
         external libraries, blocking IO loops, SUID-root functionality, etc.

      2. The Kismet 'glue' code.  This code is in C++, and is loaded as part
         of the Kismet plugin for the data capture source.  The glue code is
         responsible for defining the capture source itself, linking it to the
         driver binary, and processing any custom responses from the data source
         driver.

2.  Data source protocol

    The data source capture protocol is defined in simple_datasource_proto.h.

    Each communication to or from the capture driver consists of a high-level
    packet type (string) which then contains an arbitrary list of key:value
    pairs.

    Key value pairs may be simple (direct encoded value) or complex (a
    binary msgpack object for instance).

    In general, complex objects are passed as dictionaries with string keys.
    This allows multiple languages easy access, and greatly simplifies future
    compatibility when passing captures over remote transports which may have
    mismatched versions.

3.  Top level packet types

    Several top-level packet types and key types are pre-defined and will be
    automatically handled by the KisDataSource code, unless overridden.  
    Standard KV pairs are defined below.

    Drivers and the glue code may of course define any other types they wish.

    CLOSEDEVICE (Server->Driver)
        Close the current device

    CONFIGURE
        Configure an interface.

        KV Pairs:
            CHANSET
            CHANHOP

    DATA (Driver->Server)
        Actual capture data.  May be a packet, a decoded trackable entity, or
        other information.

        KV Pairs:
            MESSAGE
            SIGNAL
            PACKET
            GPS

    ERROR (Any)
        Error occurred somewhere.  Device is assumed closed.  IPC will be shut
        down.

        KV Pairs:
            MESSAGE

    STATUS 
        Generic status.  May contain additional information.

        KV Pairs:
            MESSAGE
            SUCCESS

    MESSAGE (Driver->Server)
        Message (info, warning, non-critical error)

        KV Pairs:
            MESSAGE

    OPENDEVICE (Server->Driver)
        Open a device.  This is used to open a device on a known driver, but
        may still return errors.

        KV Pairs:
            DEFINITION

    OPENRESP (Driver->Server)
        Response to opening a device

        KV Pairs:
            SUCCESS
            CHANNELS
            MESSAGE

    PROBEDEVICE (Server->Driver)
        Probe if the driver is able to handle a device.  This should generate
        a PROBERESP packet.

        KV Pairs:
            DEFINITION

    PROBERESP (Driver->Server)
        Response to probing a device.  

        KV Pairs:
            SUCCESS
            CHANNELS
            MESSAGE

4.  Standard KV Pairs

    Kismet will automatically handle standard KV pairs.  Arbitrary additional
    KV pairs can be defined, but must be handled by your glue code.

    CHANNELS
        Conveys the list of channels supported by this device, if there is a
        user presentable list.  Channels are free-form strings which may be
        unique to a phy, but should be human understandable.

        Content: Msgpack packed dictionary of parameters containing the 
                 following:

                 "channels":stringvec   Vector of strings defining channels.
                                        Complex channel definitions, which are
                                        phy-unique, are permitted.

        Example: 
            "channels": ["1","6","11","6HT20","11HT40-"]

        The CHANNELS pair is used to populate the available channels in
        a data source.

    GPS
        If a driver contains its own location information (or is running on 
        a remote system which has its own GPS), captured data may be tagged
        with GPS information.  This is not necessary when reporting data
        or device information with inherent location information (ie PPI+GPS
        packets or a complete device with location).

        Content: Msgpack packed dictionary containing the following values:
                 "lat":double         Latitude
                 "lon":double         Longitude
                 "alt":double         Altitude (in meters)
                 "speed":double       Speed (in kilometers per hour)
                 "heading":double     Heading (in decimal degrees)
                 "precision":double   Coordinate precision in meters (optional)
                 "fix":int32          Fix (2d or 3d)
                 "time":uint64        Time, in seconds, of coordinate
                 "type":string        GPS type, free-form string
                 "name":string        GPS name, free-form string

        The GPS pair is inserted into a kismet packetchain packet as a
        location record.

    MESSAGE
        MESSAGE KV pairs function as a direct link to the messagebus of the Kismet
        server.

        Content: Msgpack packed dictionary containing the following values:
                 "flags":uint32  Message type (from messagebus)
                 "msg":string    Message content

    PACKET
        PACKET contains a captured packet.  Datasource drivers which operate on
        a packet level should use this to inject packets into the Kismet
        packetchain for decoding by a DLT handler.

        Content: Msgpack packed dictionary containing the following values:
                 "tv_sec":uint64    Timestamp, seconds
                 "tv_usec":uint64   Timestamp, microseconds
                 "dlt":uint64       Data link type (per tcpdump)
                 "size":uint64      Size of packet
                 "packet":binary    Binary content of packet

        The PACKET pair is inserted into a Kismet packetchain packet as
        a datachunk record as a PACK_COMP_LINKFRAME.

    SIGNAL
        SIGNAL KV pairs can be added to data frames when the signal values are 
        not included in the existing data.  For example, a driver reporting 
        radiotap or ppi data would not need to include a SIGNAL value, however 
        a driver decoding a SDR signal which is able to obtain information would.

        Content: Msgpack packed dictionary containing the following values:
                 "signal_dbm":int32    Signal value in DBM (optional)
                 "noise_dbm":int32     Noise value in DBM (optional)
                 "signal_rssi":int32   Signal value in RSSI (optional)
                 "noise_rssi":int32    Noise value in RSSI (optional)

        The SIGNAL pair is inserted into a Kismet packetchain packet as
        a PACK_COMP_RADIODATA kis_layer1_radioinfo record.

    SUCCESS
        Simple boolean indicating success or failure

        Content: Single byte indicating boolean success or failure


