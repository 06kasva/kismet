/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kismet.proto */

#ifndef PROTOBUF_C_kismet_2eproto__INCLUDED
#define PROTOBUF_C_kismet_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Kismet__Command Kismet__Command;
typedef struct _Kismet__CmdPing Kismet__CmdPing;
typedef struct _Kismet__CmdPong Kismet__CmdPong;


/* --- enums --- */


/* --- messages --- */

/*
 * Overall command structure used for all Kismet helper binaries;  Each command
 * is an arbitrary string (command type), with a unique sequence number which is
 * used in responses to the command.
 * The payload of the command (content) is arbitrary, however Kismet uses 
 * Google Protobuf for all embedded commands, and it strongly recommended that
 * other implementations do as well.
 */
struct  _Kismet__Command
{
  ProtobufCMessage base;
  /*
   * Command type
   */
  char *command;
  /*
   * Unique command sequence number
   */
  uint32_t seqno;
  ProtobufCBinaryData content;
};
#define KISMET__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet__command__descriptor) \
    , NULL, 0, {0,NULL} }


/*
 * Request other end send a PONG (bidirectional)
 */
struct  _Kismet__CmdPing
{
  ProtobufCMessage base;
};
#define KISMET__CMD_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet__cmd_ping__descriptor) \
     }


/*
 * Respond to PING (bidirectional)
 */
struct  _Kismet__CmdPong
{
  ProtobufCMessage base;
};
#define KISMET__CMD_PONG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet__cmd_pong__descriptor) \
     }


/* Kismet__Command methods */
void   kismet__command__init
                     (Kismet__Command         *message);
size_t kismet__command__get_packed_size
                     (const Kismet__Command   *message);
size_t kismet__command__pack
                     (const Kismet__Command   *message,
                      uint8_t             *out);
size_t kismet__command__pack_to_buffer
                     (const Kismet__Command   *message,
                      ProtobufCBuffer     *buffer);
Kismet__Command *
       kismet__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet__command__free_unpacked
                     (Kismet__Command *message,
                      ProtobufCAllocator *allocator);
/* Kismet__CmdPing methods */
void   kismet__cmd_ping__init
                     (Kismet__CmdPing         *message);
size_t kismet__cmd_ping__get_packed_size
                     (const Kismet__CmdPing   *message);
size_t kismet__cmd_ping__pack
                     (const Kismet__CmdPing   *message,
                      uint8_t             *out);
size_t kismet__cmd_ping__pack_to_buffer
                     (const Kismet__CmdPing   *message,
                      ProtobufCBuffer     *buffer);
Kismet__CmdPing *
       kismet__cmd_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet__cmd_ping__free_unpacked
                     (Kismet__CmdPing *message,
                      ProtobufCAllocator *allocator);
/* Kismet__CmdPong methods */
void   kismet__cmd_pong__init
                     (Kismet__CmdPong         *message);
size_t kismet__cmd_pong__get_packed_size
                     (const Kismet__CmdPong   *message);
size_t kismet__cmd_pong__pack
                     (const Kismet__CmdPong   *message,
                      uint8_t             *out);
size_t kismet__cmd_pong__pack_to_buffer
                     (const Kismet__CmdPong   *message,
                      ProtobufCBuffer     *buffer);
Kismet__CmdPong *
       kismet__cmd_pong__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet__cmd_pong__free_unpacked
                     (Kismet__CmdPong *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Kismet__Command_Closure)
                 (const Kismet__Command *message,
                  void *closure_data);
typedef void (*Kismet__CmdPing_Closure)
                 (const Kismet__CmdPing *message,
                  void *closure_data);
typedef void (*Kismet__CmdPong_Closure)
                 (const Kismet__CmdPong *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kismet__command__descriptor;
extern const ProtobufCMessageDescriptor kismet__cmd_ping__descriptor;
extern const ProtobufCMessageDescriptor kismet__cmd_pong__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kismet_2eproto__INCLUDED */
