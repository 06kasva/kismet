include Makefile.inc

DEPEND		= .depend

CAPSOURCES = \
	packetsource_pcap.o packetsource_wext.o packetsource_bsdrt.o \
	packetsource_ipwlive.o packetsource_airpcap.o 

PSO	= util.o cygwin_utils.o globalregistry.o \
	ringbuf.o \
	ringbuf2.o ringbuf_handler.o \
	packet.o messagebus.o configfile.o getopt.o \
	filtercore.o ifcontrol.o iwcontrol.o madwifing_control.o nl80211_control.o \
	psutils.o ipc_remote.o battery.o kismet_json.o \
	netframework.o clinetframework.o tcpserver.o tcpclient.o \
	tcpclient2.o serialclient2.o pipeclient.o ipc_remote2.o \
	packetsourcetracker.o $(CAPSOURCES) \
	kis_datasource.o \
	kis_netframe.o \
	kis_net_microhttpd.o system_monitor.o kis_httpd_websession.o base64.o \
	gps_manager.o kis_gps.o gpsserial2.o gpsgpsd2.o gpsfake.o \
	packetchain.o \
	trackedelement.o entrytracker.o msgpack_adapter.o xmlserialize_adapter.o \
	plugintracker.o alertracker.o timetracker.o channeltracker2.o \
	devicetracker.o \
	kis_dlt.o kis_dlt_ppi.o kis_dlt_radiotap.o kis_dlt_prism2.o \
	phy_80211.o phy_80211_dissectors.o \
	kis_dissector_ipdata.o \
	manuf.o \
	dumpfile.o dumpfile_pcap.o dumpfile_gpsxml.o \
	dumpfile_tuntap.o dumpfile_netxml.o dumpfile_nettxt.o dumpfile_string.o \
	dumpfile_alert.o dumpfile_devicetracker.o \
	statealert.o \
	kismet_server.o

PS	= kismet_server

DRONEO = 
# DRONEO = util.o cygwin_utils.o globalregistry.o ringbuf.o \
# 		 packet.o messagebus.o configfile.o getopt.o \
# 		 ifcontrol.o iwcontrol.o madwifing_control.o nl80211_control.o $(OBJC_LINK) \
# 		 psutils.o ipc_remote.o soundcontrol.o kismet_json.o \
# 		 netframework.o clinetframework.o tcpserver.o tcpclient.o serialclient.o \
# 		 drone_kisnetframe.o kis_droneframe.o \
# 		 gpswrapper.o gpscore.o gpsdclient.o gpsserial.o gpsfixed.o \
# 		 packetchain.o \
# 		 $(CAPSOURCES) \
# 		 plugintracker.o packetsourcetracker.o timetracker.o devicetracker_drone.o \
# 		 dumpfile_drone.o \
# 		 kismet_drone.o

CSO = util.o cygwin_utils.o globalregistry.o ringbuf.o \
	packet.o messagebus.o configfile.o getopt.o \
	filtercore.o ifcontrol.o iwcontrol.o madwifing_control.o nl80211_control.o \
	psutils.o ipc_remote.o netframework.o clinetframework.o tcpserver.o tcpclient.o \
	timetracker.o drone_kisnetframe.o \
	packetsourcetracker.o packetchain.o $(CAPSOURCES) \
	dumpfile.o dumpfile_tuntap.o \
	kis_net_microhttpd.o base64.o entrytracker.o trackedelement.o msgpack_adapter.o \
	kismet_capture.o
CS	= kismet_capture

DRONE = kismet_drone

NCO = 
# NCO	= util.o ringbuf.o globalregistry.o messagebus.o configfile.o getopt.o \
# 	  soundcontrol.o timetracker.o ipc_remote.o \
# 	  trackedelement.o entrytracker.o \
# 	  clinetframework.o tcpclient.o popenclient.o kis_clinetframe.o \
# 	  text_cliframe.o \
# 	  kis_panel_widgets.o kis_panel_windows.o kis_panel_details.o \
# 	  kis_panel_info.o kis_panel_preferences.o \
# 	  kis_panel_frontend.o \
# 	  kis_client_devicetracker.o kis_client_phy80211.o \
# 	  kis_panel_device.o \
# 	  kismet_client.o
NC	= kismet_client

# HOPPERO = util.o configfile.o getopt.o kismet_hopper.o
# HOPPER = kismet_hopper

BUILDCLIENT=@wantclient@

ALL	= Makefile $(DEPEND) $(PS) $(CS) #$(DRONE)
INSTBINS = $(PS) $(CS) #$(DRONE)
#ifeq ($(BUILDCLIENT), yes)
#ALL += $(NC)
#INSTBINS += $(NC)
#endif

all:	$(ALL)

all-with-plugins:
	@make plugins-clean
	@make all
	@make plugins

$(PS):	$(PSO) $(CS)
	$(LD) $(LDFLAGS) -o $(PS) $(PSO) $(LIBS) $(CXXLIBS) $(PCAPLNK) $(KSLIBS)

$(CS):	$(CSO)
	$(LD) $(LDFLAGS) -o $(CS) $(CSO) $(LIBS) $(CXXLIBS) $(PCAPLNK) $(CAPLIBS) $(KSLIBS)

$(DRONE):	$(DRONEO) $(CS)
	$(LD) $(LDFLAGS) -o $(DRONE) $(DRONEO) $(LIBS) $(CXXLIBS) $(PCAPLNK) $(KSLIBS)

$(NC):	$(NCO)
	$(LD) $(LDFLAGS) -o $(NC) $(NCO) $(CXXLIBS) $(CLIENTLIBS)

#$(HOPPER):	$(HOPPERO)
#	$(LD) $(LDFLAGS) -o $(HOPPER) $(HOPPERO)

Makefile: Makefile.in configure
	@-echo "'Makefile.in' or 'configure' are more current than this Makefile.  You should re-run 'configure'."

binsuidinstall: $(CS)
	$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CS) $(BIN)/$(CS); 

droneinstall: $(INSTBINS)
	mkdir -p $(ETC)
	mkdir -p $(BIN)

	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(DRONE) $(BIN)/$(DRONE);

	mkdir -p $(MAN)/man1
	$(INSTALL) -o $(INSTUSR) -g $(MANGRP) -m 644 man/kismet_drone.1 $(MAN)/man1/kismet_drone.1
	mkdir -p $(MAN)/man5
	$(INSTALL) -o $(INSTUSR) -g $(MANGRP) -m 644 man/kismet_drone.conf.5 $(MAN)/man5/kismet_drone.conf.5

commoninstall: $(INSTBINS)
	mkdir -p $(ETC)
	mkdir -p $(BIN)

	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(PS) $(BIN)/$(PS); 

	mkdir -p $(MAN)/man1
	$(INSTALL) -o $(INSTUSR) -g $(MANGRP) -m 644 man/kismet.1 $(MAN)/man1/kismet.1

	mkdir -p $(MAN)/man5
	$(INSTALL) -o $(INSTUSR) -g $(MANGRP) -m 644 man/kismet.conf.5 $(MAN)/man5/kismet.conf.5

	mkdir -p $(WAV)
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 wav/new.wav $(WAV)/new.wav
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 wav/packet.wav $(WAV)/packet.wav
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 wav/alert.wav $(WAV)/alert.wav
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 wav/gpslost.wav $(WAV)/gpslost.wav
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 wav/gpslock.wav $(WAV)/gpslock.wav

	mkdir -p $(HTTPD)
	cp -r http_data/* $(HTTPD)

suidinstall: $(CS)
	-groupadd -f $(SUIDGROUP)
	$(MAKE) -e commoninstall
	$(MAKE) -e binsuidinstall
	@if test -f $(ETC)/kismet.conf; then \
		echo "$(ETC)/kismet.conf already installed, not replacing it.  HOWEVER"; \
		echo "if there have been any changes to the base config you will need"; \
		echo "to add them to your config file."; \
    else \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet.conf $(ETC)/kismet.conf;  \
		echo install -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet.conf $(ETC)/kismet.conf;  \
		echo "Installed config into $(ETC)/kismet.conf."; \
	fi
	@if test -f $(ETC)/kismet_httpd.conf; then \
		echo "$(ETC)/kismet_http.conf already installed, not replacing it.  HOWEVER"; \
		echo "if there have been any changes to the base config you will need"; \
		echo "to add them to your config file."; \
    else \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet_httpd.conf $(ETC)/kismet_httpd.conf;  \
		echo install -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet_httpd.conf $(ETC)/kismet_httpd.conf;  \
		echo "Installed httpd config into $(ETC)/kismet_httpd.conf."; \
	fi

	@echo "Installed kismet into $(BIN)/."
	@echo "If you have not done so already, read the README file and the FAQ file.  Additional"
	@echo "documentation is in the docs/ directory.  You MUST edit $(ETC)/kismet.conf "
	@echo "and configure Kismet for your system, or it will NOT run properly!"
	@echo
	@echo "Kismet has been installed with a SUID ROOT CAPTURE HELPER executeable by "
	@echo "users in the group '" $(SUIDGROUP) "'.  This WILL ALLOW USERS IN THIS GROUP "
	@echo "TO ALTER YOUR NETWORK INTERACE STATES, but is more secure than running "
	@echo "all of Kismet as root.  ONLY users in this group will be able to "
	@echo "run Kismet and capture from physical network devices."

install: $(INSTBINS)
	$(MAKE) -e commoninstall
	@if test -f $(ETC)/kismet.conf; then \
		echo "$(ETC)/kismet.conf already installed, not replacing it.  HOWEVER"; \
		echo "if there have been any changes to the base config you will need"; \
		echo "to add them to your config file."; \
    else \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet.conf $(ETC)/kismet.conf;  \
		echo install -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet.conf $(ETC)/kismet.conf;  \
		echo "Installed config into $(ETC)/kismet.conf."; \
	fi
	@if test -f $(ETC)/kismet_httpd.conf; then \
		echo "$(ETC)/kismet_http.conf already installed, not replacing it.  HOWEVER"; \
		echo "if there have been any changes to the base config you will need"; \
		echo "to add them to your config file."; \
    else \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet_httpd.conf $(ETC)/kismet_httpd.conf;  \
		echo install -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/kismet_httpd.conf $(ETC)/kismet_httpd.conf;  \
		echo "Installed config into $(ETC)/kismet_httpd.conf."; \
	fi

	@echo "Installed kismet into $(BIN)/."
	@echo "If you have not done so already, read the README file and the FAQ file.  Additional"
	@echo "documentation is in the docs/ directory.  You MUST edit $(ETC)/kismet.conf "
	@echo "and configure Kismet for your system, or it will NOT run properly!"
	@echo
	@echo "Kismet has NOT been installed suid-root.  This means you will need to start "
	@echo "it as root.  If you add your user to the $(SUIDGROUP) group and install "
	@echo "Kismet with 'make suidinstall', users in that group will be able to "
	@echo "run Kismet directly."
	@echo
	@echo "READ THE KISMET DOCUMENTATION ABOUT THE KISMET SECURITY MODEL TO"
	@echo "DECIDE IF YOU WANT TO INSTALL IT SUID-ROOT"
	@echo
	@echo "It is generally  more secure to install Kismet with the suid-root helper "
	@echo "option."
                
rpm:
	@echo "Disabling SUID installation (RPM will handle setting the SUID bit.)"
	@( export SUID="no"; export INSTGRP=`id -g`; export MANGRP=`id -g`; \
		export INSTUSR=`id -u`; $(MAKE) -e install )

clean:
	@-rm -f *.o *.mo
	@-$(MAKE) all-plugins-clean
	@-rm -f $(PS)
	@-rm -f $(CS)
	@-rm -f $(DRONE)
	@-rm -f $(NC)

distclean:
	@-$(MAKE) clean
	@-$(MAKE) all-plugins-clean
	@-rm -f *~
	@-rm -f $(DEPEND)
	@-rm -f config.status
	@-rm -f config.h
	@-rm -f config.log
	@-rm -rf packaging/ipkg/usr 
	@-rm -rf packaging/pak
	@-rm -rf *.ipk
	@-rm -f scripts/kismet
	@-rm -f Makefile

dep:
	@$(MAKE) depend

depend: Makefile
	@$(MAKE) $(DEPEND)

$(DEPEND): Makefile
	@-rm -f $(DEPEND)
	@echo "Generating dependencies... "
	@echo > $(DEPEND)
	@$(CXX) $(CFLAGS) -MM \
		`echo $(PSO) $(DRONEO) | \
		sed -e "s/\.o/\.cc/g" | sed -e "s/\.mo/\.m/g"` >> $(DEPEND)

plugins: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do echo "PLUGIN: $$x"; ( cd "$$x"; make; ); done )

restricted-plugins: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do echo "PLUGIN: $$x"; ( cd "$$x"; make; ); done )

plugins-clean:
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do echo "PLUGIN-CLEAN: $$x"; ( cd "$$x"; make clean; ); done )

restricted-plugins-clean:
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do echo "PLUGIN-CLEAN: $$x"; ( cd "$$x"; make clean; ); done )

plugins-install: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do echo "PLUGIN-INSTALL: $$x"; ( cd "$$x"; make install; ); done )

restricted-plugins-install: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do echo "PLUGIN-INSTALL: $$x"; ( cd "$$x"; make install; ); done )

plugins-userinstall: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do echo "PLUGIN-USERINSTALL: $$x"; ( cd "$$x"; make userinstall; ); done )

restricted-plugins-userinstall: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do echo "PLUGIN-USERINSTALL: $$x"; ( cd "$$x"; make userinstall; ); done )

all-plugins: Makefile
	@$(MAKE) plugins
	@$(MAKE) restricted-plugins

all-plugins-install: Makefile
	@$(MAKE) plugins-install
	@$(MAKE) restricted-plugins-install

all-plugins-userinstall: Makefile
	@$(MAKE) plugins-userinstall
	@$(MAKE) restricted-plugins-userinstall

all-plugins-clean: Makefile
	@$(MAKE) plugins-clean
	@$(MAKE) restricted-plugins-clean

include $(DEPEND)

.c.o:	$(DEPEND)
	$(CC) $(CFLAGS) -c $*.c -o $@ 

.cc.o:	$(DEPEND)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $*.cc -o $@ 

.m.mo:	$(DEPEND)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $*.m -o $@ 
	

.SUFFIXES: .c .cc .o .m .mo
