REST / HTTP protocol

    Kismet uses a REST-like protocol for returning internal data structures and 
    accepting commands.  Data is fetched via HTTP GET, and commands are sent via
    HTTP POST.

Logins and Sessions

    Kismet uses session cookies to maintain a login session.  Typically GET
    requests which do not reveal sensitive configuration data do not require
    a login, while POST commands which change configuration and GET commands
    which return sensitive configuration values do.

    Sessions are created via HTTP Basic Auth to the 
        /session/create_session
    endpoint and are stored in the KISMET session cookie.

    Endpoints which require authentication but do not have a valid session
    should return HTTP 401 "Unauthorized".

Commands

    Commands are sent via HTTP POST.  A command should be a base64-encoded
    msgpack string dictionary of values, send under the 'msgpack' field.  
    For instance a command created in python might look like:

    # Build the dictionary
    cmd = {
            "cmd": "lock",
            "channel": "6",
            "uuid": "aaa:bbb:cc:dd:ee:ff:gg"
            }
    # Encode msgpack binary
    cmdbin = msgpack.packb(cmd)

    # Encode as base64
    cmdencoded = base64.b64encode(cmdbin)

    # Set up the POST dictionary
    post = {
            "msgpack": cmdencoded
            }

    Commands are encoded as dictionaries to allow flexibility across calling
    platforms, as well as future compatibility between client and server code.
    Adding additional values to a command dictionary should not cause an older
    server to malfunction.

    Dictionary key values are case sensitive.

REST endpoints

    For packing format / msgpack use, see SERIALIZATION
    
    System status:
    
        /system/status.msgpack
            msgpack packed record of system status (battery, etc)
        /system/status.json
            json packed record of system status (battery, etc)
    
        /system/tracked_fields.html
            Human-readable table of all registered field names, types, and
            descriptions
    
    Devices:
    
        /devices/all_devices.msgpack
            msgpack packed vector of device summary records
        /devices/all_devices.json
            json list of device summary records
        /devices/all_devices_dt.json
            json list of device summary records, wrapped in an aaData dictionary
            key for supporting the jquery datatables API

        /devices/last-time/[ts]/devices.json
            json dictionary containing list of devices modified since [ts] 
            timestamp (unix time_t value) and a flag if a full device refresh
            should be performed due to deleted devices or other structural 
            changes
        /devices/last-time/[ts]/devices.msgpack
            msgpack dictionary containing list of devices modified since [ts] 
            timestamp (unix time_t value) and a flag if a full device refresh
            should be performed due to deleted devices or other structural 
            changes
    
        /devices/by-key/DEVICE_KEY.msgpack
            packed trackercomponent of DEVICE (where DEVICE_KEY is the device 
            key from the summary)
    
        /devices/by-key/DEVICE_KEY.msgpack/device/record/path
            packed trackercomponent of DEVICE, selected by supplied path.
            
            Example:
            /devices/KEY.msgpack/dot11.device/dot11.device.last_beaconed_ssid
    
            would yield the last_beaconed_ssid record ONLY, using normal msgpack
            serialization, or:
                [0, "some string"]

        /devices/by-mac/DEVICE_MAC.msgpack
            packed vector of devices matching the MAC address across all PHYs.
            It is possible that there is an overlap between PHYs, the caller
            is responsible for comparing the phy types and confirming they
            receive the expected device.

    
    Phy handling:
    
        /phy/all_phys.msgpack
            msgpack packed vector of phy descriptors and counts
        /phy/all_phys.json
            json vector of phy descriptors and counts
        /phy/all_phys_dt.json
            json vector of phy descriptors and counts, wrapped in an aaData
            dictionary key for supporting the jquery datatables API
    
    Sessions/Logins:
    
        /session/create_session
            Prompt for basic auth & login
    
        /session/check-session
            See if a session is valid
    
    Channel usage:
    
        /channels/channels.msgpack
            Channel and frequency usage

    Data Sources (new):
        /datasource/all_sources.msgpack
            Return a msgpack vector of all data sources.  Data sources are the new
            packet/device/catpure source mechanism.

        /datasource/supported_sources.msgpack
            Return a msgpack vector of all possible datasource types

        /datasource/error_sources.msgpack
            Return a msgpack vector of all defined sources which are currently
            in an error state
    
    Packet Sources (old):
    
        /packetsource/all_sources.msgpack
            Return all sources under the (soon to be deprecated) PacketSource API.
            A similar API will be provided for the new datasource code.
    
        /packetsource/config/channel.cmd
            LOGIN REQUIRED.  Processes channel commands.

            The packetsource channel command set is currently limited to basic
            functions, as it will be replaced by a more featureful and generic
            datasource API.
            
            Expects a command dictionary including:

            cmd         lock|hop        string  Lock to a channel or hop
            uuid        device uuid     string  Packetsource UUID 
            channel     channel#        string  Channel to lock to (optional)

            Examples:

            To lock a source to channel 6 only:
            {
                "cmd": "lock",
                "uuid": "e92e066a-0d50-11e6-a771-08076944c403",
                "channel": "6"
            }

            To return a source to standard hopping:
            {
                "cmd": "hop",
                "uuid": "e92e066a-0d50-11e6-a771-08076944c403"
            }

        /packetsource/config/add_source.cmd
            LOGIN REQUIRED.  Add a new source.

            Adds and starts a new (old-style) packetsource.  Takes a standard
            packetsource definition.

            Expects a command dictionary including:

            source      source def      string  Source definition

            Examples:

            {
                "source": "wlan0:validatefcs=true"
            }

    GPS:

        /gps/web/update.cmd
            LOGIN REQUIRED.  Set GPS location from the browser.

            This API allows browser clients, and browser-like clients, to set
            GPS over POST.

            Requires the user enabled the 'web' gps driver via kismet.conf,
                gps=web:name=webgps

            Expects a command dictionary including:

            lat         latitude        double  Latitude
            lon         longitude       double  Longitude
            alt         altitude (m)    double  Altitude in meters (optional)
            spd         speed (kph)     double  Speed in kilometers per hour
                                                (optional)

    Phy-Specific:

        /phy/phy80211/ssid_regex.cmd
            LOGIN *NOT* REQUIRED.  Retrieve a packed vector of device summaries
            based on supplied PCRE-compatible regex terms.

            This API expects PCRE matches to be delivered over POST.

            Multiple PCRE terms may be provided.  The response will include
            devices which match ANY of the supplied search terms.

            Expects a dictionary including:

            essid       [1, 2, 3]       list    List of PCRE terms

            The essid PCRE search must always be a list, even if a single
            search term is defined.

            For example:
            {
                "essid": ["^linksys$"]
            }

            To match on multiple PCRE terms:
            {
                "essid": ["^linksys$", ".*foo$"]
            }

