/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kismet.proto */

#ifndef PROTOBUF_C_kismet_2eproto__INCLUDED
#define PROTOBUF_C_kismet_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _KismetExternal__Command KismetExternal__Command;
typedef struct _KismetExternal__HttpRegisterUri KismetExternal__HttpRegisterUri;
typedef struct _KismetExternal__HttpRequest KismetExternal__HttpRequest;
typedef struct _KismetExternal__HttpRequest__PostDataEntry KismetExternal__HttpRequest__PostDataEntry;
typedef struct _KismetExternal__HttpResponse KismetExternal__HttpResponse;
typedef struct _KismetExternal__MsgbusMessage KismetExternal__MsgbusMessage;
typedef struct _KismetExternal__Ping KismetExternal__Ping;
typedef struct _KismetExternal__Pong KismetExternal__Pong;
typedef struct _KismetExternal__Shutdown KismetExternal__Shutdown;
typedef struct _KismetExternal__SystemRegister KismetExternal__SystemRegister;


/* --- enums --- */

/*
 * Match the Kismet messagebus types
 */
typedef enum _KismetExternal__MsgbusMessage__MessageType {
  KISMET_EXTERNAL__MSGBUS_MESSAGE__MESSAGE_TYPE__DEBUG = 1,
  KISMET_EXTERNAL__MSGBUS_MESSAGE__MESSAGE_TYPE__INFO = 2,
  KISMET_EXTERNAL__MSGBUS_MESSAGE__MESSAGE_TYPE__ERROR = 4,
  KISMET_EXTERNAL__MSGBUS_MESSAGE__MESSAGE_TYPE__ALERT = 8,
  KISMET_EXTERNAL__MSGBUS_MESSAGE__MESSAGE_TYPE__FATAL = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KISMET_EXTERNAL__MSGBUS_MESSAGE__MESSAGE_TYPE)
} KismetExternal__MsgbusMessage__MessageType;

/* --- messages --- */

struct  _KismetExternal__Command
{
  ProtobufCMessage base;
  /*
   * Command type
   */
  char *command;
  /*
   * Unique command sequence number
   */
  uint32_t seqno;
  ProtobufCBinaryData content;
};
#define KISMET_EXTERNAL__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__command__descriptor) \
    , NULL, 0, {0,NULL} }


/*
 * Define an endpoint (Helper->Kismet)
 * Registers a HTTP endpoint; requests to this endpoint will be sent to the
 * helper via the HttpRequest message, which will, in turn, expect replies
 * via the HttpResponse message.
 */
struct  _KismetExternal__HttpRegisterUri
{
  ProtobufCMessage base;
  /*
   * Full URI, including file type; Helpers cannot take advantage of the Kismet
   * multi-serialization types so they must define a URI for each type
   */
  char *uri;
  /*
   * Method; ie GET or POST; a URI can only implement a single method and
   * must register multiple URIs for multiple methods.
   */
  char *method;
};
#define KISMET_EXTERNAL__HTTP_REGISTER_URI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__http_register_uri__descriptor) \
    , NULL, NULL }


struct  _KismetExternal__HttpRequest__PostDataEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define KISMET_EXTERNAL__HTTP_REQUEST__POST_DATA_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__http_request__post_data_entry__descriptor) \
    , NULL, NULL }


/*
 * Handle an incoming HTTP request (Kismet->Helper)
 */
struct  _KismetExternal__HttpRequest
{
  ProtobufCMessage base;
  /*
   * Unique ID of request, must be returned in the HttpResponse
   */
  uint32_t req_id;
  /*
   * Full URI of request
   */
  char *uri;
  /*
   * Method
   */
  char *method;
  /*
   * If post, a map of post variables
   */
  size_t n_post_data;
  KismetExternal__HttpRequest__PostDataEntry **post_data;
};
#define KISMET_EXTERNAL__HTTP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__http_request__descriptor) \
    , 0, NULL, NULL, 0,NULL }


/*
 * Respond to HTTP data (Helper->Kismet)
 */
struct  _KismetExternal__HttpResponse
{
  ProtobufCMessage base;
  /*
   * Unique ID of request we're responding to
   */
  uint32_t req_id;
  /*
   * Content being sent, if any
   */
  protobuf_c_boolean has_content;
  ProtobufCBinaryData content;
  /*
   * Result code, if we're concluding this connection
   */
  protobuf_c_boolean has_resultcode;
  uint32_t resultcode;
  /*
   * Is this the end of this connection?
   */
  protobuf_c_boolean has_close_response;
  protobuf_c_boolean close_response;
};
#define KISMET_EXTERNAL__HTTP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__http_response__descriptor) \
    , 0, 0,{0,NULL}, 0,0, 0,0 }


/*
 * User-readable message (Helper->Kismet)
 */
struct  _KismetExternal__MsgbusMessage
{
  ProtobufCMessage base;
  KismetExternal__MsgbusMessage__MessageType msgtype;
  char *msgtext;
};
#define KISMET_EXTERNAL__MSGBUS_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__msgbus_message__descriptor) \
    , 0, NULL }


/*
 * Request other end send a PONG (bidirectional)
 */
struct  _KismetExternal__Ping
{
  ProtobufCMessage base;
};
#define KISMET_EXTERNAL__PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__ping__descriptor) \
     }


/*
 * Respond to PING (bidirectional)
 */
struct  _KismetExternal__Pong
{
  ProtobufCMessage base;
  /*
   * PING sequence that reached out to us
   */
  uint32_t ping_seqno;
};
#define KISMET_EXTERNAL__PONG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__pong__descriptor) \
    , 0 }


/*
 * Shut down the connection (bidirectional)
 */
struct  _KismetExternal__Shutdown
{
  ProtobufCMessage base;
  char *reason;
};
#define KISMET_EXTERNAL__SHUTDOWN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__shutdown__descriptor) \
    , NULL }


/*
 * Register helper; this helps us identify what we're talking to if we need to
 * dispatch the helpers / multiplex over a single TCP socket for remote systems
 * (Helper->Kismet)
 */
struct  _KismetExternal__SystemRegister
{
  ProtobufCMessage base;
  char *subsystem;
};
#define KISMET_EXTERNAL__SYSTEM_REGISTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_external__system_register__descriptor) \
    , NULL }


/* KismetExternal__Command methods */
void   kismet_external__command__init
                     (KismetExternal__Command         *message);
size_t kismet_external__command__get_packed_size
                     (const KismetExternal__Command   *message);
size_t kismet_external__command__pack
                     (const KismetExternal__Command   *message,
                      uint8_t             *out);
size_t kismet_external__command__pack_to_buffer
                     (const KismetExternal__Command   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__Command *
       kismet_external__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__command__free_unpacked
                     (KismetExternal__Command *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__HttpRegisterUri methods */
void   kismet_external__http_register_uri__init
                     (KismetExternal__HttpRegisterUri         *message);
size_t kismet_external__http_register_uri__get_packed_size
                     (const KismetExternal__HttpRegisterUri   *message);
size_t kismet_external__http_register_uri__pack
                     (const KismetExternal__HttpRegisterUri   *message,
                      uint8_t             *out);
size_t kismet_external__http_register_uri__pack_to_buffer
                     (const KismetExternal__HttpRegisterUri   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__HttpRegisterUri *
       kismet_external__http_register_uri__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__http_register_uri__free_unpacked
                     (KismetExternal__HttpRegisterUri *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__HttpRequest__PostDataEntry methods */
void   kismet_external__http_request__post_data_entry__init
                     (KismetExternal__HttpRequest__PostDataEntry         *message);
/* KismetExternal__HttpRequest methods */
void   kismet_external__http_request__init
                     (KismetExternal__HttpRequest         *message);
size_t kismet_external__http_request__get_packed_size
                     (const KismetExternal__HttpRequest   *message);
size_t kismet_external__http_request__pack
                     (const KismetExternal__HttpRequest   *message,
                      uint8_t             *out);
size_t kismet_external__http_request__pack_to_buffer
                     (const KismetExternal__HttpRequest   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__HttpRequest *
       kismet_external__http_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__http_request__free_unpacked
                     (KismetExternal__HttpRequest *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__HttpResponse methods */
void   kismet_external__http_response__init
                     (KismetExternal__HttpResponse         *message);
size_t kismet_external__http_response__get_packed_size
                     (const KismetExternal__HttpResponse   *message);
size_t kismet_external__http_response__pack
                     (const KismetExternal__HttpResponse   *message,
                      uint8_t             *out);
size_t kismet_external__http_response__pack_to_buffer
                     (const KismetExternal__HttpResponse   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__HttpResponse *
       kismet_external__http_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__http_response__free_unpacked
                     (KismetExternal__HttpResponse *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__MsgbusMessage methods */
void   kismet_external__msgbus_message__init
                     (KismetExternal__MsgbusMessage         *message);
size_t kismet_external__msgbus_message__get_packed_size
                     (const KismetExternal__MsgbusMessage   *message);
size_t kismet_external__msgbus_message__pack
                     (const KismetExternal__MsgbusMessage   *message,
                      uint8_t             *out);
size_t kismet_external__msgbus_message__pack_to_buffer
                     (const KismetExternal__MsgbusMessage   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__MsgbusMessage *
       kismet_external__msgbus_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__msgbus_message__free_unpacked
                     (KismetExternal__MsgbusMessage *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__Ping methods */
void   kismet_external__ping__init
                     (KismetExternal__Ping         *message);
size_t kismet_external__ping__get_packed_size
                     (const KismetExternal__Ping   *message);
size_t kismet_external__ping__pack
                     (const KismetExternal__Ping   *message,
                      uint8_t             *out);
size_t kismet_external__ping__pack_to_buffer
                     (const KismetExternal__Ping   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__Ping *
       kismet_external__ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__ping__free_unpacked
                     (KismetExternal__Ping *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__Pong methods */
void   kismet_external__pong__init
                     (KismetExternal__Pong         *message);
size_t kismet_external__pong__get_packed_size
                     (const KismetExternal__Pong   *message);
size_t kismet_external__pong__pack
                     (const KismetExternal__Pong   *message,
                      uint8_t             *out);
size_t kismet_external__pong__pack_to_buffer
                     (const KismetExternal__Pong   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__Pong *
       kismet_external__pong__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__pong__free_unpacked
                     (KismetExternal__Pong *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__Shutdown methods */
void   kismet_external__shutdown__init
                     (KismetExternal__Shutdown         *message);
size_t kismet_external__shutdown__get_packed_size
                     (const KismetExternal__Shutdown   *message);
size_t kismet_external__shutdown__pack
                     (const KismetExternal__Shutdown   *message,
                      uint8_t             *out);
size_t kismet_external__shutdown__pack_to_buffer
                     (const KismetExternal__Shutdown   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__Shutdown *
       kismet_external__shutdown__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__shutdown__free_unpacked
                     (KismetExternal__Shutdown *message,
                      ProtobufCAllocator *allocator);
/* KismetExternal__SystemRegister methods */
void   kismet_external__system_register__init
                     (KismetExternal__SystemRegister         *message);
size_t kismet_external__system_register__get_packed_size
                     (const KismetExternal__SystemRegister   *message);
size_t kismet_external__system_register__pack
                     (const KismetExternal__SystemRegister   *message,
                      uint8_t             *out);
size_t kismet_external__system_register__pack_to_buffer
                     (const KismetExternal__SystemRegister   *message,
                      ProtobufCBuffer     *buffer);
KismetExternal__SystemRegister *
       kismet_external__system_register__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_external__system_register__free_unpacked
                     (KismetExternal__SystemRegister *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*KismetExternal__Command_Closure)
                 (const KismetExternal__Command *message,
                  void *closure_data);
typedef void (*KismetExternal__HttpRegisterUri_Closure)
                 (const KismetExternal__HttpRegisterUri *message,
                  void *closure_data);
typedef void (*KismetExternal__HttpRequest__PostDataEntry_Closure)
                 (const KismetExternal__HttpRequest__PostDataEntry *message,
                  void *closure_data);
typedef void (*KismetExternal__HttpRequest_Closure)
                 (const KismetExternal__HttpRequest *message,
                  void *closure_data);
typedef void (*KismetExternal__HttpResponse_Closure)
                 (const KismetExternal__HttpResponse *message,
                  void *closure_data);
typedef void (*KismetExternal__MsgbusMessage_Closure)
                 (const KismetExternal__MsgbusMessage *message,
                  void *closure_data);
typedef void (*KismetExternal__Ping_Closure)
                 (const KismetExternal__Ping *message,
                  void *closure_data);
typedef void (*KismetExternal__Pong_Closure)
                 (const KismetExternal__Pong *message,
                  void *closure_data);
typedef void (*KismetExternal__Shutdown_Closure)
                 (const KismetExternal__Shutdown *message,
                  void *closure_data);
typedef void (*KismetExternal__SystemRegister_Closure)
                 (const KismetExternal__SystemRegister *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kismet_external__command__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__http_register_uri__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__http_request__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__http_request__post_data_entry__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__http_response__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__msgbus_message__descriptor;
extern const ProtobufCEnumDescriptor    kismet_external__msgbus_message__message_type__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__ping__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__pong__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__shutdown__descriptor;
extern const ProtobufCMessageDescriptor kismet_external__system_register__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kismet_2eproto__INCLUDED */
