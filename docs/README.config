Configuration

* Main Configuration 
Kismet is controlled by the system-wide config file in 
/usr/local/etc/kismet.conf (by default).  This file is a fairly straightforward
directive=format layout.  

Most of these values can be overridden using the command line for special 
cases.  "kismet --help" will show the command line options available.

"servername" (string) Name of this Kismet server.  Purely informational for 
             multiple-server installations.

"suiduser" (string) User to switch privileges to after binding to the capture.

"macfilter" (string) Comma-seperated list of MAC addresses to filter.

"tcpport" (int) Port to serve GUI data
"allowedhosts" (string) Comma-seperated list of IP's allowed to connect.
"maxclient" (int) Maximum number of simultaneously connected clients

"source" (string) Comma-seperated packet source (cardtype,interface,name)
  Card type - Specifies the type of device.  It can be one of:
      cisco         - Cisco card with Linux Kernel drivers 
      cisco_cvs     - Cisco card with CVS Linux drivers
      cisco_bsd     - Cisco on *BSD
      prism2        - Prism2 using wlan-ng drivers with pcap support (all 
                       current versions support pcap)
      prism2_hostap - Prism2 using hostap drivers
      prism2_legacy - Prism2 using wlan-ng drivers without pcap support (0.1.9)
      prism2_bsd    - Prism2 on *BSD
      orinoco       - Orinoco cards using Snax's patched driers
      generic       - Generic card with no specific support.  You will have 
                       to put this into monitor mode yourself!
      wsp100        - WSP100 embedded remote sensor.  
      wtapfile      - Saved file of packets readable by libwiretap
  Capture interface - Specifies the network interface Kismet will watch for
   packets to come in on.  Typically "ethX" or "wlanX".  For the WSP100 capture
   engine, the WSP100 device sends packets via a UDP stream, so the capture
   interface should be in the form of host:port where 'host' is the WSP100 and 
   'port' is the local UDP port that it will send data to.
  Capture Name      - The name Kismet uses for this capture source.  This is the
   name used to specify what sources to enable.

  To enable multiple sources, specify a source line for each and then use the
  enablesources line to enable them.  For example:
  source=prism2,wlan0,prism
  source=cisco,eth0,cisco

"enablesources" (string) Comma-separated list of sources to enable.  This is 
  only needed if you wish to selectively enable multiple sources.  For example:
  enablesources=prism,cisco

"gps" (true|false) Enable GPS support?
"gpshost" (string) host:port for GPSD.  This can be localhost OR remote

"writeinterval" (int) Interval in seconds to re-write datafiles

"sound" (true|false) Do we use sound?  (not to be confused with GUI sound)
"soundplay" (string) Path to sound playing binary.  This can be sox or any
                     other program.
"sound_new" (string) Sound for new network
"sound_traffic" (string) Sound for network traffic
"sound_junktraffic" (string) Sound for discarded junk traffic
"sound_gpslock" (string) Sound for GPS lock aquired
"sound_gpslost" (string) Sound for GPS lock lost
"sound_alert" (string) Sound for an alert condition

"speech" (true|false) Do we use speech?  (again, not to be confused with
                      GUI speech)
"festival" (string) Path to the festival speech program
"speech_type" (speech|nato|spell) Type of speech encoding used to customize the
                                  output.
               speech             - Normal speech
               nato               - NATO letters (alpha, bravo, charlie)
               spell              - Spell out the letters (aye, bee, sea)
"speech_encrypted" (string) Encrypted network speech template
"speech_unencrypted" (string) Unencrypted network speech template

"ap_manuf" (string) Path to the access point manufacturers datafile.  If an
                    absolute path is not given, the file is assumed to be in
                    the default configuration directory.
"client_manuf" (string) Path to the client manufacturers datafile.  If an
                    absolute path is not given, the file is assumed to be in
                    the default configuration directory.

"metric" (true|false) Use metric measurements in the logfiles and output?

"waypoints" (true|false) Do we write waypoints for gpsdrive?
"waypointdata" (string) Waypoint file.  This WILL overwrite any waypoints saved

"logtypes" (string) Comma-seperated list of logtypes to write
"noiselog" (true|false) Do we log packets that are noise/invalid?
"beaconlog" (true|false) Do we log beacon packets?  If beacon logs are NOT
                         logged, one beacon per network will be saved for
                         replay.
"phylog" (true|false) Do we log PHY physical layer packets?  These can greatly 
                      increse the size of a logfile with little gain.  Not 
                      every packet source reports PHY packets.

"fuzzycrypt" (true|false) Comma-seperated list of capture types we use fuzzy
                          encryption detection on.
"dumptype" (string) Type of dumpfile we generate (wiretap is the only supported
                    format currently)
"dumplimit" (int) Maximum number of packets in a file before we start a new
                  dumplog (for limited cases where ethereal crashes when a 
                  logfile is too large)
"logdefault" (string) Default logfile title
"logtemplate" (string) Logfile naming template

"configdir" (string) Base config dir (you shouldn't need to change this)
"ssidmap" (string) SSID map trackfile.
"groupmap" (string) Saved groups
"ipmap" (string) IP trackfile

* Log types
There are several log types used for different types of data.
"dump" logs are ethereal-compatable dumps of the raw packet stream
"network" logs are a human-readable dump of all the networks found
"xml" logs are a XML-formatted dump of all the networks found
"csv" logs are a comma-seperated dump suitable to being loaded into SQL.
"weak" logs are airsnort-compatable dumps of cryptographically weak packets.
"cisco" logs are a human-readable dump of all the Cisco equipment using the 
  Cisco Discovery Protocol, sorted by network.
"gps" logs are a XML dump of the GPS coordinates of packets and of the track 
 taken while sniffing.

* Speech templates
Similar to the logtemplate option, this lets you customize the speech output
using placeholders to insert different pieces of information.
 %b is replaced by the BSSID (MAC) of the network
 %s is replaced by the SSID (name) of the network
 %c is replaced by the CHANNEL of the network
 %r is replaced by the MAX RATE of the network

So, "New network detected, s.s.i.d. %s, channel %c, network encrypted." could
expand to "New network detected, s.s.i.d. foobar, channel 9, network encrypted"
with the normal speech type or "New network detected, s.s.i.d. foxtrot oscar
oscar bravo alpha romeo, channel niner, network encrypted" with NATO speech.

* Log templates
Log templates are nasty and ugly at first glance, but they offer a lot of 
possibilities and you shouldn't have to edit them often.  In the log template
string,
 %n is replaced by the logging instance name
 %d is replaced by the current date
 %t is replaced by the starting log time
 %i is replaced by the increment log in the case of multiple logs
 %l is replaced by the log type (dump, status, crypt, etc)
 %h is replaced by the home directory of the current user

So, "netlogs/%n-%d-%i.dump" called with a logging name of "Pok" could expand
to something like "netlogs/Pok-Dec-20-01-1.dump" for the first instance and 
"netlogs/Pok-Dec-20-01-2.%l" for the second logfile generated.

Another possibility is sorting logfiles by directory, with the template
"logtemplate=%l/%n-%d-%i" which could expand to, "dump/Pok-Dec-20-01-1" 
"crypt/Pok-Dec-20-01-1", etc.  In this case, the "dump", "crypt", etc, dirs 
must exist before kismet is run.

* Fuzzy encryption detection
Technically, the correct way to detect encrypted packets is via the 802.11 
frame capabilities.  Unfortunately, not all networks appear to set this 
correctly which results in Kismet failing to flag packets as encrypted.  
Fuzzy encryption detection attempts to match the first bytes of the LLC 
frame.  This will often result in some false positives, but the overall 
effect may be more desireable, depending on your situation.

* UI Config
The kismet_ui.conf file controls settings specific to the user interface.
In addition to these configuration options exclusive to the UI, the UI
can also be configured for speech and sound.

"gui" (string) Type of GUI to launch (curses or panel)

"host" (string) Host:port to connect to for UI data

"decay" (int) Decay rate for network active/recent/inactive and click rate
              for traffic sounds.  Increase this if you're using channel
              hopping.

"columns" (string) Comma seperated list of columns to be displayed.

"apm" (true|false) Display battery status of client system?

"simpleborders" (true|false) Draw simple borders formed of dashes and pipes
                             instead of high-ascii smooth borders.  Required
                             for some terminals.

"color" (true|false) Enable color.

Valid colors are the standard terminal colors, black, red, yellow, green, 
blue, magenta, cyan, white.  Colors can be prefixed with 'hi-' for bold/bright
colors, such as hi-blue, hi-white, etc.

"backgroundcolor" (string) Background color
"textcolor" (string) Default text color
"bordercolor" (string) Window border color
"titlecolor" (string) Window title color
"monitorcolor" (string) Monitor color (GPS and APM info)
"wepcolor" (string) WEP network color
"factorycolor" (string) Factory default network color
"opencolor" (string) Unprotected network color

