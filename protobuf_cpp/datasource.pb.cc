// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datasource.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datasource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KismetDatasource {

namespace {

const ::google::protobuf::Descriptor* SubChannels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubChannels_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubChanset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubChanset_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubChanhop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubChanhop_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubGps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubGps_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubMsgbus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubMsgbus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubMsgbus_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SubPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSpecset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSpecset_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSpectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSpectrum_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channels_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseDatasource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseDatasource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configure_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigureReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigureReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListInterfaces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListInterfaces_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterfacesReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterfacesReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSourceReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSourceReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProbeSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProbeSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProbeSourceReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProbeSourceReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datasource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_datasource_2eproto() {
  protobuf_AddDesc_datasource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datasource.proto");
  GOOGLE_CHECK(file != NULL);
  SubChannels_descriptor_ = file->message_type(0);
  static const int SubChannels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChannels, channels_),
  };
  SubChannels_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubChannels_descriptor_,
      SubChannels::default_instance_,
      SubChannels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChannels, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubChannels),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChannels, _internal_metadata_),
      -1);
  SubChanset_descriptor_ = file->message_type(1);
  static const int SubChanset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanset, channel_),
  };
  SubChanset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubChanset_descriptor_,
      SubChanset::default_instance_,
      SubChanset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanset, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubChanset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanset, _internal_metadata_),
      -1);
  SubChanhop_descriptor_ = file->message_type(2);
  static const int SubChanhop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, shuffle_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, offset_),
  };
  SubChanhop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubChanhop_descriptor_,
      SubChanhop::default_instance_,
      SubChanhop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubChanhop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubChanhop, _internal_metadata_),
      -1);
  SubGps_descriptor_ = file->message_type(3);
  static const int SubGps_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, name_),
  };
  SubGps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubGps_descriptor_,
      SubGps::default_instance_,
      SubGps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubGps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubGps, _internal_metadata_),
      -1);
  SubInterface_descriptor_ = file->message_type(4);
  static const int SubInterface_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, hardware_),
  };
  SubInterface_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubInterface_descriptor_,
      SubInterface::default_instance_,
      SubInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubInterface),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubInterface, _internal_metadata_),
      -1);
  SubMsgbus_descriptor_ = file->message_type(5);
  static const int SubMsgbus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMsgbus, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMsgbus, msgtext_),
  };
  SubMsgbus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubMsgbus_descriptor_,
      SubMsgbus::default_instance_,
      SubMsgbus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMsgbus, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubMsgbus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubMsgbus, _internal_metadata_),
      -1);
  SubMsgbus_MessageType_descriptor_ = SubMsgbus_descriptor_->enum_type(0);
  SubPacket_descriptor_ = file->message_type(6);
  static const int SubPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, dlt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, data_),
  };
  SubPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubPacket_descriptor_,
      SubPacket::default_instance_,
      SubPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPacket, _internal_metadata_),
      -1);
  SubSignal_descriptor_ = file->message_type(7);
  static const int SubSignal_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, signal_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, noise_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, signal_rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, noise_rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, freq_khz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, datarate_),
  };
  SubSignal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubSignal_descriptor_,
      SubSignal::default_instance_,
      SubSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubSignal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSignal, _internal_metadata_),
      -1);
  SubSpecset_descriptor_ = file->message_type(8);
  static const int SubSpecset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, start_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, end_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, samples_per_bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, bucket_width_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, enable_amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, if_amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, baseband_amp_),
  };
  SubSpecset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubSpecset_descriptor_,
      SubSpecset::default_instance_,
      SubSpecset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubSpecset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpecset, _internal_metadata_),
      -1);
  SubSpectrum_descriptor_ = file->message_type(9);
  static const int SubSpectrum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, start_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, end_mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, bucket_width_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, data_),
  };
  SubSpectrum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubSpectrum_descriptor_,
      SubSpectrum::default_instance_,
      SubSpectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubSpectrum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSpectrum, _internal_metadata_),
      -1);
  SubSuccess_descriptor_ = file->message_type(10);
  static const int SubSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, command_num_),
  };
  SubSuccess_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubSuccess_descriptor_,
      SubSuccess::default_instance_,
      SubSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubSuccess),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubSuccess, _internal_metadata_),
      -1);
  Channels_descriptor_ = file->message_type(11);
  static const int Channels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, channels_),
  };
  Channels_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Channels_descriptor_,
      Channels::default_instance_,
      Channels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, _has_bits_[0]),
      -1,
      -1,
      sizeof(Channels),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, _internal_metadata_),
      -1);
  CloseDatasource_descriptor_ = file->message_type(12);
  static const int CloseDatasource_offsets_[1] = {
  };
  CloseDatasource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseDatasource_descriptor_,
      CloseDatasource::default_instance_,
      CloseDatasource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDatasource, _has_bits_[0]),
      -1,
      -1,
      sizeof(CloseDatasource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDatasource, _internal_metadata_),
      -1);
  Configure_descriptor_ = file->message_type(13);
  static const int Configure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, hopping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, spectrum_),
  };
  Configure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Configure_descriptor_,
      Configure::default_instance_,
      Configure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, _has_bits_[0]),
      -1,
      -1,
      sizeof(Configure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, _internal_metadata_),
      -1);
  ConfigureReport_descriptor_ = file->message_type(14);
  static const int ConfigureReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, hopping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, warning_),
  };
  ConfigureReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigureReport_descriptor_,
      ConfigureReport::default_instance_,
      ConfigureReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfigureReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureReport, _internal_metadata_),
      -1);
  DataReport_descriptor_ = file->message_type(15);
  static const int DataReport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, spectrum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, warning_),
  };
  DataReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReport_descriptor_,
      DataReport::default_instance_,
      DataReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReport, _internal_metadata_),
      -1);
  ErrorReport_descriptor_ = file->message_type(16);
  static const int ErrorReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, message_),
  };
  ErrorReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorReport_descriptor_,
      ErrorReport::default_instance_,
      ErrorReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(ErrorReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorReport, _internal_metadata_),
      -1);
  ListInterfaces_descriptor_ = file->message_type(17);
  static const int ListInterfaces_offsets_[1] = {
  };
  ListInterfaces_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListInterfaces_descriptor_,
      ListInterfaces::default_instance_,
      ListInterfaces_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInterfaces, _has_bits_[0]),
      -1,
      -1,
      sizeof(ListInterfaces),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInterfaces, _internal_metadata_),
      -1);
  InterfacesReport_descriptor_ = file->message_type(18);
  static const int InterfacesReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, interfaces_),
  };
  InterfacesReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InterfacesReport_descriptor_,
      InterfacesReport::default_instance_,
      InterfacesReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(InterfacesReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacesReport, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(19);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, warning_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  NewSource_descriptor_ = file->message_type(20);
  static const int NewSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, uuid_),
  };
  NewSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewSource_descriptor_,
      NewSource::default_instance_,
      NewSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, _has_bits_[0]),
      -1,
      -1,
      sizeof(NewSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSource, _internal_metadata_),
      -1);
  OpenSource_descriptor_ = file->message_type(21);
  static const int OpenSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSource, definition_),
  };
  OpenSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenSource_descriptor_,
      OpenSource::default_instance_,
      OpenSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSource, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpenSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSource, _internal_metadata_),
      -1);
  OpenSourceReport_descriptor_ = file->message_type(22);
  static const int OpenSourceReport_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, dlt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, capture_interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, specset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, warning_),
  };
  OpenSourceReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenSourceReport_descriptor_,
      OpenSourceReport::default_instance_,
      OpenSourceReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpenSourceReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSourceReport, _internal_metadata_),
      -1);
  ProbeSource_descriptor_ = file->message_type(23);
  static const int ProbeSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSource, definition_),
  };
  ProbeSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProbeSource_descriptor_,
      ProbeSource::default_instance_,
      ProbeSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSource, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProbeSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSource, _internal_metadata_),
      -1);
  ProbeSourceReport_descriptor_ = file->message_type(24);
  static const int ProbeSourceReport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, chanset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, specset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, hardware_),
  };
  ProbeSourceReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProbeSourceReport_descriptor_,
      ProbeSourceReport::default_instance_,
      ProbeSourceReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProbeSourceReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbeSourceReport, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datasource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubChannels_descriptor_, &SubChannels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubChanset_descriptor_, &SubChanset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubChanhop_descriptor_, &SubChanhop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubGps_descriptor_, &SubGps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubInterface_descriptor_, &SubInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubMsgbus_descriptor_, &SubMsgbus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubPacket_descriptor_, &SubPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubSignal_descriptor_, &SubSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubSpecset_descriptor_, &SubSpecset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubSpectrum_descriptor_, &SubSpectrum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubSuccess_descriptor_, &SubSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Channels_descriptor_, &Channels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseDatasource_descriptor_, &CloseDatasource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Configure_descriptor_, &Configure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigureReport_descriptor_, &ConfigureReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReport_descriptor_, &DataReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorReport_descriptor_, &ErrorReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListInterfaces_descriptor_, &ListInterfaces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InterfacesReport_descriptor_, &InterfacesReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewSource_descriptor_, &NewSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenSource_descriptor_, &OpenSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenSourceReport_descriptor_, &OpenSourceReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProbeSource_descriptor_, &ProbeSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProbeSourceReport_descriptor_, &ProbeSourceReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datasource_2eproto() {
  delete SubChannels::default_instance_;
  delete SubChannels_reflection_;
  delete SubChanset::default_instance_;
  delete SubChanset_reflection_;
  delete SubChanhop::default_instance_;
  delete SubChanhop_reflection_;
  delete SubGps::default_instance_;
  delete SubGps_reflection_;
  delete SubInterface::default_instance_;
  delete SubInterface_reflection_;
  delete SubMsgbus::default_instance_;
  delete SubMsgbus_reflection_;
  delete SubPacket::default_instance_;
  delete SubPacket_reflection_;
  delete SubSignal::default_instance_;
  delete SubSignal_reflection_;
  delete SubSpecset::default_instance_;
  delete SubSpecset_reflection_;
  delete SubSpectrum::default_instance_;
  delete SubSpectrum_reflection_;
  delete SubSuccess::default_instance_;
  delete SubSuccess_reflection_;
  delete Channels::default_instance_;
  delete Channels_reflection_;
  delete CloseDatasource::default_instance_;
  delete CloseDatasource_reflection_;
  delete Configure::default_instance_;
  delete Configure_reflection_;
  delete ConfigureReport::default_instance_;
  delete ConfigureReport_reflection_;
  delete DataReport::default_instance_;
  delete DataReport_reflection_;
  delete ErrorReport::default_instance_;
  delete ErrorReport_reflection_;
  delete ListInterfaces::default_instance_;
  delete ListInterfaces_reflection_;
  delete InterfacesReport::default_instance_;
  delete InterfacesReport_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete NewSource::default_instance_;
  delete NewSource_reflection_;
  delete OpenSource::default_instance_;
  delete OpenSource_reflection_;
  delete OpenSourceReport::default_instance_;
  delete OpenSourceReport_reflection_;
  delete ProbeSource::default_instance_;
  delete ProbeSource_reflection_;
  delete ProbeSourceReport::default_instance_;
  delete ProbeSourceReport_reflection_;
}

void protobuf_AddDesc_datasource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_datasource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020datasource.proto\022\020KismetDatasource\"\037\n\013"
    "SubChannels\022\020\n\010channels\030\001 \003(\t\"\035\n\nSubChan"
    "set\022\017\n\007channel\030\001 \002(\t\"c\n\nSubChanhop\022\020\n\010ch"
    "annels\030\001 \003(\t\022\014\n\004rate\030\002 \001(\001\022\017\n\007shuffle\030\003 "
    "\001(\010\022\024\n\014shuffle_skip\030\004 \001(\r\022\016\n\006offset\030\005 \001("
    "\r\"\260\001\n\006SubGps\022\013\n\003lat\030\001 \002(\001\022\013\n\003lon\030\002 \002(\001\022\013"
    "\n\003alt\030\003 \002(\001\022\r\n\005speed\030\004 \002(\001\022\017\n\007heading\030\005 "
    "\002(\001\022\021\n\tprecision\030\006 \002(\001\022\013\n\003fix\030\007 \002(\r\022\020\n\010t"
    "ime_sec\030\010 \002(\004\022\021\n\ttime_usec\030\t \002(\004\022\014\n\004type"
    "\030\n \002(\t\022\014\n\004name\030\013 \002(\t\"B\n\014SubInterface\022\021\n\t"
    "interface\030\001 \002(\t\022\r\n\005flags\030\002 \002(\t\022\020\n\010hardwa"
    "re\030\003 \001(\t\"\233\001\n\tSubMsgbus\0228\n\007msgtype\030\001 \002(\0162"
    "\'.KismetDatasource.SubMsgbus.MessageType"
    "\022\017\n\007msgtext\030\002 \002(\t\"C\n\013MessageType\022\t\n\005DEBU"
    "G\020\001\022\010\n\004INFO\020\002\022\t\n\005ERROR\020\004\022\t\n\005ALERT\020\010\022\t\n\005F"
    "ATAL\020\020\"Y\n\tSubPacket\022\020\n\010time_sec\030\001 \002(\004\022\021\n"
    "\ttime_usec\030\002 \002(\004\022\013\n\003dlt\030\003 \002(\r\022\014\n\004size\030\004 "
    "\002(\004\022\014\n\004data\030\005 \002(\014\"\220\001\n\tSubSignal\022\022\n\nsigna"
    "l_dbm\030\001 \001(\001\022\021\n\tnoise_dbm\030\002 \001(\001\022\023\n\013signal"
    "_rssi\030\003 \001(\001\022\022\n\nnoise_rssi\030\004 \001(\001\022\020\n\010freq_"
    "khz\030\005 \001(\001\022\017\n\007channel\030\006 \001(\t\022\020\n\010datarate\030\007"
    " \001(\001\"\237\001\n\nSubSpecset\022\021\n\tstart_mhz\030\001 \001(\001\022\017"
    "\n\007end_mhz\030\002 \001(\001\022\032\n\022samples_per_bucket\030\003 "
    "\001(\001\022\027\n\017bucket_width_hz\030\004 \001(\001\022\022\n\nenable_a"
    "mp\030\005 \001(\010\022\016\n\006if_amp\030\006 \001(\004\022\024\n\014baseband_amp"
    "\030\007 \001(\004\"}\n\013SubSpectrum\022\020\n\010time_sec\030\001 \001(\004\022"
    "\021\n\ttime_usec\030\002 \001(\004\022\021\n\tstart_mhz\030\003 \001(\001\022\017\n"
    "\007end_mhz\030\004 \001(\001\022\027\n\017bucket_width_hz\030\005 \001(\001\022"
    "\014\n\004data\030\006 \003(\005\"2\n\nSubSuccess\022\017\n\007success\030\001"
    " \002(\010\022\023\n\013command_num\030\002 \002(\r\";\n\010Channels\022/\n"
    "\010channels\030\001 \002(\0132\035.KismetDatasource.SubCh"
    "annels\"\021\n\017CloseDatasource\"\231\001\n\tConfigure\022"
    "-\n\007channel\030\001 \001(\0132\034.KismetDatasource.SubC"
    "hanset\022-\n\007hopping\030\002 \001(\0132\034.KismetDatasour"
    "ce.SubChanhop\022.\n\010spectrum\030\003 \001(\0132\034.Kismet"
    "Datasource.SubSpecset\"\335\001\n\017ConfigureRepor"
    "t\022-\n\007success\030\001 \002(\0132\034.KismetDatasource.Su"
    "bSuccess\022-\n\007channel\030\002 \001(\0132\034.KismetDataso"
    "urce.SubChanset\022-\n\007hopping\030\003 \001(\0132\034.Kisme"
    "tDatasource.SubChanhop\022,\n\007message\030\004 \001(\0132"
    "\033.KismetDatasource.SubMsgbus\022\017\n\007warning\030"
    "\005 \001(\t\"\375\001\n\nDataReport\022%\n\003gps\030\001 \001(\0132\030.Kism"
    "etDatasource.SubGps\022,\n\007message\030\002 \001(\0132\033.K"
    "ismetDatasource.SubMsgbus\022+\n\006packet\030\003 \001("
    "\0132\033.KismetDatasource.SubPacket\022+\n\006signal"
    "\030\004 \001(\0132\033.KismetDatasource.SubSignal\022/\n\010s"
    "pectrum\030\005 \001(\0132\035.KismetDatasource.SubSpec"
    "trum\022\017\n\007warning\030\006 \001(\t\"j\n\013ErrorReport\022-\n\007"
    "success\030\001 \002(\0132\034.KismetDatasource.SubSucc"
    "ess\022,\n\007message\030\002 \001(\0132\033.KismetDatasource."
    "SubMsgbus\"\020\n\016ListInterfaces\"\243\001\n\020Interfac"
    "esReport\022-\n\007success\030\001 \002(\0132\034.KismetDataso"
    "urce.SubSuccess\022,\n\007message\030\002 \001(\0132\033.Kisme"
    "tDatasource.SubMsgbus\0222\n\ninterfaces\030\003 \003("
    "\0132\036.KismetDatasource.SubInterface\"H\n\007Mes"
    "sage\022,\n\007message\030\001 \001(\0132\033.KismetDatasource"
    ".SubMsgbus\022\017\n\007warning\030\002 \001(\t\"A\n\tNewSource"
    "\022\022\n\ndefinition\030\001 \002(\t\022\022\n\nsourcetype\030\002 \002(\t"
    "\022\014\n\004uuid\030\003 \002(\t\" \n\nOpenSource\022\022\n\ndefiniti"
    "on\030\001 \002(\t\"\327\002\n\020OpenSourceReport\022-\n\007success"
    "\030\001 \002(\0132\034.KismetDatasource.SubSuccess\022\013\n\003"
    "dlt\030\002 \001(\r\022\031\n\021capture_interface\030\003 \001(\t\022/\n\010"
    "channels\030\004 \001(\0132\035.KismetDatasource.SubCha"
    "nnels\022-\n\007channel\030\005 \001(\0132\034.KismetDatasourc"
    "e.SubChanset\022\020\n\010hardware\030\006 \001(\t\022,\n\007messag"
    "e\030\007 \001(\0132\033.KismetDatasource.SubMsgbus\022-\n\007"
    "specset\030\010 \001(\0132\034.KismetDatasource.SubSpec"
    "set\022\014\n\004uuid\030\t \001(\t\022\017\n\007warning\030\n \001(\t\"!\n\013Pr"
    "obeSource\022\022\n\ndefinition\030\001 \002(\t\"\221\002\n\021ProbeS"
    "ourceReport\022-\n\007success\030\001 \002(\0132\034.KismetDat"
    "asource.SubSuccess\022,\n\007message\030\002 \001(\0132\033.Ki"
    "smetDatasource.SubMsgbus\022/\n\010channels\030\003 \001"
    "(\0132\035.KismetDatasource.SubChannels\022-\n\007cha"
    "nset\030\004 \001(\0132\034.KismetDatasource.SubChanset"
    "\022-\n\007specset\030\005 \001(\0132\034.KismetDatasource.Sub"
    "Specset\022\020\n\010hardware\030\006 \001(\t", 3025);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datasource.proto", &protobuf_RegisterTypes);
  SubChannels::default_instance_ = new SubChannels();
  SubChanset::default_instance_ = new SubChanset();
  SubChanhop::default_instance_ = new SubChanhop();
  SubGps::default_instance_ = new SubGps();
  SubInterface::default_instance_ = new SubInterface();
  SubMsgbus::default_instance_ = new SubMsgbus();
  SubPacket::default_instance_ = new SubPacket();
  SubSignal::default_instance_ = new SubSignal();
  SubSpecset::default_instance_ = new SubSpecset();
  SubSpectrum::default_instance_ = new SubSpectrum();
  SubSuccess::default_instance_ = new SubSuccess();
  Channels::default_instance_ = new Channels();
  CloseDatasource::default_instance_ = new CloseDatasource();
  Configure::default_instance_ = new Configure();
  ConfigureReport::default_instance_ = new ConfigureReport();
  DataReport::default_instance_ = new DataReport();
  ErrorReport::default_instance_ = new ErrorReport();
  ListInterfaces::default_instance_ = new ListInterfaces();
  InterfacesReport::default_instance_ = new InterfacesReport();
  Message::default_instance_ = new Message();
  NewSource::default_instance_ = new NewSource();
  OpenSource::default_instance_ = new OpenSource();
  OpenSourceReport::default_instance_ = new OpenSourceReport();
  ProbeSource::default_instance_ = new ProbeSource();
  ProbeSourceReport::default_instance_ = new ProbeSourceReport();
  SubChannels::default_instance_->InitAsDefaultInstance();
  SubChanset::default_instance_->InitAsDefaultInstance();
  SubChanhop::default_instance_->InitAsDefaultInstance();
  SubGps::default_instance_->InitAsDefaultInstance();
  SubInterface::default_instance_->InitAsDefaultInstance();
  SubMsgbus::default_instance_->InitAsDefaultInstance();
  SubPacket::default_instance_->InitAsDefaultInstance();
  SubSignal::default_instance_->InitAsDefaultInstance();
  SubSpecset::default_instance_->InitAsDefaultInstance();
  SubSpectrum::default_instance_->InitAsDefaultInstance();
  SubSuccess::default_instance_->InitAsDefaultInstance();
  Channels::default_instance_->InitAsDefaultInstance();
  CloseDatasource::default_instance_->InitAsDefaultInstance();
  Configure::default_instance_->InitAsDefaultInstance();
  ConfigureReport::default_instance_->InitAsDefaultInstance();
  DataReport::default_instance_->InitAsDefaultInstance();
  ErrorReport::default_instance_->InitAsDefaultInstance();
  ListInterfaces::default_instance_->InitAsDefaultInstance();
  InterfacesReport::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  NewSource::default_instance_->InitAsDefaultInstance();
  OpenSource::default_instance_->InitAsDefaultInstance();
  OpenSourceReport::default_instance_->InitAsDefaultInstance();
  ProbeSource::default_instance_->InitAsDefaultInstance();
  ProbeSourceReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datasource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datasource_2eproto {
  StaticDescriptorInitializer_datasource_2eproto() {
    protobuf_AddDesc_datasource_2eproto();
  }
} static_descriptor_initializer_datasource_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubChannels::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubChannels::SubChannels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubChannels)
}

void SubChannels::InitAsDefaultInstance() {
}

SubChannels::SubChannels(const SubChannels& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubChannels)
}

void SubChannels::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubChannels::~SubChannels() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubChannels)
  SharedDtor();
}

void SubChannels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubChannels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubChannels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubChannels_descriptor_;
}

const SubChannels& SubChannels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubChannels* SubChannels::default_instance_ = NULL;

SubChannels* SubChannels::New(::google::protobuf::Arena* arena) const {
  SubChannels* n = new SubChannels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubChannels::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubChannels)
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubChannels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubChannels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (tag == 10) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channels(this->channels_size() - 1).data(),
            this->channels(this->channels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubChannels.channels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubChannels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubChannels)
  return false;
#undef DO_
}

void SubChannels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubChannels)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channels(i).data(), this->channels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubChannels.channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubChannels)
}

::google::protobuf::uint8* SubChannels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubChannels)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channels(i).data(), this->channels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubChannels.channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubChannels)
  return target;
}

int SubChannels::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubChannels)
  int total_size = 0;

  // repeated string channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubChannels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubChannels)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubChannels* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubChannels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubChannels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubChannels)
    MergeFrom(*source);
  }
}

void SubChannels::MergeFrom(const SubChannels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubChannels)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  channels_.MergeFrom(from.channels_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubChannels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubChannels::CopyFrom(const SubChannels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubChannels::IsInitialized() const {

  return true;
}

void SubChannels::Swap(SubChannels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubChannels::InternalSwap(SubChannels* other) {
  channels_.UnsafeArenaSwap(&other->channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubChannels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubChannels_descriptor_;
  metadata.reflection = SubChannels_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubChannels

// repeated string channels = 1;
int SubChannels::channels_size() const {
  return channels_.size();
}
void SubChannels::clear_channels() {
  channels_.Clear();
}
 const ::std::string& SubChannels::channels(int index) const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChannels.channels)
  return channels_.Get(index);
}
 ::std::string* SubChannels::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubChannels.channels)
  return channels_.Mutable(index);
}
 void SubChannels::set_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChannels.channels)
  channels_.Mutable(index)->assign(value);
}
 void SubChannels::set_channels(int index, const char* value) {
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubChannels.channels)
}
 void SubChannels::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubChannels.channels)
}
 ::std::string* SubChannels::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:KismetDatasource.SubChannels.channels)
  return channels_.Add();
}
 void SubChannels::add_channels(const ::std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KismetDatasource.SubChannels.channels)
}
 void SubChannels::add_channels(const char* value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KismetDatasource.SubChannels.channels)
}
 void SubChannels::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KismetDatasource.SubChannels.channels)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubChannels::channels() const {
  // @@protoc_insertion_point(field_list:KismetDatasource.SubChannels.channels)
  return channels_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SubChannels::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:KismetDatasource.SubChannels.channels)
  return &channels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubChanset::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubChanset::SubChanset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubChanset)
}

void SubChanset::InitAsDefaultInstance() {
}

SubChanset::SubChanset(const SubChanset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubChanset)
}

void SubChanset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubChanset::~SubChanset() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubChanset)
  SharedDtor();
}

void SubChanset::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubChanset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubChanset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubChanset_descriptor_;
}

const SubChanset& SubChanset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubChanset* SubChanset::default_instance_ = NULL;

SubChanset* SubChanset::New(::google::protobuf::Arena* arena) const {
  SubChanset* n = new SubChanset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubChanset::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubChanset)
  if (has_channel()) {
    channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubChanset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubChanset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubChanset.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubChanset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubChanset)
  return false;
#undef DO_
}

void SubChanset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubChanset)
  // required string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubChanset.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubChanset)
}

::google::protobuf::uint8* SubChanset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubChanset)
  // required string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubChanset.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubChanset)
  return target;
}

int SubChanset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubChanset)
  int total_size = 0;

  // required string channel = 1;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubChanset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubChanset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubChanset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubChanset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubChanset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubChanset)
    MergeFrom(*source);
  }
}

void SubChanset::MergeFrom(const SubChanset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubChanset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubChanset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubChanset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubChanset::CopyFrom(const SubChanset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubChanset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubChanset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubChanset::Swap(SubChanset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubChanset::InternalSwap(SubChanset* other) {
  channel_.Swap(&other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubChanset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubChanset_descriptor_;
  metadata.reflection = SubChanset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubChanset

// required string channel = 1;
bool SubChanset::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubChanset::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
void SubChanset::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubChanset::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
 const ::std::string& SubChanset::channel() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChanset.channel)
  return channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubChanset::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChanset.channel)
}
 void SubChanset::set_channel(const char* value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubChanset.channel)
}
 void SubChanset::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubChanset.channel)
}
 ::std::string* SubChanset::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubChanset.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubChanset::release_channel() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubChanset.channel)
  clear_has_channel();
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubChanset::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubChanset.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubChanhop::kChannelsFieldNumber;
const int SubChanhop::kRateFieldNumber;
const int SubChanhop::kShuffleFieldNumber;
const int SubChanhop::kShuffleSkipFieldNumber;
const int SubChanhop::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubChanhop::SubChanhop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubChanhop)
}

void SubChanhop::InitAsDefaultInstance() {
}

SubChanhop::SubChanhop(const SubChanhop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubChanhop)
}

void SubChanhop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rate_ = 0;
  shuffle_ = false;
  shuffle_skip_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubChanhop::~SubChanhop() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubChanhop)
  SharedDtor();
}

void SubChanhop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubChanhop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubChanhop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubChanhop_descriptor_;
}

const SubChanhop& SubChanhop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubChanhop* SubChanhop::default_instance_ = NULL;

SubChanhop* SubChanhop::New(::google::protobuf::Arena* arena) const {
  SubChanhop* n = new SubChanhop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubChanhop::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubChanhop)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubChanhop, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubChanhop*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rate_, offset_);

#undef ZR_HELPER_
#undef ZR_

  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubChanhop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubChanhop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (tag == 10) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channels(this->channels_size() - 1).data(),
            this->channels(this->channels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubChanhop.channels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channels;
        if (input->ExpectTag(17)) goto parse_rate;
        break;
      }

      // optional double rate = 2;
      case 2: {
        if (tag == 17) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3;
      case 3: {
        if (tag == 24) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shuffle_skip;
        break;
      }

      // optional uint32 shuffle_skip = 4;
      case 4: {
        if (tag == 32) {
         parse_shuffle_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shuffle_skip_)));
          set_has_shuffle_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 5;
      case 5: {
        if (tag == 40) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubChanhop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubChanhop)
  return false;
#undef DO_
}

void SubChanhop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubChanhop)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channels(i).data(), this->channels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubChanhop.channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  // optional double rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rate(), output);
  }

  // optional bool shuffle = 3;
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  // optional uint32 shuffle_skip = 4;
  if (has_shuffle_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shuffle_skip(), output);
  }

  // optional uint32 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubChanhop)
}

::google::protobuf::uint8* SubChanhop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubChanhop)
  // repeated string channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channels(i).data(), this->channels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubChanhop.channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  // optional double rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rate(), target);
  }

  // optional bool shuffle = 3;
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  // optional uint32 shuffle_skip = 4;
  if (has_shuffle_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->shuffle_skip(), target);
  }

  // optional uint32 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubChanhop)
  return target;
}

int SubChanhop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubChanhop)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional double rate = 2;
    if (has_rate()) {
      total_size += 1 + 8;
    }

    // optional bool shuffle = 3;
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional uint32 shuffle_skip = 4;
    if (has_shuffle_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shuffle_skip());
    }

    // optional uint32 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  // repeated string channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubChanhop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubChanhop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubChanhop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubChanhop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubChanhop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubChanhop)
    MergeFrom(*source);
  }
}

void SubChanhop::MergeFrom(const SubChanhop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubChanhop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_shuffle_skip()) {
      set_shuffle_skip(from.shuffle_skip());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubChanhop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubChanhop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubChanhop::CopyFrom(const SubChanhop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubChanhop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubChanhop::IsInitialized() const {

  return true;
}

void SubChanhop::Swap(SubChanhop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubChanhop::InternalSwap(SubChanhop* other) {
  channels_.UnsafeArenaSwap(&other->channels_);
  std::swap(rate_, other->rate_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(shuffle_skip_, other->shuffle_skip_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubChanhop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubChanhop_descriptor_;
  metadata.reflection = SubChanhop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubChanhop

// repeated string channels = 1;
int SubChanhop::channels_size() const {
  return channels_.size();
}
void SubChanhop::clear_channels() {
  channels_.Clear();
}
 const ::std::string& SubChanhop::channels(int index) const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChanhop.channels)
  return channels_.Get(index);
}
 ::std::string* SubChanhop::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubChanhop.channels)
  return channels_.Mutable(index);
}
 void SubChanhop::set_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChanhop.channels)
  channels_.Mutable(index)->assign(value);
}
 void SubChanhop::set_channels(int index, const char* value) {
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubChanhop.channels)
}
 void SubChanhop::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubChanhop.channels)
}
 ::std::string* SubChanhop::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:KismetDatasource.SubChanhop.channels)
  return channels_.Add();
}
 void SubChanhop::add_channels(const ::std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KismetDatasource.SubChanhop.channels)
}
 void SubChanhop::add_channels(const char* value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KismetDatasource.SubChanhop.channels)
}
 void SubChanhop::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KismetDatasource.SubChanhop.channels)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubChanhop::channels() const {
  // @@protoc_insertion_point(field_list:KismetDatasource.SubChanhop.channels)
  return channels_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SubChanhop::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:KismetDatasource.SubChanhop.channels)
  return &channels_;
}

// optional double rate = 2;
bool SubChanhop::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubChanhop::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void SubChanhop::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubChanhop::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
 double SubChanhop::rate() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChanhop.rate)
  return rate_;
}
 void SubChanhop::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChanhop.rate)
}

// optional bool shuffle = 3;
bool SubChanhop::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubChanhop::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
void SubChanhop::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubChanhop::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
 bool SubChanhop::shuffle() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChanhop.shuffle)
  return shuffle_;
}
 void SubChanhop::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChanhop.shuffle)
}

// optional uint32 shuffle_skip = 4;
bool SubChanhop::has_shuffle_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubChanhop::set_has_shuffle_skip() {
  _has_bits_[0] |= 0x00000008u;
}
void SubChanhop::clear_has_shuffle_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubChanhop::clear_shuffle_skip() {
  shuffle_skip_ = 0u;
  clear_has_shuffle_skip();
}
 ::google::protobuf::uint32 SubChanhop::shuffle_skip() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChanhop.shuffle_skip)
  return shuffle_skip_;
}
 void SubChanhop::set_shuffle_skip(::google::protobuf::uint32 value) {
  set_has_shuffle_skip();
  shuffle_skip_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChanhop.shuffle_skip)
}

// optional uint32 offset = 5;
bool SubChanhop::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubChanhop::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void SubChanhop::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubChanhop::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
 ::google::protobuf::uint32 SubChanhop::offset() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubChanhop.offset)
  return offset_;
}
 void SubChanhop::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubChanhop.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubGps::kLatFieldNumber;
const int SubGps::kLonFieldNumber;
const int SubGps::kAltFieldNumber;
const int SubGps::kSpeedFieldNumber;
const int SubGps::kHeadingFieldNumber;
const int SubGps::kPrecisionFieldNumber;
const int SubGps::kFixFieldNumber;
const int SubGps::kTimeSecFieldNumber;
const int SubGps::kTimeUsecFieldNumber;
const int SubGps::kTypeFieldNumber;
const int SubGps::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubGps::SubGps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubGps)
}

void SubGps::InitAsDefaultInstance() {
}

SubGps::SubGps(const SubGps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubGps)
}

void SubGps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  speed_ = 0;
  heading_ = 0;
  precision_ = 0;
  fix_ = 0u;
  time_sec_ = GOOGLE_ULONGLONG(0);
  time_usec_ = GOOGLE_ULONGLONG(0);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubGps::~SubGps() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubGps)
  SharedDtor();
}

void SubGps::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubGps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubGps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubGps_descriptor_;
}

const SubGps& SubGps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubGps* SubGps::default_instance_ = NULL;

SubGps* SubGps::New(::google::protobuf::Arena* arena) const {
  SubGps* n = new SubGps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubGps::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubGps)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubGps, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubGps*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lat_, time_sec_);
    fix_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    time_usec_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubGps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubGps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alt;
        break;
      }

      // required double alt = 3;
      case 3: {
        if (tag == 25) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed;
        break;
      }

      // required double speed = 4;
      case 4: {
        if (tag == 33) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }

      // required double heading = 5;
      case 5: {
        if (tag == 41) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_precision;
        break;
      }

      // required double precision = 6;
      case 6: {
        if (tag == 49) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fix;
        break;
      }

      // required uint32 fix = 7;
      case 7: {
        if (tag == 56) {
         parse_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_)));
          set_has_fix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time_sec;
        break;
      }

      // required uint64 time_sec = 8;
      case 8: {
        if (tag == 64) {
         parse_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time_usec;
        break;
      }

      // required uint64 time_usec = 9;
      case 9: {
        if (tag == 72) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_type;
        break;
      }

      // required string type = 10;
      case 10: {
        if (tag == 82) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubGps.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // required string name = 11;
      case 11: {
        if (tag == 90) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubGps.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubGps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubGps)
  return false;
#undef DO_
}

void SubGps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubGps)
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // required double alt = 3;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alt(), output);
  }

  // required double speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // required double heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // required double precision = 6;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->precision(), output);
  }

  // required uint32 fix = 7;
  if (has_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fix(), output);
  }

  // required uint64 time_sec = 8;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time_sec(), output);
  }

  // required uint64 time_usec = 9;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->time_usec(), output);
  }

  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubGps.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->type(), output);
  }

  // required string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubGps.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubGps)
}

::google::protobuf::uint8* SubGps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubGps)
  // required double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // required double alt = 3;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->alt(), target);
  }

  // required double speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  // required double heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // required double precision = 6;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->precision(), target);
  }

  // required uint32 fix = 7;
  if (has_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fix(), target);
  }

  // required uint64 time_sec = 8;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->time_sec(), target);
  }

  // required uint64 time_usec = 9;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->time_usec(), target);
  }

  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubGps.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }

  // required string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubGps.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubGps)
  return target;
}

int SubGps::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetDatasource.SubGps)
  int total_size = 0;

  if (has_lat()) {
    // required double lat = 1;
    total_size += 1 + 8;
  }

  if (has_lon()) {
    // required double lon = 2;
    total_size += 1 + 8;
  }

  if (has_alt()) {
    // required double alt = 3;
    total_size += 1 + 8;
  }

  if (has_speed()) {
    // required double speed = 4;
    total_size += 1 + 8;
  }

  if (has_heading()) {
    // required double heading = 5;
    total_size += 1 + 8;
  }

  if (has_precision()) {
    // required double precision = 6;
    total_size += 1 + 8;
  }

  if (has_fix()) {
    // required uint32 fix = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fix());
  }

  if (has_time_sec()) {
    // required uint64 time_sec = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_sec());
  }

  if (has_time_usec()) {
    // required uint64 time_usec = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_usec());
  }

  if (has_type()) {
    // required string type = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_name()) {
    // required string name = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int SubGps::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubGps)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required double lat = 1;
    total_size += 1 + 8;

    // required double lon = 2;
    total_size += 1 + 8;

    // required double alt = 3;
    total_size += 1 + 8;

    // required double speed = 4;
    total_size += 1 + 8;

    // required double heading = 5;
    total_size += 1 + 8;

    // required double precision = 6;
    total_size += 1 + 8;

    // required uint32 fix = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fix());

    // required uint64 time_sec = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_sec());

    // required uint64 time_usec = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_usec());

    // required string type = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string name = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubGps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubGps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubGps* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubGps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubGps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubGps)
    MergeFrom(*source);
  }
}

void SubGps::MergeFrom(const SubGps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubGps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_fix()) {
      set_fix(from.fix());
    }
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubGps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubGps::CopyFrom(const SubGps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubGps::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void SubGps::Swap(SubGps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubGps::InternalSwap(SubGps* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(alt_, other->alt_);
  std::swap(speed_, other->speed_);
  std::swap(heading_, other->heading_);
  std::swap(precision_, other->precision_);
  std::swap(fix_, other->fix_);
  std::swap(time_sec_, other->time_sec_);
  std::swap(time_usec_, other->time_usec_);
  type_.Swap(&other->type_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubGps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubGps_descriptor_;
  metadata.reflection = SubGps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubGps

// required double lat = 1;
bool SubGps::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubGps::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void SubGps::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubGps::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 double SubGps::lat() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.lat)
  return lat_;
}
 void SubGps::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.lat)
}

// required double lon = 2;
bool SubGps::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubGps::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void SubGps::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubGps::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 double SubGps::lon() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.lon)
  return lon_;
}
 void SubGps::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.lon)
}

// required double alt = 3;
bool SubGps::has_alt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubGps::set_has_alt() {
  _has_bits_[0] |= 0x00000004u;
}
void SubGps::clear_has_alt() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubGps::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
 double SubGps::alt() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.alt)
  return alt_;
}
 void SubGps::set_alt(double value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.alt)
}

// required double speed = 4;
bool SubGps::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubGps::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void SubGps::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubGps::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 double SubGps::speed() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.speed)
  return speed_;
}
 void SubGps::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.speed)
}

// required double heading = 5;
bool SubGps::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubGps::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
void SubGps::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubGps::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double SubGps::heading() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.heading)
  return heading_;
}
 void SubGps::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.heading)
}

// required double precision = 6;
bool SubGps::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SubGps::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
void SubGps::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
void SubGps::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
 double SubGps::precision() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.precision)
  return precision_;
}
 void SubGps::set_precision(double value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.precision)
}

// required uint32 fix = 7;
bool SubGps::has_fix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SubGps::set_has_fix() {
  _has_bits_[0] |= 0x00000040u;
}
void SubGps::clear_has_fix() {
  _has_bits_[0] &= ~0x00000040u;
}
void SubGps::clear_fix() {
  fix_ = 0u;
  clear_has_fix();
}
 ::google::protobuf::uint32 SubGps::fix() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.fix)
  return fix_;
}
 void SubGps::set_fix(::google::protobuf::uint32 value) {
  set_has_fix();
  fix_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.fix)
}

// required uint64 time_sec = 8;
bool SubGps::has_time_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SubGps::set_has_time_sec() {
  _has_bits_[0] |= 0x00000080u;
}
void SubGps::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
void SubGps::clear_time_sec() {
  time_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_sec();
}
 ::google::protobuf::uint64 SubGps::time_sec() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.time_sec)
  return time_sec_;
}
 void SubGps::set_time_sec(::google::protobuf::uint64 value) {
  set_has_time_sec();
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.time_sec)
}

// required uint64 time_usec = 9;
bool SubGps::has_time_usec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SubGps::set_has_time_usec() {
  _has_bits_[0] |= 0x00000100u;
}
void SubGps::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000100u;
}
void SubGps::clear_time_usec() {
  time_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::uint64 SubGps::time_usec() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.time_usec)
  return time_usec_;
}
 void SubGps::set_time_usec(::google::protobuf::uint64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.time_usec)
}

// required string type = 10;
bool SubGps::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SubGps::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void SubGps::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void SubGps::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& SubGps::type() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubGps::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.type)
}
 void SubGps::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubGps.type)
}
 void SubGps::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubGps.type)
}
 ::std::string* SubGps::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubGps.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubGps::release_type() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubGps.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubGps::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubGps.type)
}

// required string name = 11;
bool SubGps::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SubGps::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
void SubGps::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
void SubGps::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SubGps::name() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubGps.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubGps::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubGps.name)
}
 void SubGps::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubGps.name)
}
 void SubGps::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubGps.name)
}
 ::std::string* SubGps::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubGps.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubGps::release_name() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubGps.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubGps::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubGps.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubInterface::kInterfaceFieldNumber;
const int SubInterface::kFlagsFieldNumber;
const int SubInterface::kHardwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubInterface::SubInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubInterface)
}

void SubInterface::InitAsDefaultInstance() {
}

SubInterface::SubInterface(const SubInterface& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubInterface)
}

void SubInterface::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubInterface::~SubInterface() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubInterface)
  SharedDtor();
}

void SubInterface::SharedDtor() {
  interface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubInterface_descriptor_;
}

const SubInterface& SubInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubInterface* SubInterface::default_instance_ = NULL;

SubInterface* SubInterface::New(::google::protobuf::Arena* arena) const {
  SubInterface* n = new SubInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubInterface)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_interface()) {
      interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_flags()) {
      flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hardware()) {
      hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string interface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface().data(), this->interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubInterface.interface");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_flags;
        break;
      }

      // required string flags = 2;
      case 2: {
        if (tag == 18) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flags().data(), this->flags().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubInterface.flags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hardware;
        break;
      }

      // optional string hardware = 3;
      case 3: {
        if (tag == 26) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubInterface.hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubInterface)
  return false;
#undef DO_
}

void SubInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubInterface)
  // required string interface = 1;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubInterface.interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interface(), output);
  }

  // required string flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubInterface.flags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->flags(), output);
  }

  // optional string hardware = 3;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubInterface.hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hardware(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubInterface)
}

::google::protobuf::uint8* SubInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubInterface)
  // required string interface = 1;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubInterface.interface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interface(), target);
  }

  // required string flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubInterface.flags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flags(), target);
  }

  // optional string hardware = 3;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubInterface.hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hardware(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubInterface)
  return target;
}

int SubInterface::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetDatasource.SubInterface)
  int total_size = 0;

  if (has_interface()) {
    // required string interface = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface());
  }

  if (has_flags()) {
    // required string flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flags());
  }

  return total_size;
}
int SubInterface::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubInterface)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string interface = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface());

    // required string flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string hardware = 3;
  if (has_hardware()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hardware());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubInterface)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubInterface* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubInterface)
    MergeFrom(*source);
  }
}

void SubInterface::MergeFrom(const SubInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubInterface)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interface()) {
      set_has_interface();
      interface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_);
    }
    if (from.has_flags()) {
      set_has_flags();
      flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flags_);
    }
    if (from.has_hardware()) {
      set_has_hardware();
      hardware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubInterface::CopyFrom(const SubInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubInterface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubInterface::Swap(SubInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubInterface::InternalSwap(SubInterface* other) {
  interface_.Swap(&other->interface_);
  flags_.Swap(&other->flags_);
  hardware_.Swap(&other->hardware_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubInterface_descriptor_;
  metadata.reflection = SubInterface_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubInterface

// required string interface = 1;
bool SubInterface::has_interface() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubInterface::set_has_interface() {
  _has_bits_[0] |= 0x00000001u;
}
void SubInterface::clear_has_interface() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubInterface::clear_interface() {
  interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_interface();
}
 const ::std::string& SubInterface::interface() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubInterface.interface)
  return interface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubInterface::set_interface(const ::std::string& value) {
  set_has_interface();
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubInterface.interface)
}
 void SubInterface::set_interface(const char* value) {
  set_has_interface();
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubInterface.interface)
}
 void SubInterface::set_interface(const char* value, size_t size) {
  set_has_interface();
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubInterface.interface)
}
 ::std::string* SubInterface::mutable_interface() {
  set_has_interface();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubInterface.interface)
  return interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubInterface::release_interface() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubInterface.interface)
  clear_has_interface();
  return interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubInterface::set_allocated_interface(::std::string* interface) {
  if (interface != NULL) {
    set_has_interface();
  } else {
    clear_has_interface();
  }
  interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubInterface.interface)
}

// required string flags = 2;
bool SubInterface::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubInterface::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void SubInterface::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubInterface::clear_flags() {
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_flags();
}
 const ::std::string& SubInterface::flags() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubInterface.flags)
  return flags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubInterface::set_flags(const ::std::string& value) {
  set_has_flags();
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubInterface.flags)
}
 void SubInterface::set_flags(const char* value) {
  set_has_flags();
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubInterface.flags)
}
 void SubInterface::set_flags(const char* value, size_t size) {
  set_has_flags();
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubInterface.flags)
}
 ::std::string* SubInterface::mutable_flags() {
  set_has_flags();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubInterface.flags)
  return flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubInterface::release_flags() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubInterface.flags)
  clear_has_flags();
  return flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubInterface::set_allocated_flags(::std::string* flags) {
  if (flags != NULL) {
    set_has_flags();
  } else {
    clear_has_flags();
  }
  flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flags);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubInterface.flags)
}

// optional string hardware = 3;
bool SubInterface::has_hardware() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubInterface::set_has_hardware() {
  _has_bits_[0] |= 0x00000004u;
}
void SubInterface::clear_has_hardware() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubInterface::clear_hardware() {
  hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware();
}
 const ::std::string& SubInterface::hardware() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubInterface.hardware)
  return hardware_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubInterface::set_hardware(const ::std::string& value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubInterface.hardware)
}
 void SubInterface::set_hardware(const char* value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubInterface.hardware)
}
 void SubInterface::set_hardware(const char* value, size_t size) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubInterface.hardware)
}
 ::std::string* SubInterface::mutable_hardware() {
  set_has_hardware();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubInterface.hardware)
  return hardware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubInterface::release_hardware() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubInterface.hardware)
  clear_has_hardware();
  return hardware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubInterface::set_allocated_hardware(::std::string* hardware) {
  if (hardware != NULL) {
    set_has_hardware();
  } else {
    clear_has_hardware();
  }
  hardware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubInterface.hardware)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SubMsgbus_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubMsgbus_MessageType_descriptor_;
}
bool SubMsgbus_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SubMsgbus_MessageType SubMsgbus::DEBUG;
const SubMsgbus_MessageType SubMsgbus::INFO;
const SubMsgbus_MessageType SubMsgbus::ERROR;
const SubMsgbus_MessageType SubMsgbus::ALERT;
const SubMsgbus_MessageType SubMsgbus::FATAL;
const SubMsgbus_MessageType SubMsgbus::MessageType_MIN;
const SubMsgbus_MessageType SubMsgbus::MessageType_MAX;
const int SubMsgbus::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubMsgbus::kMsgtypeFieldNumber;
const int SubMsgbus::kMsgtextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubMsgbus::SubMsgbus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubMsgbus)
}

void SubMsgbus::InitAsDefaultInstance() {
}

SubMsgbus::SubMsgbus(const SubMsgbus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubMsgbus)
}

void SubMsgbus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1;
  msgtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubMsgbus::~SubMsgbus() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubMsgbus)
  SharedDtor();
}

void SubMsgbus::SharedDtor() {
  msgtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubMsgbus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubMsgbus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubMsgbus_descriptor_;
}

const SubMsgbus& SubMsgbus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubMsgbus* SubMsgbus::default_instance_ = NULL;

SubMsgbus* SubMsgbus::New(::google::protobuf::Arena* arena) const {
  SubMsgbus* n = new SubMsgbus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubMsgbus::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubMsgbus)
  if (_has_bits_[0 / 32] & 3u) {
    msgtype_ = 1;
    if (has_msgtext()) {
      msgtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubMsgbus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubMsgbus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubMsgbus.MessageType msgtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KismetDatasource::SubMsgbus_MessageType_IsValid(value)) {
            set_msgtype(static_cast< ::KismetDatasource::SubMsgbus_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgtext;
        break;
      }

      // required string msgtext = 2;
      case 2: {
        if (tag == 18) {
         parse_msgtext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtext().data(), this->msgtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubMsgbus.msgtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubMsgbus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubMsgbus)
  return false;
#undef DO_
}

void SubMsgbus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubMsgbus)
  // required .KismetDatasource.SubMsgbus.MessageType msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required string msgtext = 2;
  if (has_msgtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtext().data(), this->msgtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubMsgbus.msgtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgtext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubMsgbus)
}

::google::protobuf::uint8* SubMsgbus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubMsgbus)
  // required .KismetDatasource.SubMsgbus.MessageType msgtype = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // required string msgtext = 2;
  if (has_msgtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtext().data(), this->msgtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubMsgbus.msgtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgtext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubMsgbus)
  return target;
}

int SubMsgbus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetDatasource.SubMsgbus)
  int total_size = 0;

  if (has_msgtype()) {
    // required .KismetDatasource.SubMsgbus.MessageType msgtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_msgtext()) {
    // required string msgtext = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgtext());
  }

  return total_size;
}
int SubMsgbus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubMsgbus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .KismetDatasource.SubMsgbus.MessageType msgtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required string msgtext = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgtext());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubMsgbus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubMsgbus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubMsgbus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubMsgbus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubMsgbus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubMsgbus)
    MergeFrom(*source);
  }
}

void SubMsgbus::MergeFrom(const SubMsgbus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubMsgbus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgtext()) {
      set_has_msgtext();
      msgtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgtext_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubMsgbus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubMsgbus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubMsgbus::CopyFrom(const SubMsgbus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubMsgbus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubMsgbus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubMsgbus::Swap(SubMsgbus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubMsgbus::InternalSwap(SubMsgbus* other) {
  std::swap(msgtype_, other->msgtype_);
  msgtext_.Swap(&other->msgtext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubMsgbus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubMsgbus_descriptor_;
  metadata.reflection = SubMsgbus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubMsgbus

// required .KismetDatasource.SubMsgbus.MessageType msgtype = 1;
bool SubMsgbus::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubMsgbus::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void SubMsgbus::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubMsgbus::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
 ::KismetDatasource::SubMsgbus_MessageType SubMsgbus::msgtype() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubMsgbus.msgtype)
  return static_cast< ::KismetDatasource::SubMsgbus_MessageType >(msgtype_);
}
 void SubMsgbus::set_msgtype(::KismetDatasource::SubMsgbus_MessageType value) {
  assert(::KismetDatasource::SubMsgbus_MessageType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubMsgbus.msgtype)
}

// required string msgtext = 2;
bool SubMsgbus::has_msgtext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubMsgbus::set_has_msgtext() {
  _has_bits_[0] |= 0x00000002u;
}
void SubMsgbus::clear_has_msgtext() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubMsgbus::clear_msgtext() {
  msgtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgtext();
}
 const ::std::string& SubMsgbus::msgtext() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubMsgbus.msgtext)
  return msgtext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubMsgbus::set_msgtext(const ::std::string& value) {
  set_has_msgtext();
  msgtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubMsgbus.msgtext)
}
 void SubMsgbus::set_msgtext(const char* value) {
  set_has_msgtext();
  msgtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubMsgbus.msgtext)
}
 void SubMsgbus::set_msgtext(const char* value, size_t size) {
  set_has_msgtext();
  msgtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubMsgbus.msgtext)
}
 ::std::string* SubMsgbus::mutable_msgtext() {
  set_has_msgtext();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubMsgbus.msgtext)
  return msgtext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubMsgbus::release_msgtext() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubMsgbus.msgtext)
  clear_has_msgtext();
  return msgtext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubMsgbus::set_allocated_msgtext(::std::string* msgtext) {
  if (msgtext != NULL) {
    set_has_msgtext();
  } else {
    clear_has_msgtext();
  }
  msgtext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgtext);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubMsgbus.msgtext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubPacket::kTimeSecFieldNumber;
const int SubPacket::kTimeUsecFieldNumber;
const int SubPacket::kDltFieldNumber;
const int SubPacket::kSizeFieldNumber;
const int SubPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubPacket::SubPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubPacket)
}

void SubPacket::InitAsDefaultInstance() {
}

SubPacket::SubPacket(const SubPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubPacket)
}

void SubPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_sec_ = GOOGLE_ULONGLONG(0);
  time_usec_ = GOOGLE_ULONGLONG(0);
  dlt_ = 0u;
  size_ = GOOGLE_ULONGLONG(0);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubPacket::~SubPacket() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubPacket)
  SharedDtor();
}

void SubPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubPacket_descriptor_;
}

const SubPacket& SubPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubPacket* SubPacket::default_instance_ = NULL;

SubPacket* SubPacket::New(::google::protobuf::Arena* arena) const {
  SubPacket* n = new SubPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubPacket)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubPacket, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubPacket*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(time_sec_, size_);
    dlt_ = 0u;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_usec;
        break;
      }

      // required uint64 time_usec = 2;
      case 2: {
        if (tag == 16) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dlt;
        break;
      }

      // required uint32 dlt = 3;
      case 3: {
        if (tag == 24) {
         parse_dlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlt_)));
          set_has_dlt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint64 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubPacket)
  return false;
#undef DO_
}

void SubPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubPacket)
  // required uint64 time_sec = 1;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_sec(), output);
  }

  // required uint64 time_usec = 2;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_usec(), output);
  }

  // required uint32 dlt = 3;
  if (has_dlt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dlt(), output);
  }

  // required uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubPacket)
}

::google::protobuf::uint8* SubPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubPacket)
  // required uint64 time_sec = 1;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_sec(), target);
  }

  // required uint64 time_usec = 2;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_usec(), target);
  }

  // required uint32 dlt = 3;
  if (has_dlt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dlt(), target);
  }

  // required uint64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubPacket)
  return target;
}

int SubPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetDatasource.SubPacket)
  int total_size = 0;

  if (has_time_sec()) {
    // required uint64 time_sec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_sec());
  }

  if (has_time_usec()) {
    // required uint64 time_usec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_usec());
  }

  if (has_dlt()) {
    // required uint32 dlt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dlt());
  }

  if (has_size()) {
    // required uint64 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_data()) {
    // required bytes data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int SubPacket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubPacket)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 time_sec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_sec());

    // required uint64 time_usec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_usec());

    // required uint32 dlt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dlt());

    // required uint64 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required bytes data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubPacket)
    MergeFrom(*source);
  }
}

void SubPacket::MergeFrom(const SubPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_dlt()) {
      set_dlt(from.dlt());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubPacket::CopyFrom(const SubPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SubPacket::Swap(SubPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubPacket::InternalSwap(SubPacket* other) {
  std::swap(time_sec_, other->time_sec_);
  std::swap(time_usec_, other->time_usec_);
  std::swap(dlt_, other->dlt_);
  std::swap(size_, other->size_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubPacket_descriptor_;
  metadata.reflection = SubPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubPacket

// required uint64 time_sec = 1;
bool SubPacket::has_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubPacket::set_has_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void SubPacket::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubPacket::clear_time_sec() {
  time_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_sec();
}
 ::google::protobuf::uint64 SubPacket::time_sec() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubPacket.time_sec)
  return time_sec_;
}
 void SubPacket::set_time_sec(::google::protobuf::uint64 value) {
  set_has_time_sec();
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubPacket.time_sec)
}

// required uint64 time_usec = 2;
bool SubPacket::has_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubPacket::set_has_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void SubPacket::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubPacket::clear_time_usec() {
  time_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::uint64 SubPacket::time_usec() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubPacket.time_usec)
  return time_usec_;
}
 void SubPacket::set_time_usec(::google::protobuf::uint64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubPacket.time_usec)
}

// required uint32 dlt = 3;
bool SubPacket::has_dlt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubPacket::set_has_dlt() {
  _has_bits_[0] |= 0x00000004u;
}
void SubPacket::clear_has_dlt() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubPacket::clear_dlt() {
  dlt_ = 0u;
  clear_has_dlt();
}
 ::google::protobuf::uint32 SubPacket::dlt() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubPacket.dlt)
  return dlt_;
}
 void SubPacket::set_dlt(::google::protobuf::uint32 value) {
  set_has_dlt();
  dlt_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubPacket.dlt)
}

// required uint64 size = 4;
bool SubPacket::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubPacket::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void SubPacket::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubPacket::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 SubPacket::size() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubPacket.size)
  return size_;
}
 void SubPacket::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubPacket.size)
}

// required bytes data = 5;
bool SubPacket::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubPacket::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
void SubPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& SubPacket::data() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubPacket.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubPacket::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubPacket.data)
}
 void SubPacket::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubPacket.data)
}
 void SubPacket::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubPacket.data)
}
 ::std::string* SubPacket::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubPacket::release_data() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubPacket.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubPacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubSignal::kSignalDbmFieldNumber;
const int SubSignal::kNoiseDbmFieldNumber;
const int SubSignal::kSignalRssiFieldNumber;
const int SubSignal::kNoiseRssiFieldNumber;
const int SubSignal::kFreqKhzFieldNumber;
const int SubSignal::kChannelFieldNumber;
const int SubSignal::kDatarateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubSignal::SubSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSignal)
}

void SubSignal::InitAsDefaultInstance() {
}

SubSignal::SubSignal(const SubSignal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSignal)
}

void SubSignal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signal_dbm_ = 0;
  noise_dbm_ = 0;
  signal_rssi_ = 0;
  noise_rssi_ = 0;
  freq_khz_ = 0;
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datarate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSignal::~SubSignal() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSignal)
  SharedDtor();
}

void SubSignal::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSignal_descriptor_;
}

const SubSignal& SubSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSignal* SubSignal::default_instance_ = NULL;

SubSignal* SubSignal::New(::google::protobuf::Arena* arena) const {
  SubSignal* n = new SubSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubSignal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubSignal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubSignal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(signal_dbm_, freq_khz_);
    if (has_channel()) {
      channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    datarate_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double signal_dbm = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_dbm_)));
          set_has_signal_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_noise_dbm;
        break;
      }

      // optional double noise_dbm = 2;
      case 2: {
        if (tag == 17) {
         parse_noise_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &noise_dbm_)));
          set_has_noise_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_signal_rssi;
        break;
      }

      // optional double signal_rssi = 3;
      case 3: {
        if (tag == 25) {
         parse_signal_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_rssi_)));
          set_has_signal_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_noise_rssi;
        break;
      }

      // optional double noise_rssi = 4;
      case 4: {
        if (tag == 33) {
         parse_noise_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &noise_rssi_)));
          set_has_noise_rssi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_freq_khz;
        break;
      }

      // optional double freq_khz = 5;
      case 5: {
        if (tag == 41) {
         parse_freq_khz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_khz_)));
          set_has_freq_khz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (tag == 50) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.SubSignal.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_datarate;
        break;
      }

      // optional double datarate = 7;
      case 7: {
        if (tag == 57) {
         parse_datarate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datarate_)));
          set_has_datarate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSignal)
  return false;
#undef DO_
}

void SubSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSignal)
  // optional double signal_dbm = 1;
  if (has_signal_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->signal_dbm(), output);
  }

  // optional double noise_dbm = 2;
  if (has_noise_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->noise_dbm(), output);
  }

  // optional double signal_rssi = 3;
  if (has_signal_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->signal_rssi(), output);
  }

  // optional double noise_rssi = 4;
  if (has_noise_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->noise_rssi(), output);
  }

  // optional double freq_khz = 5;
  if (has_freq_khz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->freq_khz(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubSignal.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->channel(), output);
  }

  // optional double datarate = 7;
  if (has_datarate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->datarate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSignal)
}

::google::protobuf::uint8* SubSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSignal)
  // optional double signal_dbm = 1;
  if (has_signal_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->signal_dbm(), target);
  }

  // optional double noise_dbm = 2;
  if (has_noise_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->noise_dbm(), target);
  }

  // optional double signal_rssi = 3;
  if (has_signal_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->signal_rssi(), target);
  }

  // optional double noise_rssi = 4;
  if (has_noise_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->noise_rssi(), target);
  }

  // optional double freq_khz = 5;
  if (has_freq_khz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->freq_khz(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.SubSignal.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // optional double datarate = 7;
  if (has_datarate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->datarate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSignal)
  return target;
}

int SubSignal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubSignal)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional double signal_dbm = 1;
    if (has_signal_dbm()) {
      total_size += 1 + 8;
    }

    // optional double noise_dbm = 2;
    if (has_noise_dbm()) {
      total_size += 1 + 8;
    }

    // optional double signal_rssi = 3;
    if (has_signal_rssi()) {
      total_size += 1 + 8;
    }

    // optional double noise_rssi = 4;
    if (has_noise_rssi()) {
      total_size += 1 + 8;
    }

    // optional double freq_khz = 5;
    if (has_freq_khz()) {
      total_size += 1 + 8;
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional double datarate = 7;
    if (has_datarate()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubSignal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubSignal)
    MergeFrom(*source);
  }
}

void SubSignal::MergeFrom(const SubSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_dbm()) {
      set_signal_dbm(from.signal_dbm());
    }
    if (from.has_noise_dbm()) {
      set_noise_dbm(from.noise_dbm());
    }
    if (from.has_signal_rssi()) {
      set_signal_rssi(from.signal_rssi());
    }
    if (from.has_noise_rssi()) {
      set_noise_rssi(from.noise_rssi());
    }
    if (from.has_freq_khz()) {
      set_freq_khz(from.freq_khz());
    }
    if (from.has_channel()) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (from.has_datarate()) {
      set_datarate(from.datarate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSignal::CopyFrom(const SubSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSignal::IsInitialized() const {

  return true;
}

void SubSignal::Swap(SubSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubSignal::InternalSwap(SubSignal* other) {
  std::swap(signal_dbm_, other->signal_dbm_);
  std::swap(noise_dbm_, other->noise_dbm_);
  std::swap(signal_rssi_, other->signal_rssi_);
  std::swap(noise_rssi_, other->noise_rssi_);
  std::swap(freq_khz_, other->freq_khz_);
  channel_.Swap(&other->channel_);
  std::swap(datarate_, other->datarate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSignal_descriptor_;
  metadata.reflection = SubSignal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubSignal

// optional double signal_dbm = 1;
bool SubSignal::has_signal_dbm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubSignal::set_has_signal_dbm() {
  _has_bits_[0] |= 0x00000001u;
}
void SubSignal::clear_has_signal_dbm() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubSignal::clear_signal_dbm() {
  signal_dbm_ = 0;
  clear_has_signal_dbm();
}
 double SubSignal::signal_dbm() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.signal_dbm)
  return signal_dbm_;
}
 void SubSignal::set_signal_dbm(double value) {
  set_has_signal_dbm();
  signal_dbm_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.signal_dbm)
}

// optional double noise_dbm = 2;
bool SubSignal::has_noise_dbm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubSignal::set_has_noise_dbm() {
  _has_bits_[0] |= 0x00000002u;
}
void SubSignal::clear_has_noise_dbm() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubSignal::clear_noise_dbm() {
  noise_dbm_ = 0;
  clear_has_noise_dbm();
}
 double SubSignal::noise_dbm() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.noise_dbm)
  return noise_dbm_;
}
 void SubSignal::set_noise_dbm(double value) {
  set_has_noise_dbm();
  noise_dbm_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.noise_dbm)
}

// optional double signal_rssi = 3;
bool SubSignal::has_signal_rssi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubSignal::set_has_signal_rssi() {
  _has_bits_[0] |= 0x00000004u;
}
void SubSignal::clear_has_signal_rssi() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubSignal::clear_signal_rssi() {
  signal_rssi_ = 0;
  clear_has_signal_rssi();
}
 double SubSignal::signal_rssi() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.signal_rssi)
  return signal_rssi_;
}
 void SubSignal::set_signal_rssi(double value) {
  set_has_signal_rssi();
  signal_rssi_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.signal_rssi)
}

// optional double noise_rssi = 4;
bool SubSignal::has_noise_rssi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubSignal::set_has_noise_rssi() {
  _has_bits_[0] |= 0x00000008u;
}
void SubSignal::clear_has_noise_rssi() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubSignal::clear_noise_rssi() {
  noise_rssi_ = 0;
  clear_has_noise_rssi();
}
 double SubSignal::noise_rssi() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.noise_rssi)
  return noise_rssi_;
}
 void SubSignal::set_noise_rssi(double value) {
  set_has_noise_rssi();
  noise_rssi_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.noise_rssi)
}

// optional double freq_khz = 5;
bool SubSignal::has_freq_khz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubSignal::set_has_freq_khz() {
  _has_bits_[0] |= 0x00000010u;
}
void SubSignal::clear_has_freq_khz() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubSignal::clear_freq_khz() {
  freq_khz_ = 0;
  clear_has_freq_khz();
}
 double SubSignal::freq_khz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.freq_khz)
  return freq_khz_;
}
 void SubSignal::set_freq_khz(double value) {
  set_has_freq_khz();
  freq_khz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.freq_khz)
}

// optional string channel = 6;
bool SubSignal::has_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SubSignal::set_has_channel() {
  _has_bits_[0] |= 0x00000020u;
}
void SubSignal::clear_has_channel() {
  _has_bits_[0] &= ~0x00000020u;
}
void SubSignal::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
 const ::std::string& SubSignal::channel() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.channel)
  return channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubSignal::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.channel)
}
 void SubSignal::set_channel(const char* value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.SubSignal.channel)
}
 void SubSignal::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.SubSignal.channel)
}
 ::std::string* SubSignal::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.SubSignal.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubSignal::release_channel() {
  // @@protoc_insertion_point(field_release:KismetDatasource.SubSignal.channel)
  clear_has_channel();
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubSignal::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.SubSignal.channel)
}

// optional double datarate = 7;
bool SubSignal::has_datarate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SubSignal::set_has_datarate() {
  _has_bits_[0] |= 0x00000040u;
}
void SubSignal::clear_has_datarate() {
  _has_bits_[0] &= ~0x00000040u;
}
void SubSignal::clear_datarate() {
  datarate_ = 0;
  clear_has_datarate();
}
 double SubSignal::datarate() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSignal.datarate)
  return datarate_;
}
 void SubSignal::set_datarate(double value) {
  set_has_datarate();
  datarate_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSignal.datarate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubSpecset::kStartMhzFieldNumber;
const int SubSpecset::kEndMhzFieldNumber;
const int SubSpecset::kSamplesPerBucketFieldNumber;
const int SubSpecset::kBucketWidthHzFieldNumber;
const int SubSpecset::kEnableAmpFieldNumber;
const int SubSpecset::kIfAmpFieldNumber;
const int SubSpecset::kBasebandAmpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubSpecset::SubSpecset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSpecset)
}

void SubSpecset::InitAsDefaultInstance() {
}

SubSpecset::SubSpecset(const SubSpecset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSpecset)
}

void SubSpecset::SharedCtor() {
  _cached_size_ = 0;
  start_mhz_ = 0;
  end_mhz_ = 0;
  samples_per_bucket_ = 0;
  bucket_width_hz_ = 0;
  enable_amp_ = false;
  if_amp_ = GOOGLE_ULONGLONG(0);
  baseband_amp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSpecset::~SubSpecset() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSpecset)
  SharedDtor();
}

void SubSpecset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSpecset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSpecset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSpecset_descriptor_;
}

const SubSpecset& SubSpecset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSpecset* SubSpecset::default_instance_ = NULL;

SubSpecset* SubSpecset::New(::google::protobuf::Arena* arena) const {
  SubSpecset* n = new SubSpecset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubSpecset::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubSpecset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubSpecset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubSpecset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(start_mhz_, enable_amp_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubSpecset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSpecset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_mhz = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_mhz_)));
          set_has_start_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_end_mhz;
        break;
      }

      // optional double end_mhz = 2;
      case 2: {
        if (tag == 17) {
         parse_end_mhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_mhz_)));
          set_has_end_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_samples_per_bucket;
        break;
      }

      // optional double samples_per_bucket = 3;
      case 3: {
        if (tag == 25) {
         parse_samples_per_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samples_per_bucket_)));
          set_has_samples_per_bucket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bucket_width_hz;
        break;
      }

      // optional double bucket_width_hz = 4;
      case 4: {
        if (tag == 33) {
         parse_bucket_width_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bucket_width_hz_)));
          set_has_bucket_width_hz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enable_amp;
        break;
      }

      // optional bool enable_amp = 5;
      case 5: {
        if (tag == 40) {
         parse_enable_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_amp_)));
          set_has_enable_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_if_amp;
        break;
      }

      // optional uint64 if_amp = 6;
      case 6: {
        if (tag == 48) {
         parse_if_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &if_amp_)));
          set_has_if_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_baseband_amp;
        break;
      }

      // optional uint64 baseband_amp = 7;
      case 7: {
        if (tag == 56) {
         parse_baseband_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseband_amp_)));
          set_has_baseband_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSpecset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSpecset)
  return false;
#undef DO_
}

void SubSpecset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSpecset)
  // optional double start_mhz = 1;
  if (has_start_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_mhz(), output);
  }

  // optional double end_mhz = 2;
  if (has_end_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_mhz(), output);
  }

  // optional double samples_per_bucket = 3;
  if (has_samples_per_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->samples_per_bucket(), output);
  }

  // optional double bucket_width_hz = 4;
  if (has_bucket_width_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bucket_width_hz(), output);
  }

  // optional bool enable_amp = 5;
  if (has_enable_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_amp(), output);
  }

  // optional uint64 if_amp = 6;
  if (has_if_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->if_amp(), output);
  }

  // optional uint64 baseband_amp = 7;
  if (has_baseband_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->baseband_amp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSpecset)
}

::google::protobuf::uint8* SubSpecset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSpecset)
  // optional double start_mhz = 1;
  if (has_start_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_mhz(), target);
  }

  // optional double end_mhz = 2;
  if (has_end_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_mhz(), target);
  }

  // optional double samples_per_bucket = 3;
  if (has_samples_per_bucket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->samples_per_bucket(), target);
  }

  // optional double bucket_width_hz = 4;
  if (has_bucket_width_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bucket_width_hz(), target);
  }

  // optional bool enable_amp = 5;
  if (has_enable_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_amp(), target);
  }

  // optional uint64 if_amp = 6;
  if (has_if_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->if_amp(), target);
  }

  // optional uint64 baseband_amp = 7;
  if (has_baseband_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->baseband_amp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSpecset)
  return target;
}

int SubSpecset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubSpecset)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional double start_mhz = 1;
    if (has_start_mhz()) {
      total_size += 1 + 8;
    }

    // optional double end_mhz = 2;
    if (has_end_mhz()) {
      total_size += 1 + 8;
    }

    // optional double samples_per_bucket = 3;
    if (has_samples_per_bucket()) {
      total_size += 1 + 8;
    }

    // optional double bucket_width_hz = 4;
    if (has_bucket_width_hz()) {
      total_size += 1 + 8;
    }

    // optional bool enable_amp = 5;
    if (has_enable_amp()) {
      total_size += 1 + 1;
    }

    // optional uint64 if_amp = 6;
    if (has_if_amp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->if_amp());
    }

    // optional uint64 baseband_amp = 7;
    if (has_baseband_amp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->baseband_amp());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSpecset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubSpecset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubSpecset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubSpecset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubSpecset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubSpecset)
    MergeFrom(*source);
  }
}

void SubSpecset::MergeFrom(const SubSpecset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubSpecset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_mhz()) {
      set_start_mhz(from.start_mhz());
    }
    if (from.has_end_mhz()) {
      set_end_mhz(from.end_mhz());
    }
    if (from.has_samples_per_bucket()) {
      set_samples_per_bucket(from.samples_per_bucket());
    }
    if (from.has_bucket_width_hz()) {
      set_bucket_width_hz(from.bucket_width_hz());
    }
    if (from.has_enable_amp()) {
      set_enable_amp(from.enable_amp());
    }
    if (from.has_if_amp()) {
      set_if_amp(from.if_amp());
    }
    if (from.has_baseband_amp()) {
      set_baseband_amp(from.baseband_amp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubSpecset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubSpecset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSpecset::CopyFrom(const SubSpecset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubSpecset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSpecset::IsInitialized() const {

  return true;
}

void SubSpecset::Swap(SubSpecset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubSpecset::InternalSwap(SubSpecset* other) {
  std::swap(start_mhz_, other->start_mhz_);
  std::swap(end_mhz_, other->end_mhz_);
  std::swap(samples_per_bucket_, other->samples_per_bucket_);
  std::swap(bucket_width_hz_, other->bucket_width_hz_);
  std::swap(enable_amp_, other->enable_amp_);
  std::swap(if_amp_, other->if_amp_);
  std::swap(baseband_amp_, other->baseband_amp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubSpecset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSpecset_descriptor_;
  metadata.reflection = SubSpecset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubSpecset

// optional double start_mhz = 1;
bool SubSpecset::has_start_mhz() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubSpecset::set_has_start_mhz() {
  _has_bits_[0] |= 0x00000001u;
}
void SubSpecset::clear_has_start_mhz() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubSpecset::clear_start_mhz() {
  start_mhz_ = 0;
  clear_has_start_mhz();
}
 double SubSpecset::start_mhz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.start_mhz)
  return start_mhz_;
}
 void SubSpecset::set_start_mhz(double value) {
  set_has_start_mhz();
  start_mhz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.start_mhz)
}

// optional double end_mhz = 2;
bool SubSpecset::has_end_mhz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubSpecset::set_has_end_mhz() {
  _has_bits_[0] |= 0x00000002u;
}
void SubSpecset::clear_has_end_mhz() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubSpecset::clear_end_mhz() {
  end_mhz_ = 0;
  clear_has_end_mhz();
}
 double SubSpecset::end_mhz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.end_mhz)
  return end_mhz_;
}
 void SubSpecset::set_end_mhz(double value) {
  set_has_end_mhz();
  end_mhz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.end_mhz)
}

// optional double samples_per_bucket = 3;
bool SubSpecset::has_samples_per_bucket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubSpecset::set_has_samples_per_bucket() {
  _has_bits_[0] |= 0x00000004u;
}
void SubSpecset::clear_has_samples_per_bucket() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubSpecset::clear_samples_per_bucket() {
  samples_per_bucket_ = 0;
  clear_has_samples_per_bucket();
}
 double SubSpecset::samples_per_bucket() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.samples_per_bucket)
  return samples_per_bucket_;
}
 void SubSpecset::set_samples_per_bucket(double value) {
  set_has_samples_per_bucket();
  samples_per_bucket_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.samples_per_bucket)
}

// optional double bucket_width_hz = 4;
bool SubSpecset::has_bucket_width_hz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubSpecset::set_has_bucket_width_hz() {
  _has_bits_[0] |= 0x00000008u;
}
void SubSpecset::clear_has_bucket_width_hz() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubSpecset::clear_bucket_width_hz() {
  bucket_width_hz_ = 0;
  clear_has_bucket_width_hz();
}
 double SubSpecset::bucket_width_hz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.bucket_width_hz)
  return bucket_width_hz_;
}
 void SubSpecset::set_bucket_width_hz(double value) {
  set_has_bucket_width_hz();
  bucket_width_hz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.bucket_width_hz)
}

// optional bool enable_amp = 5;
bool SubSpecset::has_enable_amp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubSpecset::set_has_enable_amp() {
  _has_bits_[0] |= 0x00000010u;
}
void SubSpecset::clear_has_enable_amp() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubSpecset::clear_enable_amp() {
  enable_amp_ = false;
  clear_has_enable_amp();
}
 bool SubSpecset::enable_amp() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.enable_amp)
  return enable_amp_;
}
 void SubSpecset::set_enable_amp(bool value) {
  set_has_enable_amp();
  enable_amp_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.enable_amp)
}

// optional uint64 if_amp = 6;
bool SubSpecset::has_if_amp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SubSpecset::set_has_if_amp() {
  _has_bits_[0] |= 0x00000020u;
}
void SubSpecset::clear_has_if_amp() {
  _has_bits_[0] &= ~0x00000020u;
}
void SubSpecset::clear_if_amp() {
  if_amp_ = GOOGLE_ULONGLONG(0);
  clear_has_if_amp();
}
 ::google::protobuf::uint64 SubSpecset::if_amp() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.if_amp)
  return if_amp_;
}
 void SubSpecset::set_if_amp(::google::protobuf::uint64 value) {
  set_has_if_amp();
  if_amp_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.if_amp)
}

// optional uint64 baseband_amp = 7;
bool SubSpecset::has_baseband_amp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SubSpecset::set_has_baseband_amp() {
  _has_bits_[0] |= 0x00000040u;
}
void SubSpecset::clear_has_baseband_amp() {
  _has_bits_[0] &= ~0x00000040u;
}
void SubSpecset::clear_baseband_amp() {
  baseband_amp_ = GOOGLE_ULONGLONG(0);
  clear_has_baseband_amp();
}
 ::google::protobuf::uint64 SubSpecset::baseband_amp() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpecset.baseband_amp)
  return baseband_amp_;
}
 void SubSpecset::set_baseband_amp(::google::protobuf::uint64 value) {
  set_has_baseband_amp();
  baseband_amp_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpecset.baseband_amp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubSpectrum::kTimeSecFieldNumber;
const int SubSpectrum::kTimeUsecFieldNumber;
const int SubSpectrum::kStartMhzFieldNumber;
const int SubSpectrum::kEndMhzFieldNumber;
const int SubSpectrum::kBucketWidthHzFieldNumber;
const int SubSpectrum::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubSpectrum::SubSpectrum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSpectrum)
}

void SubSpectrum::InitAsDefaultInstance() {
}

SubSpectrum::SubSpectrum(const SubSpectrum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSpectrum)
}

void SubSpectrum::SharedCtor() {
  _cached_size_ = 0;
  time_sec_ = GOOGLE_ULONGLONG(0);
  time_usec_ = GOOGLE_ULONGLONG(0);
  start_mhz_ = 0;
  end_mhz_ = 0;
  bucket_width_hz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSpectrum::~SubSpectrum() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSpectrum)
  SharedDtor();
}

void SubSpectrum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSpectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSpectrum_descriptor_;
}

const SubSpectrum& SubSpectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSpectrum* SubSpectrum::default_instance_ = NULL;

SubSpectrum* SubSpectrum::New(::google::protobuf::Arena* arena) const {
  SubSpectrum* n = new SubSpectrum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubSpectrum::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubSpectrum)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubSpectrum, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubSpectrum*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(time_sec_, bucket_width_hz_);
  }

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSpectrum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time_sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_usec;
        break;
      }

      // optional uint64 time_usec = 2;
      case 2: {
        if (tag == 16) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_start_mhz;
        break;
      }

      // optional double start_mhz = 3;
      case 3: {
        if (tag == 25) {
         parse_start_mhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_mhz_)));
          set_has_start_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_end_mhz;
        break;
      }

      // optional double end_mhz = 4;
      case 4: {
        if (tag == 33) {
         parse_end_mhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_mhz_)));
          set_has_end_mhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bucket_width_hz;
        break;
      }

      // optional double bucket_width_hz = 5;
      case 5: {
        if (tag == 41) {
         parse_bucket_width_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bucket_width_hz_)));
          set_has_bucket_width_hz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data;
        break;
      }

      // repeated int32 data = 6;
      case 6: {
        if (tag == 48) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_data())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSpectrum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSpectrum)
  return false;
#undef DO_
}

void SubSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSpectrum)
  // optional uint64 time_sec = 1;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_sec(), output);
  }

  // optional uint64 time_usec = 2;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_usec(), output);
  }

  // optional double start_mhz = 3;
  if (has_start_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_mhz(), output);
  }

  // optional double end_mhz = 4;
  if (has_end_mhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_mhz(), output);
  }

  // optional double bucket_width_hz = 5;
  if (has_bucket_width_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bucket_width_hz(), output);
  }

  // repeated int32 data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSpectrum)
}

::google::protobuf::uint8* SubSpectrum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSpectrum)
  // optional uint64 time_sec = 1;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_sec(), target);
  }

  // optional uint64 time_usec = 2;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_usec(), target);
  }

  // optional double start_mhz = 3;
  if (has_start_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_mhz(), target);
  }

  // optional double end_mhz = 4;
  if (has_end_mhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_mhz(), target);
  }

  // optional double bucket_width_hz = 5;
  if (has_bucket_width_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bucket_width_hz(), target);
  }

  // repeated int32 data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSpectrum)
  return target;
}

int SubSpectrum::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubSpectrum)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 time_sec = 1;
    if (has_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_sec());
    }

    // optional uint64 time_usec = 2;
    if (has_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_usec());
    }

    // optional double start_mhz = 3;
    if (has_start_mhz()) {
      total_size += 1 + 8;
    }

    // optional double end_mhz = 4;
    if (has_end_mhz()) {
      total_size += 1 + 8;
    }

    // optional double bucket_width_hz = 5;
    if (has_bucket_width_hz()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 data = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSpectrum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubSpectrum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubSpectrum* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubSpectrum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubSpectrum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubSpectrum)
    MergeFrom(*source);
  }
}

void SubSpectrum::MergeFrom(const SubSpectrum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubSpectrum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_start_mhz()) {
      set_start_mhz(from.start_mhz());
    }
    if (from.has_end_mhz()) {
      set_end_mhz(from.end_mhz());
    }
    if (from.has_bucket_width_hz()) {
      set_bucket_width_hz(from.bucket_width_hz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubSpectrum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubSpectrum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSpectrum::CopyFrom(const SubSpectrum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubSpectrum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSpectrum::IsInitialized() const {

  return true;
}

void SubSpectrum::Swap(SubSpectrum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubSpectrum::InternalSwap(SubSpectrum* other) {
  std::swap(time_sec_, other->time_sec_);
  std::swap(time_usec_, other->time_usec_);
  std::swap(start_mhz_, other->start_mhz_);
  std::swap(end_mhz_, other->end_mhz_);
  std::swap(bucket_width_hz_, other->bucket_width_hz_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubSpectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSpectrum_descriptor_;
  metadata.reflection = SubSpectrum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubSpectrum

// optional uint64 time_sec = 1;
bool SubSpectrum::has_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubSpectrum::set_has_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void SubSpectrum::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubSpectrum::clear_time_sec() {
  time_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_sec();
}
 ::google::protobuf::uint64 SubSpectrum::time_sec() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpectrum.time_sec)
  return time_sec_;
}
 void SubSpectrum::set_time_sec(::google::protobuf::uint64 value) {
  set_has_time_sec();
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpectrum.time_sec)
}

// optional uint64 time_usec = 2;
bool SubSpectrum::has_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubSpectrum::set_has_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void SubSpectrum::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubSpectrum::clear_time_usec() {
  time_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::uint64 SubSpectrum::time_usec() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpectrum.time_usec)
  return time_usec_;
}
 void SubSpectrum::set_time_usec(::google::protobuf::uint64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpectrum.time_usec)
}

// optional double start_mhz = 3;
bool SubSpectrum::has_start_mhz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubSpectrum::set_has_start_mhz() {
  _has_bits_[0] |= 0x00000004u;
}
void SubSpectrum::clear_has_start_mhz() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubSpectrum::clear_start_mhz() {
  start_mhz_ = 0;
  clear_has_start_mhz();
}
 double SubSpectrum::start_mhz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpectrum.start_mhz)
  return start_mhz_;
}
 void SubSpectrum::set_start_mhz(double value) {
  set_has_start_mhz();
  start_mhz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpectrum.start_mhz)
}

// optional double end_mhz = 4;
bool SubSpectrum::has_end_mhz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubSpectrum::set_has_end_mhz() {
  _has_bits_[0] |= 0x00000008u;
}
void SubSpectrum::clear_has_end_mhz() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubSpectrum::clear_end_mhz() {
  end_mhz_ = 0;
  clear_has_end_mhz();
}
 double SubSpectrum::end_mhz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpectrum.end_mhz)
  return end_mhz_;
}
 void SubSpectrum::set_end_mhz(double value) {
  set_has_end_mhz();
  end_mhz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpectrum.end_mhz)
}

// optional double bucket_width_hz = 5;
bool SubSpectrum::has_bucket_width_hz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubSpectrum::set_has_bucket_width_hz() {
  _has_bits_[0] |= 0x00000010u;
}
void SubSpectrum::clear_has_bucket_width_hz() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubSpectrum::clear_bucket_width_hz() {
  bucket_width_hz_ = 0;
  clear_has_bucket_width_hz();
}
 double SubSpectrum::bucket_width_hz() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpectrum.bucket_width_hz)
  return bucket_width_hz_;
}
 void SubSpectrum::set_bucket_width_hz(double value) {
  set_has_bucket_width_hz();
  bucket_width_hz_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpectrum.bucket_width_hz)
}

// repeated int32 data = 6;
int SubSpectrum::data_size() const {
  return data_.size();
}
void SubSpectrum::clear_data() {
  data_.Clear();
}
 ::google::protobuf::int32 SubSpectrum::data(int index) const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSpectrum.data)
  return data_.Get(index);
}
 void SubSpectrum::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSpectrum.data)
}
 void SubSpectrum::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:KismetDatasource.SubSpectrum.data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SubSpectrum::data() const {
  // @@protoc_insertion_point(field_list:KismetDatasource.SubSpectrum.data)
  return data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SubSpectrum::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:KismetDatasource.SubSpectrum.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubSuccess::kSuccessFieldNumber;
const int SubSuccess::kCommandNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubSuccess::SubSuccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.SubSuccess)
}

void SubSuccess::InitAsDefaultInstance() {
}

SubSuccess::SubSuccess(const SubSuccess& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.SubSuccess)
}

void SubSuccess::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  command_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubSuccess::~SubSuccess() {
  // @@protoc_insertion_point(destructor:KismetDatasource.SubSuccess)
  SharedDtor();
}

void SubSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubSuccess_descriptor_;
}

const SubSuccess& SubSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

SubSuccess* SubSuccess::default_instance_ = NULL;

SubSuccess* SubSuccess::New(::google::protobuf::Arena* arena) const {
  SubSuccess* n = new SubSuccess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.SubSuccess)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubSuccess, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubSuccess*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, command_num_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.SubSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command_num;
        break;
      }

      // required uint32 command_num = 2;
      case 2: {
        if (tag == 16) {
         parse_command_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_num_)));
          set_has_command_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.SubSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.SubSuccess)
  return false;
#undef DO_
}

void SubSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.SubSuccess)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required uint32 command_num = 2;
  if (has_command_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->command_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.SubSuccess)
}

::google::protobuf::uint8* SubSuccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.SubSuccess)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required uint32 command_num = 2;
  if (has_command_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->command_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.SubSuccess)
  return target;
}

int SubSuccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetDatasource.SubSuccess)
  int total_size = 0;

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_command_num()) {
    // required uint32 command_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_num());
  }

  return total_size;
}
int SubSuccess::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.SubSuccess)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool success = 1;
    total_size += 1 + 1;

    // required uint32 command_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubSuccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.SubSuccess)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubSuccess* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubSuccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.SubSuccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.SubSuccess)
    MergeFrom(*source);
  }
}

void SubSuccess::MergeFrom(const SubSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.SubSuccess)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_command_num()) {
      set_command_num(from.command_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubSuccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.SubSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubSuccess::CopyFrom(const SubSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.SubSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubSuccess::Swap(SubSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubSuccess::InternalSwap(SubSuccess* other) {
  std::swap(success_, other->success_);
  std::swap(command_num_, other->command_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubSuccess_descriptor_;
  metadata.reflection = SubSuccess_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubSuccess

// required bool success = 1;
bool SubSuccess::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubSuccess::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void SubSuccess::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubSuccess::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool SubSuccess::success() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSuccess.success)
  return success_;
}
 void SubSuccess::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSuccess.success)
}

// required uint32 command_num = 2;
bool SubSuccess::has_command_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubSuccess::set_has_command_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SubSuccess::clear_has_command_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubSuccess::clear_command_num() {
  command_num_ = 0u;
  clear_has_command_num();
}
 ::google::protobuf::uint32 SubSuccess::command_num() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.SubSuccess.command_num)
  return command_num_;
}
 void SubSuccess::set_command_num(::google::protobuf::uint32 value) {
  set_has_command_num();
  command_num_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.SubSuccess.command_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channels::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channels::Channels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.Channels)
}

void Channels::InitAsDefaultInstance() {
  channels_ = const_cast< ::KismetDatasource::SubChannels*>(&::KismetDatasource::SubChannels::default_instance());
}

Channels::Channels(const Channels& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.Channels)
}

void Channels::SharedCtor() {
  _cached_size_ = 0;
  channels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channels::~Channels() {
  // @@protoc_insertion_point(destructor:KismetDatasource.Channels)
  SharedDtor();
}

void Channels::SharedDtor() {
  if (this != default_instance_) {
    delete channels_;
  }
}

void Channels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channels_descriptor_;
}

const Channels& Channels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

Channels* Channels::default_instance_ = NULL;

Channels* Channels::New(::google::protobuf::Arena* arena) const {
  Channels* n = new Channels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channels::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.Channels)
  if (has_channels()) {
    if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Channels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.Channels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubChannels channels = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.Channels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.Channels)
  return false;
#undef DO_
}

void Channels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.Channels)
  // required .KismetDatasource.SubChannels channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->channels_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.Channels)
}

::google::protobuf::uint8* Channels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.Channels)
  // required .KismetDatasource.SubChannels channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->channels_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.Channels)
  return target;
}

int Channels::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.Channels)
  int total_size = 0;

  // required .KismetDatasource.SubChannels channels = 1;
  if (has_channels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->channels_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.Channels)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Channels* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Channels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.Channels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.Channels)
    MergeFrom(*source);
  }
}

void Channels::MergeFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.Channels)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      mutable_channels()->::KismetDatasource::SubChannels::MergeFrom(from.channels());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Channels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channels::CopyFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channels::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Channels::Swap(Channels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channels::InternalSwap(Channels* other) {
  std::swap(channels_, other->channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channels_descriptor_;
  metadata.reflection = Channels_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channels

// required .KismetDatasource.SubChannels channels = 1;
bool Channels::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Channels::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
void Channels::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
void Channels::clear_channels() {
  if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
  clear_has_channels();
}
const ::KismetDatasource::SubChannels& Channels::channels() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.Channels.channels)
  return channels_ != NULL ? *channels_ : *default_instance_->channels_;
}
::KismetDatasource::SubChannels* Channels::mutable_channels() {
  set_has_channels();
  if (channels_ == NULL) {
    channels_ = new ::KismetDatasource::SubChannels;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.Channels.channels)
  return channels_;
}
::KismetDatasource::SubChannels* Channels::release_channels() {
  // @@protoc_insertion_point(field_release:KismetDatasource.Channels.channels)
  clear_has_channels();
  ::KismetDatasource::SubChannels* temp = channels_;
  channels_ = NULL;
  return temp;
}
void Channels::set_allocated_channels(::KismetDatasource::SubChannels* channels) {
  delete channels_;
  channels_ = channels;
  if (channels) {
    set_has_channels();
  } else {
    clear_has_channels();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.Channels.channels)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseDatasource::CloseDatasource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.CloseDatasource)
}

void CloseDatasource::InitAsDefaultInstance() {
}

CloseDatasource::CloseDatasource(const CloseDatasource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.CloseDatasource)
}

void CloseDatasource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseDatasource::~CloseDatasource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.CloseDatasource)
  SharedDtor();
}

void CloseDatasource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseDatasource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseDatasource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseDatasource_descriptor_;
}

const CloseDatasource& CloseDatasource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

CloseDatasource* CloseDatasource::default_instance_ = NULL;

CloseDatasource* CloseDatasource::New(::google::protobuf::Arena* arena) const {
  CloseDatasource* n = new CloseDatasource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseDatasource::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.CloseDatasource)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CloseDatasource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.CloseDatasource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.CloseDatasource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.CloseDatasource)
  return false;
#undef DO_
}

void CloseDatasource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.CloseDatasource)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.CloseDatasource)
}

::google::protobuf::uint8* CloseDatasource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.CloseDatasource)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.CloseDatasource)
  return target;
}

int CloseDatasource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.CloseDatasource)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseDatasource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.CloseDatasource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloseDatasource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseDatasource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.CloseDatasource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.CloseDatasource)
    MergeFrom(*source);
  }
}

void CloseDatasource::MergeFrom(const CloseDatasource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.CloseDatasource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CloseDatasource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.CloseDatasource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDatasource::CopyFrom(const CloseDatasource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.CloseDatasource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDatasource::IsInitialized() const {

  return true;
}

void CloseDatasource::Swap(CloseDatasource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseDatasource::InternalSwap(CloseDatasource* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseDatasource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseDatasource_descriptor_;
  metadata.reflection = CloseDatasource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseDatasource

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Configure::kChannelFieldNumber;
const int Configure::kHoppingFieldNumber;
const int Configure::kSpectrumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Configure::Configure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.Configure)
}

void Configure::InitAsDefaultInstance() {
  channel_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  hopping_ = const_cast< ::KismetDatasource::SubChanhop*>(&::KismetDatasource::SubChanhop::default_instance());
  spectrum_ = const_cast< ::KismetDatasource::SubSpecset*>(&::KismetDatasource::SubSpecset::default_instance());
}

Configure::Configure(const Configure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.Configure)
}

void Configure::SharedCtor() {
  _cached_size_ = 0;
  channel_ = NULL;
  hopping_ = NULL;
  spectrum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:KismetDatasource.Configure)
  SharedDtor();
}

void Configure::SharedDtor() {
  if (this != default_instance_) {
    delete channel_;
    delete hopping_;
    delete spectrum_;
  }
}

void Configure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configure_descriptor_;
}

const Configure& Configure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

Configure* Configure::default_instance_ = NULL;

Configure* Configure::New(::google::protobuf::Arena* arena) const {
  Configure* n = new Configure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Configure::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.Configure)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_channel()) {
      if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_hopping()) {
      if (hopping_ != NULL) hopping_->::KismetDatasource::SubChanhop::Clear();
    }
    if (has_spectrum()) {
      if (spectrum_ != NULL) spectrum_->::KismetDatasource::SubSpecset::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Configure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.Configure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KismetDatasource.SubChanset channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hopping;
        break;
      }

      // optional .KismetDatasource.SubChanhop hopping = 2;
      case 2: {
        if (tag == 18) {
         parse_hopping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spectrum;
        break;
      }

      // optional .KismetDatasource.SubSpecset spectrum = 3;
      case 3: {
        if (tag == 26) {
         parse_spectrum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.Configure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.Configure)
  return false;
#undef DO_
}

void Configure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.Configure)
  // optional .KismetDatasource.SubChanset channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->channel_, output);
  }

  // optional .KismetDatasource.SubChanhop hopping = 2;
  if (has_hopping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hopping_, output);
  }

  // optional .KismetDatasource.SubSpecset spectrum = 3;
  if (has_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->spectrum_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.Configure)
}

::google::protobuf::uint8* Configure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.Configure)
  // optional .KismetDatasource.SubChanset channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->channel_, false, target);
  }

  // optional .KismetDatasource.SubChanhop hopping = 2;
  if (has_hopping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hopping_, false, target);
  }

  // optional .KismetDatasource.SubSpecset spectrum = 3;
  if (has_spectrum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->spectrum_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.Configure)
  return target;
}

int Configure::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.Configure)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .KismetDatasource.SubChanset channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channel_);
    }

    // optional .KismetDatasource.SubChanhop hopping = 2;
    if (has_hopping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hopping_);
    }

    // optional .KismetDatasource.SubSpecset spectrum = 3;
    if (has_spectrum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spectrum_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.Configure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Configure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Configure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.Configure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.Configure)
    MergeFrom(*source);
  }
}

void Configure::MergeFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.Configure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      mutable_channel()->::KismetDatasource::SubChanset::MergeFrom(from.channel());
    }
    if (from.has_hopping()) {
      mutable_hopping()->::KismetDatasource::SubChanhop::MergeFrom(from.hopping());
    }
    if (from.has_spectrum()) {
      mutable_spectrum()->::KismetDatasource::SubSpecset::MergeFrom(from.spectrum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Configure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configure::CopyFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {

  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void Configure::Swap(Configure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Configure::InternalSwap(Configure* other) {
  std::swap(channel_, other->channel_);
  std::swap(hopping_, other->hopping_);
  std::swap(spectrum_, other->spectrum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Configure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configure_descriptor_;
  metadata.reflection = Configure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Configure

// optional .KismetDatasource.SubChanset channel = 1;
bool Configure::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Configure::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
void Configure::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
void Configure::clear_channel() {
  if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
  clear_has_channel();
}
const ::KismetDatasource::SubChanset& Configure::channel() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.Configure.channel)
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
::KismetDatasource::SubChanset* Configure::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) {
    channel_ = new ::KismetDatasource::SubChanset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.Configure.channel)
  return channel_;
}
::KismetDatasource::SubChanset* Configure::release_channel() {
  // @@protoc_insertion_point(field_release:KismetDatasource.Configure.channel)
  clear_has_channel();
  ::KismetDatasource::SubChanset* temp = channel_;
  channel_ = NULL;
  return temp;
}
void Configure::set_allocated_channel(::KismetDatasource::SubChanset* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.Configure.channel)
}

// optional .KismetDatasource.SubChanhop hopping = 2;
bool Configure::has_hopping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Configure::set_has_hopping() {
  _has_bits_[0] |= 0x00000002u;
}
void Configure::clear_has_hopping() {
  _has_bits_[0] &= ~0x00000002u;
}
void Configure::clear_hopping() {
  if (hopping_ != NULL) hopping_->::KismetDatasource::SubChanhop::Clear();
  clear_has_hopping();
}
const ::KismetDatasource::SubChanhop& Configure::hopping() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.Configure.hopping)
  return hopping_ != NULL ? *hopping_ : *default_instance_->hopping_;
}
::KismetDatasource::SubChanhop* Configure::mutable_hopping() {
  set_has_hopping();
  if (hopping_ == NULL) {
    hopping_ = new ::KismetDatasource::SubChanhop;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.Configure.hopping)
  return hopping_;
}
::KismetDatasource::SubChanhop* Configure::release_hopping() {
  // @@protoc_insertion_point(field_release:KismetDatasource.Configure.hopping)
  clear_has_hopping();
  ::KismetDatasource::SubChanhop* temp = hopping_;
  hopping_ = NULL;
  return temp;
}
void Configure::set_allocated_hopping(::KismetDatasource::SubChanhop* hopping) {
  delete hopping_;
  hopping_ = hopping;
  if (hopping) {
    set_has_hopping();
  } else {
    clear_has_hopping();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.Configure.hopping)
}

// optional .KismetDatasource.SubSpecset spectrum = 3;
bool Configure::has_spectrum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Configure::set_has_spectrum() {
  _has_bits_[0] |= 0x00000004u;
}
void Configure::clear_has_spectrum() {
  _has_bits_[0] &= ~0x00000004u;
}
void Configure::clear_spectrum() {
  if (spectrum_ != NULL) spectrum_->::KismetDatasource::SubSpecset::Clear();
  clear_has_spectrum();
}
const ::KismetDatasource::SubSpecset& Configure::spectrum() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.Configure.spectrum)
  return spectrum_ != NULL ? *spectrum_ : *default_instance_->spectrum_;
}
::KismetDatasource::SubSpecset* Configure::mutable_spectrum() {
  set_has_spectrum();
  if (spectrum_ == NULL) {
    spectrum_ = new ::KismetDatasource::SubSpecset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.Configure.spectrum)
  return spectrum_;
}
::KismetDatasource::SubSpecset* Configure::release_spectrum() {
  // @@protoc_insertion_point(field_release:KismetDatasource.Configure.spectrum)
  clear_has_spectrum();
  ::KismetDatasource::SubSpecset* temp = spectrum_;
  spectrum_ = NULL;
  return temp;
}
void Configure::set_allocated_spectrum(::KismetDatasource::SubSpecset* spectrum) {
  delete spectrum_;
  spectrum_ = spectrum;
  if (spectrum) {
    set_has_spectrum();
  } else {
    clear_has_spectrum();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.Configure.spectrum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigureReport::kSuccessFieldNumber;
const int ConfigureReport::kChannelFieldNumber;
const int ConfigureReport::kHoppingFieldNumber;
const int ConfigureReport::kMessageFieldNumber;
const int ConfigureReport::kWarningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigureReport::ConfigureReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ConfigureReport)
}

void ConfigureReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  channel_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  hopping_ = const_cast< ::KismetDatasource::SubChanhop*>(&::KismetDatasource::SubChanhop::default_instance());
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
}

ConfigureReport::ConfigureReport(const ConfigureReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ConfigureReport)
}

void ConfigureReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = NULL;
  channel_ = NULL;
  hopping_ = NULL;
  message_ = NULL;
  warning_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigureReport::~ConfigureReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ConfigureReport)
  SharedDtor();
}

void ConfigureReport::SharedDtor() {
  warning_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete success_;
    delete channel_;
    delete hopping_;
    delete message_;
  }
}

void ConfigureReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigureReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigureReport_descriptor_;
}

const ConfigureReport& ConfigureReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ConfigureReport* ConfigureReport::default_instance_ = NULL;

ConfigureReport* ConfigureReport::New(::google::protobuf::Arena* arena) const {
  ConfigureReport* n = new ConfigureReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.ConfigureReport)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_hopping()) {
      if (hopping_ != NULL) hopping_->::KismetDatasource::SubChanhop::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
    if (has_warning()) {
      warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigureReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ConfigureReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }

      // optional .KismetDatasource.SubChanset channel = 2;
      case 2: {
        if (tag == 18) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hopping;
        break;
      }

      // optional .KismetDatasource.SubChanhop hopping = 3;
      case 3: {
        if (tag == 26) {
         parse_hopping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional .KismetDatasource.SubMsgbus message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_warning;
        break;
      }

      // optional string warning = 5;
      case 5: {
        if (tag == 42) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.ConfigureReport.warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ConfigureReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ConfigureReport)
  return false;
#undef DO_
}

void ConfigureReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ConfigureReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->success_, output);
  }

  // optional .KismetDatasource.SubChanset channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_, output);
  }

  // optional .KismetDatasource.SubChanhop hopping = 3;
  if (has_hopping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hopping_, output);
  }

  // optional .KismetDatasource.SubMsgbus message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->message_, output);
  }

  // optional string warning = 5;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.ConfigureReport.warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->warning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ConfigureReport)
}

::google::protobuf::uint8* ConfigureReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ConfigureReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->success_, false, target);
  }

  // optional .KismetDatasource.SubChanset channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_, false, target);
  }

  // optional .KismetDatasource.SubChanhop hopping = 3;
  if (has_hopping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->hopping_, false, target);
  }

  // optional .KismetDatasource.SubMsgbus message = 4;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->message_, false, target);
  }

  // optional string warning = 5;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.ConfigureReport.warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->warning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ConfigureReport)
  return target;
}

int ConfigureReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.ConfigureReport)
  int total_size = 0;

  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_);
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional .KismetDatasource.SubChanset channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channel_);
    }

    // optional .KismetDatasource.SubChanhop hopping = 3;
    if (has_hopping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hopping_);
    }

    // optional .KismetDatasource.SubMsgbus message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional string warning = 5;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigureReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.ConfigureReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigureReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigureReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.ConfigureReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.ConfigureReport)
    MergeFrom(*source);
  }
}

void ConfigureReport::MergeFrom(const ConfigureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.ConfigureReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_channel()) {
      mutable_channel()->::KismetDatasource::SubChanset::MergeFrom(from.channel());
    }
    if (from.has_hopping()) {
      mutable_hopping()->::KismetDatasource::SubChanhop::MergeFrom(from.hopping());
    }
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
    if (from.has_warning()) {
      set_has_warning();
      warning_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warning_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfigureReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.ConfigureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigureReport::CopyFrom(const ConfigureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.ConfigureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigureReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  return true;
}

void ConfigureReport::Swap(ConfigureReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigureReport::InternalSwap(ConfigureReport* other) {
  std::swap(success_, other->success_);
  std::swap(channel_, other->channel_);
  std::swap(hopping_, other->hopping_);
  std::swap(message_, other->message_);
  warning_.Swap(&other->warning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigureReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigureReport_descriptor_;
  metadata.reflection = ConfigureReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigureReport

// required .KismetDatasource.SubSuccess success = 1;
bool ConfigureReport::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigureReport::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigureReport::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigureReport::clear_success() {
  if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
  clear_has_success();
}
const ::KismetDatasource::SubSuccess& ConfigureReport::success() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ConfigureReport.success)
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
::KismetDatasource::SubSuccess* ConfigureReport::mutable_success() {
  set_has_success();
  if (success_ == NULL) {
    success_ = new ::KismetDatasource::SubSuccess;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ConfigureReport.success)
  return success_;
}
::KismetDatasource::SubSuccess* ConfigureReport::release_success() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ConfigureReport.success)
  clear_has_success();
  ::KismetDatasource::SubSuccess* temp = success_;
  success_ = NULL;
  return temp;
}
void ConfigureReport::set_allocated_success(::KismetDatasource::SubSuccess* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ConfigureReport.success)
}

// optional .KismetDatasource.SubChanset channel = 2;
bool ConfigureReport::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigureReport::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigureReport::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigureReport::clear_channel() {
  if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
  clear_has_channel();
}
const ::KismetDatasource::SubChanset& ConfigureReport::channel() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ConfigureReport.channel)
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
::KismetDatasource::SubChanset* ConfigureReport::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) {
    channel_ = new ::KismetDatasource::SubChanset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ConfigureReport.channel)
  return channel_;
}
::KismetDatasource::SubChanset* ConfigureReport::release_channel() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ConfigureReport.channel)
  clear_has_channel();
  ::KismetDatasource::SubChanset* temp = channel_;
  channel_ = NULL;
  return temp;
}
void ConfigureReport::set_allocated_channel(::KismetDatasource::SubChanset* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ConfigureReport.channel)
}

// optional .KismetDatasource.SubChanhop hopping = 3;
bool ConfigureReport::has_hopping() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigureReport::set_has_hopping() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigureReport::clear_has_hopping() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigureReport::clear_hopping() {
  if (hopping_ != NULL) hopping_->::KismetDatasource::SubChanhop::Clear();
  clear_has_hopping();
}
const ::KismetDatasource::SubChanhop& ConfigureReport::hopping() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ConfigureReport.hopping)
  return hopping_ != NULL ? *hopping_ : *default_instance_->hopping_;
}
::KismetDatasource::SubChanhop* ConfigureReport::mutable_hopping() {
  set_has_hopping();
  if (hopping_ == NULL) {
    hopping_ = new ::KismetDatasource::SubChanhop;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ConfigureReport.hopping)
  return hopping_;
}
::KismetDatasource::SubChanhop* ConfigureReport::release_hopping() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ConfigureReport.hopping)
  clear_has_hopping();
  ::KismetDatasource::SubChanhop* temp = hopping_;
  hopping_ = NULL;
  return temp;
}
void ConfigureReport::set_allocated_hopping(::KismetDatasource::SubChanhop* hopping) {
  delete hopping_;
  hopping_ = hopping;
  if (hopping) {
    set_has_hopping();
  } else {
    clear_has_hopping();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ConfigureReport.hopping)
}

// optional .KismetDatasource.SubMsgbus message = 4;
bool ConfigureReport::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigureReport::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigureReport::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigureReport::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& ConfigureReport::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ConfigureReport.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* ConfigureReport::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ConfigureReport.message)
  return message_;
}
::KismetDatasource::SubMsgbus* ConfigureReport::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ConfigureReport.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void ConfigureReport::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ConfigureReport.message)
}

// optional string warning = 5;
bool ConfigureReport::has_warning() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConfigureReport::set_has_warning() {
  _has_bits_[0] |= 0x00000010u;
}
void ConfigureReport::clear_has_warning() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConfigureReport::clear_warning() {
  warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warning();
}
 const ::std::string& ConfigureReport::warning() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ConfigureReport.warning)
  return warning_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigureReport::set_warning(const ::std::string& value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.ConfigureReport.warning)
}
 void ConfigureReport::set_warning(const char* value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.ConfigureReport.warning)
}
 void ConfigureReport::set_warning(const char* value, size_t size) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.ConfigureReport.warning)
}
 ::std::string* ConfigureReport::mutable_warning() {
  set_has_warning();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ConfigureReport.warning)
  return warning_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigureReport::release_warning() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ConfigureReport.warning)
  clear_has_warning();
  return warning_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigureReport::set_allocated_warning(::std::string* warning) {
  if (warning != NULL) {
    set_has_warning();
  } else {
    clear_has_warning();
  }
  warning_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ConfigureReport.warning)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataReport::kGpsFieldNumber;
const int DataReport::kMessageFieldNumber;
const int DataReport::kPacketFieldNumber;
const int DataReport::kSignalFieldNumber;
const int DataReport::kSpectrumFieldNumber;
const int DataReport::kWarningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReport::DataReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.DataReport)
}

void DataReport::InitAsDefaultInstance() {
  gps_ = const_cast< ::KismetDatasource::SubGps*>(&::KismetDatasource::SubGps::default_instance());
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
  packet_ = const_cast< ::KismetDatasource::SubPacket*>(&::KismetDatasource::SubPacket::default_instance());
  signal_ = const_cast< ::KismetDatasource::SubSignal*>(&::KismetDatasource::SubSignal::default_instance());
  spectrum_ = const_cast< ::KismetDatasource::SubSpectrum*>(&::KismetDatasource::SubSpectrum::default_instance());
}

DataReport::DataReport(const DataReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.DataReport)
}

void DataReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gps_ = NULL;
  message_ = NULL;
  packet_ = NULL;
  signal_ = NULL;
  spectrum_ = NULL;
  warning_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReport::~DataReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.DataReport)
  SharedDtor();
}

void DataReport::SharedDtor() {
  warning_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete gps_;
    delete message_;
    delete packet_;
    delete signal_;
    delete spectrum_;
  }
}

void DataReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReport_descriptor_;
}

const DataReport& DataReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

DataReport* DataReport::default_instance_ = NULL;

DataReport* DataReport::New(::google::protobuf::Arena* arena) const {
  DataReport* n = new DataReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.DataReport)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_gps()) {
      if (gps_ != NULL) gps_->::KismetDatasource::SubGps::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
    if (has_packet()) {
      if (packet_ != NULL) packet_->::KismetDatasource::SubPacket::Clear();
    }
    if (has_signal()) {
      if (signal_ != NULL) signal_->::KismetDatasource::SubSignal::Clear();
    }
    if (has_spectrum()) {
      if (spectrum_ != NULL) spectrum_->::KismetDatasource::SubSpectrum::Clear();
    }
    if (has_warning()) {
      warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.DataReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KismetDatasource.SubGps gps = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetDatasource.SubMsgbus message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_packet;
        break;
      }

      // optional .KismetDatasource.SubPacket packet = 3;
      case 3: {
        if (tag == 26) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signal;
        break;
      }

      // optional .KismetDatasource.SubSignal signal = 4;
      case 4: {
        if (tag == 34) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_spectrum;
        break;
      }

      // optional .KismetDatasource.SubSpectrum spectrum = 5;
      case 5: {
        if (tag == 42) {
         parse_spectrum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_warning;
        break;
      }

      // optional string warning = 6;
      case 6: {
        if (tag == 50) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.DataReport.warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.DataReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.DataReport)
  return false;
#undef DO_
}

void DataReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.DataReport)
  // optional .KismetDatasource.SubGps gps = 1;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gps_, output);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message_, output);
  }

  // optional .KismetDatasource.SubPacket packet = 3;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->packet_, output);
  }

  // optional .KismetDatasource.SubSignal signal = 4;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->signal_, output);
  }

  // optional .KismetDatasource.SubSpectrum spectrum = 5;
  if (has_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->spectrum_, output);
  }

  // optional string warning = 6;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.DataReport.warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->warning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.DataReport)
}

::google::protobuf::uint8* DataReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.DataReport)
  // optional .KismetDatasource.SubGps gps = 1;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gps_, false, target);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->message_, false, target);
  }

  // optional .KismetDatasource.SubPacket packet = 3;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->packet_, false, target);
  }

  // optional .KismetDatasource.SubSignal signal = 4;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->signal_, false, target);
  }

  // optional .KismetDatasource.SubSpectrum spectrum = 5;
  if (has_spectrum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->spectrum_, false, target);
  }

  // optional string warning = 6;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.DataReport.warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->warning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.DataReport)
  return target;
}

int DataReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.DataReport)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .KismetDatasource.SubGps gps = 1;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gps_);
    }

    // optional .KismetDatasource.SubMsgbus message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional .KismetDatasource.SubPacket packet = 3;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->packet_);
    }

    // optional .KismetDatasource.SubSignal signal = 4;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .KismetDatasource.SubSpectrum spectrum = 5;
    if (has_spectrum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spectrum_);
    }

    // optional string warning = 6;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.DataReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.DataReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.DataReport)
    MergeFrom(*source);
  }
}

void DataReport::MergeFrom(const DataReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.DataReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps()) {
      mutable_gps()->::KismetDatasource::SubGps::MergeFrom(from.gps());
    }
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
    if (from.has_packet()) {
      mutable_packet()->::KismetDatasource::SubPacket::MergeFrom(from.packet());
    }
    if (from.has_signal()) {
      mutable_signal()->::KismetDatasource::SubSignal::MergeFrom(from.signal());
    }
    if (from.has_spectrum()) {
      mutable_spectrum()->::KismetDatasource::SubSpectrum::MergeFrom(from.spectrum());
    }
    if (from.has_warning()) {
      set_has_warning();
      warning_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warning_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.DataReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReport::CopyFrom(const DataReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.DataReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReport::IsInitialized() const {

  if (has_gps()) {
    if (!this->gps_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  if (has_packet()) {
    if (!this->packet_->IsInitialized()) return false;
  }
  return true;
}

void DataReport::Swap(DataReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReport::InternalSwap(DataReport* other) {
  std::swap(gps_, other->gps_);
  std::swap(message_, other->message_);
  std::swap(packet_, other->packet_);
  std::swap(signal_, other->signal_);
  std::swap(spectrum_, other->spectrum_);
  warning_.Swap(&other->warning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReport_descriptor_;
  metadata.reflection = DataReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReport

// optional .KismetDatasource.SubGps gps = 1;
bool DataReport::has_gps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReport::set_has_gps() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReport::clear_has_gps() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReport::clear_gps() {
  if (gps_ != NULL) gps_->::KismetDatasource::SubGps::Clear();
  clear_has_gps();
}
const ::KismetDatasource::SubGps& DataReport::gps() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.DataReport.gps)
  return gps_ != NULL ? *gps_ : *default_instance_->gps_;
}
::KismetDatasource::SubGps* DataReport::mutable_gps() {
  set_has_gps();
  if (gps_ == NULL) {
    gps_ = new ::KismetDatasource::SubGps;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.DataReport.gps)
  return gps_;
}
::KismetDatasource::SubGps* DataReport::release_gps() {
  // @@protoc_insertion_point(field_release:KismetDatasource.DataReport.gps)
  clear_has_gps();
  ::KismetDatasource::SubGps* temp = gps_;
  gps_ = NULL;
  return temp;
}
void DataReport::set_allocated_gps(::KismetDatasource::SubGps* gps) {
  delete gps_;
  gps_ = gps;
  if (gps) {
    set_has_gps();
  } else {
    clear_has_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.DataReport.gps)
}

// optional .KismetDatasource.SubMsgbus message = 2;
bool DataReport::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataReport::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void DataReport::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataReport::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& DataReport::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.DataReport.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* DataReport::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.DataReport.message)
  return message_;
}
::KismetDatasource::SubMsgbus* DataReport::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.DataReport.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void DataReport::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.DataReport.message)
}

// optional .KismetDatasource.SubPacket packet = 3;
bool DataReport::has_packet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataReport::set_has_packet() {
  _has_bits_[0] |= 0x00000004u;
}
void DataReport::clear_has_packet() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataReport::clear_packet() {
  if (packet_ != NULL) packet_->::KismetDatasource::SubPacket::Clear();
  clear_has_packet();
}
const ::KismetDatasource::SubPacket& DataReport::packet() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.DataReport.packet)
  return packet_ != NULL ? *packet_ : *default_instance_->packet_;
}
::KismetDatasource::SubPacket* DataReport::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) {
    packet_ = new ::KismetDatasource::SubPacket;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.DataReport.packet)
  return packet_;
}
::KismetDatasource::SubPacket* DataReport::release_packet() {
  // @@protoc_insertion_point(field_release:KismetDatasource.DataReport.packet)
  clear_has_packet();
  ::KismetDatasource::SubPacket* temp = packet_;
  packet_ = NULL;
  return temp;
}
void DataReport::set_allocated_packet(::KismetDatasource::SubPacket* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    set_has_packet();
  } else {
    clear_has_packet();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.DataReport.packet)
}

// optional .KismetDatasource.SubSignal signal = 4;
bool DataReport::has_signal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataReport::set_has_signal() {
  _has_bits_[0] |= 0x00000008u;
}
void DataReport::clear_has_signal() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataReport::clear_signal() {
  if (signal_ != NULL) signal_->::KismetDatasource::SubSignal::Clear();
  clear_has_signal();
}
const ::KismetDatasource::SubSignal& DataReport::signal() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.DataReport.signal)
  return signal_ != NULL ? *signal_ : *default_instance_->signal_;
}
::KismetDatasource::SubSignal* DataReport::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::KismetDatasource::SubSignal;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.DataReport.signal)
  return signal_;
}
::KismetDatasource::SubSignal* DataReport::release_signal() {
  // @@protoc_insertion_point(field_release:KismetDatasource.DataReport.signal)
  clear_has_signal();
  ::KismetDatasource::SubSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void DataReport::set_allocated_signal(::KismetDatasource::SubSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.DataReport.signal)
}

// optional .KismetDatasource.SubSpectrum spectrum = 5;
bool DataReport::has_spectrum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataReport::set_has_spectrum() {
  _has_bits_[0] |= 0x00000010u;
}
void DataReport::clear_has_spectrum() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataReport::clear_spectrum() {
  if (spectrum_ != NULL) spectrum_->::KismetDatasource::SubSpectrum::Clear();
  clear_has_spectrum();
}
const ::KismetDatasource::SubSpectrum& DataReport::spectrum() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.DataReport.spectrum)
  return spectrum_ != NULL ? *spectrum_ : *default_instance_->spectrum_;
}
::KismetDatasource::SubSpectrum* DataReport::mutable_spectrum() {
  set_has_spectrum();
  if (spectrum_ == NULL) {
    spectrum_ = new ::KismetDatasource::SubSpectrum;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.DataReport.spectrum)
  return spectrum_;
}
::KismetDatasource::SubSpectrum* DataReport::release_spectrum() {
  // @@protoc_insertion_point(field_release:KismetDatasource.DataReport.spectrum)
  clear_has_spectrum();
  ::KismetDatasource::SubSpectrum* temp = spectrum_;
  spectrum_ = NULL;
  return temp;
}
void DataReport::set_allocated_spectrum(::KismetDatasource::SubSpectrum* spectrum) {
  delete spectrum_;
  spectrum_ = spectrum;
  if (spectrum) {
    set_has_spectrum();
  } else {
    clear_has_spectrum();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.DataReport.spectrum)
}

// optional string warning = 6;
bool DataReport::has_warning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataReport::set_has_warning() {
  _has_bits_[0] |= 0x00000020u;
}
void DataReport::clear_has_warning() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataReport::clear_warning() {
  warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warning();
}
 const ::std::string& DataReport::warning() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.DataReport.warning)
  return warning_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReport::set_warning(const ::std::string& value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.DataReport.warning)
}
 void DataReport::set_warning(const char* value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.DataReport.warning)
}
 void DataReport::set_warning(const char* value, size_t size) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.DataReport.warning)
}
 ::std::string* DataReport::mutable_warning() {
  set_has_warning();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.DataReport.warning)
  return warning_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataReport::release_warning() {
  // @@protoc_insertion_point(field_release:KismetDatasource.DataReport.warning)
  clear_has_warning();
  return warning_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReport::set_allocated_warning(::std::string* warning) {
  if (warning != NULL) {
    set_has_warning();
  } else {
    clear_has_warning();
  }
  warning_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.DataReport.warning)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorReport::kSuccessFieldNumber;
const int ErrorReport::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorReport::ErrorReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ErrorReport)
}

void ErrorReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
}

ErrorReport::ErrorReport(const ErrorReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ErrorReport)
}

void ErrorReport::SharedCtor() {
  _cached_size_ = 0;
  success_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorReport::~ErrorReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ErrorReport)
  SharedDtor();
}

void ErrorReport::SharedDtor() {
  if (this != default_instance_) {
    delete success_;
    delete message_;
  }
}

void ErrorReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorReport_descriptor_;
}

const ErrorReport& ErrorReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ErrorReport* ErrorReport::default_instance_ = NULL;

ErrorReport* ErrorReport::New(::google::protobuf::Arena* arena) const {
  ErrorReport* n = new ErrorReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.ErrorReport)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ErrorReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ErrorReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetDatasource.SubMsgbus message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ErrorReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ErrorReport)
  return false;
#undef DO_
}

void ErrorReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ErrorReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->success_, output);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ErrorReport)
}

::google::protobuf::uint8* ErrorReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ErrorReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->success_, false, target);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->message_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ErrorReport)
  return target;
}

int ErrorReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.ErrorReport)
  int total_size = 0;

  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_);
  }
  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.ErrorReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ErrorReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.ErrorReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.ErrorReport)
    MergeFrom(*source);
  }
}

void ErrorReport::MergeFrom(const ErrorReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.ErrorReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ErrorReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.ErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorReport::CopyFrom(const ErrorReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.ErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  return true;
}

void ErrorReport::Swap(ErrorReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorReport::InternalSwap(ErrorReport* other) {
  std::swap(success_, other->success_);
  std::swap(message_, other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorReport_descriptor_;
  metadata.reflection = ErrorReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorReport

// required .KismetDatasource.SubSuccess success = 1;
bool ErrorReport::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorReport::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorReport::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorReport::clear_success() {
  if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
  clear_has_success();
}
const ::KismetDatasource::SubSuccess& ErrorReport::success() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ErrorReport.success)
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
::KismetDatasource::SubSuccess* ErrorReport::mutable_success() {
  set_has_success();
  if (success_ == NULL) {
    success_ = new ::KismetDatasource::SubSuccess;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ErrorReport.success)
  return success_;
}
::KismetDatasource::SubSuccess* ErrorReport::release_success() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ErrorReport.success)
  clear_has_success();
  ::KismetDatasource::SubSuccess* temp = success_;
  success_ = NULL;
  return temp;
}
void ErrorReport::set_allocated_success(::KismetDatasource::SubSuccess* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ErrorReport.success)
}

// optional .KismetDatasource.SubMsgbus message = 2;
bool ErrorReport::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ErrorReport::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ErrorReport::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ErrorReport::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& ErrorReport::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ErrorReport.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* ErrorReport::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ErrorReport.message)
  return message_;
}
::KismetDatasource::SubMsgbus* ErrorReport::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ErrorReport.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void ErrorReport::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ErrorReport.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInterfaces::ListInterfaces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ListInterfaces)
}

void ListInterfaces::InitAsDefaultInstance() {
}

ListInterfaces::ListInterfaces(const ListInterfaces& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ListInterfaces)
}

void ListInterfaces::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListInterfaces::~ListInterfaces() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ListInterfaces)
  SharedDtor();
}

void ListInterfaces::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListInterfaces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInterfaces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListInterfaces_descriptor_;
}

const ListInterfaces& ListInterfaces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ListInterfaces* ListInterfaces::default_instance_ = NULL;

ListInterfaces* ListInterfaces::New(::google::protobuf::Arena* arena) const {
  ListInterfaces* n = new ListInterfaces;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInterfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.ListInterfaces)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ListInterfaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ListInterfaces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ListInterfaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ListInterfaces)
  return false;
#undef DO_
}

void ListInterfaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ListInterfaces)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ListInterfaces)
}

::google::protobuf::uint8* ListInterfaces::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ListInterfaces)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ListInterfaces)
  return target;
}

int ListInterfaces::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.ListInterfaces)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInterfaces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.ListInterfaces)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListInterfaces* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInterfaces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.ListInterfaces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.ListInterfaces)
    MergeFrom(*source);
  }
}

void ListInterfaces::MergeFrom(const ListInterfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.ListInterfaces)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ListInterfaces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.ListInterfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInterfaces::CopyFrom(const ListInterfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.ListInterfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInterfaces::IsInitialized() const {

  return true;
}

void ListInterfaces::Swap(ListInterfaces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInterfaces::InternalSwap(ListInterfaces* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInterfaces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListInterfaces_descriptor_;
  metadata.reflection = ListInterfaces_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInterfaces

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterfacesReport::kSuccessFieldNumber;
const int InterfacesReport::kMessageFieldNumber;
const int InterfacesReport::kInterfacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterfacesReport::InterfacesReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.InterfacesReport)
}

void InterfacesReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
}

InterfacesReport::InterfacesReport(const InterfacesReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.InterfacesReport)
}

void InterfacesReport::SharedCtor() {
  _cached_size_ = 0;
  success_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterfacesReport::~InterfacesReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.InterfacesReport)
  SharedDtor();
}

void InterfacesReport::SharedDtor() {
  if (this != default_instance_) {
    delete success_;
    delete message_;
  }
}

void InterfacesReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterfacesReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterfacesReport_descriptor_;
}

const InterfacesReport& InterfacesReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

InterfacesReport* InterfacesReport::default_instance_ = NULL;

InterfacesReport* InterfacesReport::New(::google::protobuf::Arena* arena) const {
  InterfacesReport* n = new InterfacesReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterfacesReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.InterfacesReport)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
  }
  interfaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InterfacesReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.InterfacesReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetDatasource.SubMsgbus message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interfaces;
        break;
      }

      // repeated .KismetDatasource.SubInterface interfaces = 3;
      case 3: {
        if (tag == 26) {
         parse_interfaces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_interfaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_interfaces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.InterfacesReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.InterfacesReport)
  return false;
#undef DO_
}

void InterfacesReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.InterfacesReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->success_, output);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message_, output);
  }

  // repeated .KismetDatasource.SubInterface interfaces = 3;
  for (unsigned int i = 0, n = this->interfaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->interfaces(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.InterfacesReport)
}

::google::protobuf::uint8* InterfacesReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.InterfacesReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->success_, false, target);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->message_, false, target);
  }

  // repeated .KismetDatasource.SubInterface interfaces = 3;
  for (unsigned int i = 0, n = this->interfaces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->interfaces(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.InterfacesReport)
  return target;
}

int InterfacesReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.InterfacesReport)
  int total_size = 0;

  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_);
  }
  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  // repeated .KismetDatasource.SubInterface interfaces = 3;
  total_size += 1 * this->interfaces_size();
  for (int i = 0; i < this->interfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interfaces(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterfacesReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.InterfacesReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InterfacesReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InterfacesReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.InterfacesReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.InterfacesReport)
    MergeFrom(*source);
  }
}

void InterfacesReport::MergeFrom(const InterfacesReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.InterfacesReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  interfaces_.MergeFrom(from.interfaces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InterfacesReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.InterfacesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfacesReport::CopyFrom(const InterfacesReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.InterfacesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfacesReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->interfaces())) return false;
  return true;
}

void InterfacesReport::Swap(InterfacesReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterfacesReport::InternalSwap(InterfacesReport* other) {
  std::swap(success_, other->success_);
  std::swap(message_, other->message_);
  interfaces_.UnsafeArenaSwap(&other->interfaces_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterfacesReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterfacesReport_descriptor_;
  metadata.reflection = InterfacesReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterfacesReport

// required .KismetDatasource.SubSuccess success = 1;
bool InterfacesReport::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InterfacesReport::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void InterfacesReport::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void InterfacesReport::clear_success() {
  if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
  clear_has_success();
}
const ::KismetDatasource::SubSuccess& InterfacesReport::success() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.InterfacesReport.success)
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
::KismetDatasource::SubSuccess* InterfacesReport::mutable_success() {
  set_has_success();
  if (success_ == NULL) {
    success_ = new ::KismetDatasource::SubSuccess;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.InterfacesReport.success)
  return success_;
}
::KismetDatasource::SubSuccess* InterfacesReport::release_success() {
  // @@protoc_insertion_point(field_release:KismetDatasource.InterfacesReport.success)
  clear_has_success();
  ::KismetDatasource::SubSuccess* temp = success_;
  success_ = NULL;
  return temp;
}
void InterfacesReport::set_allocated_success(::KismetDatasource::SubSuccess* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.InterfacesReport.success)
}

// optional .KismetDatasource.SubMsgbus message = 2;
bool InterfacesReport::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InterfacesReport::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void InterfacesReport::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void InterfacesReport::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& InterfacesReport::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.InterfacesReport.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* InterfacesReport::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.InterfacesReport.message)
  return message_;
}
::KismetDatasource::SubMsgbus* InterfacesReport::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.InterfacesReport.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void InterfacesReport::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.InterfacesReport.message)
}

// repeated .KismetDatasource.SubInterface interfaces = 3;
int InterfacesReport::interfaces_size() const {
  return interfaces_.size();
}
void InterfacesReport::clear_interfaces() {
  interfaces_.Clear();
}
const ::KismetDatasource::SubInterface& InterfacesReport::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:KismetDatasource.InterfacesReport.interfaces)
  return interfaces_.Get(index);
}
::KismetDatasource::SubInterface* InterfacesReport::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:KismetDatasource.InterfacesReport.interfaces)
  return interfaces_.Mutable(index);
}
::KismetDatasource::SubInterface* InterfacesReport::add_interfaces() {
  // @@protoc_insertion_point(field_add:KismetDatasource.InterfacesReport.interfaces)
  return interfaces_.Add();
}
::google::protobuf::RepeatedPtrField< ::KismetDatasource::SubInterface >*
InterfacesReport::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:KismetDatasource.InterfacesReport.interfaces)
  return &interfaces_;
}
const ::google::protobuf::RepeatedPtrField< ::KismetDatasource::SubInterface >&
InterfacesReport::interfaces() const {
  // @@protoc_insertion_point(field_list:KismetDatasource.InterfacesReport.interfaces)
  return interfaces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMessageFieldNumber;
const int Message::kWarningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.Message)
}

void Message::InitAsDefaultInstance() {
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = NULL;
  warning_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:KismetDatasource.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  warning_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete message_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.Message)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
    if (has_warning()) {
      warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KismetDatasource.SubMsgbus message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_warning;
        break;
      }

      // optional string warning = 2;
      case 2: {
        if (tag == 18) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.Message.warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.Message)
  // optional .KismetDatasource.SubMsgbus message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->message_, output);
  }

  // optional string warning = 2;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.Message.warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->warning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.Message)
  // optional .KismetDatasource.SubMsgbus message = 1;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->message_, false, target);
  }

  // optional string warning = 2;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.Message.warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->warning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.Message)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .KismetDatasource.SubMsgbus message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional string warning = 2;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
    if (from.has_warning()) {
      set_has_warning();
      warning_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warning_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(message_, other->message_);
  warning_.Swap(&other->warning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .KismetDatasource.SubMsgbus message = 1;
bool Message::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& Message::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.Message.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* Message::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.Message.message)
  return message_;
}
::KismetDatasource::SubMsgbus* Message::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.Message.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void Message::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.Message.message)
}

// optional string warning = 2;
bool Message::has_warning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_warning() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_warning() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_warning() {
  warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warning();
}
 const ::std::string& Message::warning() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.Message.warning)
  return warning_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_warning(const ::std::string& value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.Message.warning)
}
 void Message::set_warning(const char* value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.Message.warning)
}
 void Message::set_warning(const char* value, size_t size) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.Message.warning)
}
 ::std::string* Message::mutable_warning() {
  set_has_warning();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.Message.warning)
  return warning_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_warning() {
  // @@protoc_insertion_point(field_release:KismetDatasource.Message.warning)
  clear_has_warning();
  return warning_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_warning(::std::string* warning) {
  if (warning != NULL) {
    set_has_warning();
  } else {
    clear_has_warning();
  }
  warning_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.Message.warning)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSource::kDefinitionFieldNumber;
const int NewSource::kSourcetypeFieldNumber;
const int NewSource::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSource::NewSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.NewSource)
}

void NewSource::InitAsDefaultInstance() {
}

NewSource::NewSource(const NewSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.NewSource)
}

void NewSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewSource::~NewSource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.NewSource)
  SharedDtor();
}

void NewSource::SharedDtor() {
  definition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSource_descriptor_;
}

const NewSource& NewSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

NewSource* NewSource::default_instance_ = NULL;

NewSource* NewSource::New(::google::protobuf::Arena* arena) const {
  NewSource* n = new NewSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.NewSource)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_definition()) {
      definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sourcetype()) {
      sourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NewSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.NewSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.NewSource.definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sourcetype;
        break;
      }

      // required string sourcetype = 2;
      case 2: {
        if (tag == 18) {
         parse_sourcetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcetype().data(), this->sourcetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.NewSource.sourcetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // required string uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.NewSource.uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.NewSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.NewSource)
  return false;
#undef DO_
}

void NewSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.NewSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.NewSource.definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->definition(), output);
  }

  // required string sourcetype = 2;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcetype().data(), this->sourcetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.NewSource.sourcetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourcetype(), output);
  }

  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.NewSource.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.NewSource)
}

::google::protobuf::uint8* NewSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.NewSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.NewSource.definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->definition(), target);
  }

  // required string sourcetype = 2;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcetype().data(), this->sourcetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.NewSource.sourcetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourcetype(), target);
  }

  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.NewSource.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.NewSource)
  return target;
}

int NewSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KismetDatasource.NewSource)
  int total_size = 0;

  if (has_definition()) {
    // required string definition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->definition());
  }

  if (has_sourcetype()) {
    // required string sourcetype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcetype());
  }

  if (has_uuid()) {
    // required string uuid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  return total_size;
}
int NewSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.NewSource)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string definition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->definition());

    // required string sourcetype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcetype());

    // required string uuid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.NewSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.NewSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.NewSource)
    MergeFrom(*source);
  }
}

void NewSource::MergeFrom(const NewSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.NewSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_definition()) {
      set_has_definition();
      definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
    }
    if (from.has_sourcetype()) {
      set_has_sourcetype();
      sourcetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcetype_);
    }
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NewSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.NewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSource::CopyFrom(const NewSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.NewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewSource::Swap(NewSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSource::InternalSwap(NewSource* other) {
  definition_.Swap(&other->definition_);
  sourcetype_.Swap(&other->sourcetype_);
  uuid_.Swap(&other->uuid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewSource_descriptor_;
  metadata.reflection = NewSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSource

// required string definition = 1;
bool NewSource::has_definition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewSource::set_has_definition() {
  _has_bits_[0] |= 0x00000001u;
}
void NewSource::clear_has_definition() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewSource::clear_definition() {
  definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_definition();
}
 const ::std::string& NewSource::definition() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.NewSource.definition)
  return definition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSource::set_definition(const ::std::string& value) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.NewSource.definition)
}
 void NewSource::set_definition(const char* value) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.NewSource.definition)
}
 void NewSource::set_definition(const char* value, size_t size) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.NewSource.definition)
}
 ::std::string* NewSource::mutable_definition() {
  set_has_definition();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.NewSource.definition)
  return definition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewSource::release_definition() {
  // @@protoc_insertion_point(field_release:KismetDatasource.NewSource.definition)
  clear_has_definition();
  return definition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSource::set_allocated_definition(::std::string* definition) {
  if (definition != NULL) {
    set_has_definition();
  } else {
    clear_has_definition();
  }
  definition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.NewSource.definition)
}

// required string sourcetype = 2;
bool NewSource::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewSource::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000002u;
}
void NewSource::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewSource::clear_sourcetype() {
  sourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourcetype();
}
 const ::std::string& NewSource::sourcetype() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.NewSource.sourcetype)
  return sourcetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSource::set_sourcetype(const ::std::string& value) {
  set_has_sourcetype();
  sourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.NewSource.sourcetype)
}
 void NewSource::set_sourcetype(const char* value) {
  set_has_sourcetype();
  sourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.NewSource.sourcetype)
}
 void NewSource::set_sourcetype(const char* value, size_t size) {
  set_has_sourcetype();
  sourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.NewSource.sourcetype)
}
 ::std::string* NewSource::mutable_sourcetype() {
  set_has_sourcetype();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.NewSource.sourcetype)
  return sourcetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewSource::release_sourcetype() {
  // @@protoc_insertion_point(field_release:KismetDatasource.NewSource.sourcetype)
  clear_has_sourcetype();
  return sourcetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSource::set_allocated_sourcetype(::std::string* sourcetype) {
  if (sourcetype != NULL) {
    set_has_sourcetype();
  } else {
    clear_has_sourcetype();
  }
  sourcetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcetype);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.NewSource.sourcetype)
}

// required string uuid = 3;
bool NewSource::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewSource::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
void NewSource::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewSource::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
 const ::std::string& NewSource::uuid() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.NewSource.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSource::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.NewSource.uuid)
}
 void NewSource::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.NewSource.uuid)
}
 void NewSource::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.NewSource.uuid)
}
 ::std::string* NewSource::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.NewSource.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewSource::release_uuid() {
  // @@protoc_insertion_point(field_release:KismetDatasource.NewSource.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSource::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.NewSource.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSource::kDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSource::OpenSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.OpenSource)
}

void OpenSource::InitAsDefaultInstance() {
}

OpenSource::OpenSource(const OpenSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.OpenSource)
}

void OpenSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSource::~OpenSource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.OpenSource)
  SharedDtor();
}

void OpenSource::SharedDtor() {
  definition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpenSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSource_descriptor_;
}

const OpenSource& OpenSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

OpenSource* OpenSource::default_instance_ = NULL;

OpenSource* OpenSource::New(::google::protobuf::Arena* arena) const {
  OpenSource* n = new OpenSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.OpenSource)
  if (has_definition()) {
    definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpenSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.OpenSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.OpenSource.definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.OpenSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.OpenSource)
  return false;
#undef DO_
}

void OpenSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.OpenSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSource.definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->definition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.OpenSource)
}

::google::protobuf::uint8* OpenSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.OpenSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSource.definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->definition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.OpenSource)
  return target;
}

int OpenSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.OpenSource)
  int total_size = 0;

  // required string definition = 1;
  if (has_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->definition());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.OpenSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.OpenSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.OpenSource)
    MergeFrom(*source);
  }
}

void OpenSource::MergeFrom(const OpenSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.OpenSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_definition()) {
      set_has_definition();
      definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpenSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.OpenSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSource::CopyFrom(const OpenSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.OpenSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenSource::Swap(OpenSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSource::InternalSwap(OpenSource* other) {
  definition_.Swap(&other->definition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSource_descriptor_;
  metadata.reflection = OpenSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSource

// required string definition = 1;
bool OpenSource::has_definition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenSource::set_has_definition() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenSource::clear_has_definition() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenSource::clear_definition() {
  definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_definition();
}
 const ::std::string& OpenSource::definition() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSource.definition)
  return definition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSource::set_definition(const ::std::string& value) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.OpenSource.definition)
}
 void OpenSource::set_definition(const char* value) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.OpenSource.definition)
}
 void OpenSource::set_definition(const char* value, size_t size) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.OpenSource.definition)
}
 ::std::string* OpenSource::mutable_definition() {
  set_has_definition();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSource.definition)
  return definition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenSource::release_definition() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSource.definition)
  clear_has_definition();
  return definition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSource::set_allocated_definition(::std::string* definition) {
  if (definition != NULL) {
    set_has_definition();
  } else {
    clear_has_definition();
  }
  definition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSource.definition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSourceReport::kSuccessFieldNumber;
const int OpenSourceReport::kDltFieldNumber;
const int OpenSourceReport::kCaptureInterfaceFieldNumber;
const int OpenSourceReport::kChannelsFieldNumber;
const int OpenSourceReport::kChannelFieldNumber;
const int OpenSourceReport::kHardwareFieldNumber;
const int OpenSourceReport::kMessageFieldNumber;
const int OpenSourceReport::kSpecsetFieldNumber;
const int OpenSourceReport::kUuidFieldNumber;
const int OpenSourceReport::kWarningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSourceReport::OpenSourceReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.OpenSourceReport)
}

void OpenSourceReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  channels_ = const_cast< ::KismetDatasource::SubChannels*>(&::KismetDatasource::SubChannels::default_instance());
  channel_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
  specset_ = const_cast< ::KismetDatasource::SubSpecset*>(&::KismetDatasource::SubSpecset::default_instance());
}

OpenSourceReport::OpenSourceReport(const OpenSourceReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.OpenSourceReport)
}

void OpenSourceReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = NULL;
  dlt_ = 0u;
  capture_interface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channels_ = NULL;
  channel_ = NULL;
  hardware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
  specset_ = NULL;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warning_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSourceReport::~OpenSourceReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.OpenSourceReport)
  SharedDtor();
}

void OpenSourceReport::SharedDtor() {
  capture_interface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warning_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete success_;
    delete channels_;
    delete channel_;
    delete message_;
    delete specset_;
  }
}

void OpenSourceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSourceReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSourceReport_descriptor_;
}

const OpenSourceReport& OpenSourceReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

OpenSourceReport* OpenSourceReport::default_instance_ = NULL;

OpenSourceReport* OpenSourceReport::New(::google::protobuf::Arena* arena) const {
  OpenSourceReport* n = new OpenSourceReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenSourceReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.OpenSourceReport)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    dlt_ = 0u;
    if (has_capture_interface()) {
      capture_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_channels()) {
      if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_hardware()) {
      hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
    if (has_specset()) {
      if (specset_ != NULL) specset_->::KismetDatasource::SubSpecset::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_warning()) {
      warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpenSourceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.OpenSourceReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dlt;
        break;
      }

      // optional uint32 dlt = 2;
      case 2: {
        if (tag == 16) {
         parse_dlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlt_)));
          set_has_dlt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capture_interface;
        break;
      }

      // optional string capture_interface = 3;
      case 3: {
        if (tag == 26) {
         parse_capture_interface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capture_interface().data(), this->capture_interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.OpenSourceReport.capture_interface");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_channels;
        break;
      }

      // optional .KismetDatasource.SubChannels channels = 4;
      case 4: {
        if (tag == 34) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional .KismetDatasource.SubChanset channel = 5;
      case 5: {
        if (tag == 42) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hardware;
        break;
      }

      // optional string hardware = 6;
      case 6: {
        if (tag == 50) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.OpenSourceReport.hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_message;
        break;
      }

      // optional .KismetDatasource.SubMsgbus message = 7;
      case 7: {
        if (tag == 58) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_specset;
        break;
      }

      // optional .KismetDatasource.SubSpecset specset = 8;
      case 8: {
        if (tag == 66) {
         parse_specset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_uuid;
        break;
      }

      // optional string uuid = 9;
      case 9: {
        if (tag == 74) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.OpenSourceReport.uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_warning;
        break;
      }

      // optional string warning = 10;
      case 10: {
        if (tag == 82) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.OpenSourceReport.warning");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.OpenSourceReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.OpenSourceReport)
  return false;
#undef DO_
}

void OpenSourceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.OpenSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->success_, output);
  }

  // optional uint32 dlt = 2;
  if (has_dlt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dlt(), output);
  }

  // optional string capture_interface = 3;
  if (has_capture_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture_interface().data(), this->capture_interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.capture_interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->capture_interface(), output);
  }

  // optional .KismetDatasource.SubChannels channels = 4;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->channels_, output);
  }

  // optional .KismetDatasource.SubChanset channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->channel_, output);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hardware(), output);
  }

  // optional .KismetDatasource.SubMsgbus message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->message_, output);
  }

  // optional .KismetDatasource.SubSpecset specset = 8;
  if (has_specset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->specset_, output);
  }

  // optional string uuid = 9;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->uuid(), output);
  }

  // optional string warning = 10;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->warning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.OpenSourceReport)
}

::google::protobuf::uint8* OpenSourceReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.OpenSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->success_, false, target);
  }

  // optional uint32 dlt = 2;
  if (has_dlt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dlt(), target);
  }

  // optional string capture_interface = 3;
  if (has_capture_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capture_interface().data(), this->capture_interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.capture_interface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->capture_interface(), target);
  }

  // optional .KismetDatasource.SubChannels channels = 4;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->channels_, false, target);
  }

  // optional .KismetDatasource.SubChanset channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->channel_, false, target);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hardware(), target);
  }

  // optional .KismetDatasource.SubMsgbus message = 7;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->message_, false, target);
  }

  // optional .KismetDatasource.SubSpecset specset = 8;
  if (has_specset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->specset_, false, target);
  }

  // optional string uuid = 9;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uuid(), target);
  }

  // optional string warning = 10;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.OpenSourceReport.warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->warning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.OpenSourceReport)
  return target;
}

int OpenSourceReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.OpenSourceReport)
  int total_size = 0;

  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_);
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional uint32 dlt = 2;
    if (has_dlt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dlt());
    }

    // optional string capture_interface = 3;
    if (has_capture_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture_interface());
    }

    // optional .KismetDatasource.SubChannels channels = 4;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channels_);
    }

    // optional .KismetDatasource.SubChanset channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channel_);
    }

    // optional string hardware = 6;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

    // optional .KismetDatasource.SubMsgbus message = 7;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional .KismetDatasource.SubSpecset specset = 8;
    if (has_specset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->specset_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string uuid = 9;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string warning = 10;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warning());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSourceReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.OpenSourceReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenSourceReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSourceReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.OpenSourceReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.OpenSourceReport)
    MergeFrom(*source);
  }
}

void OpenSourceReport::MergeFrom(const OpenSourceReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.OpenSourceReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_dlt()) {
      set_dlt(from.dlt());
    }
    if (from.has_capture_interface()) {
      set_has_capture_interface();
      capture_interface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capture_interface_);
    }
    if (from.has_channels()) {
      mutable_channels()->::KismetDatasource::SubChannels::MergeFrom(from.channels());
    }
    if (from.has_channel()) {
      mutable_channel()->::KismetDatasource::SubChanset::MergeFrom(from.channel());
    }
    if (from.has_hardware()) {
      set_has_hardware();
      hardware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_);
    }
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
    if (from.has_specset()) {
      mutable_specset()->::KismetDatasource::SubSpecset::MergeFrom(from.specset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_warning()) {
      set_has_warning();
      warning_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warning_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpenSourceReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.OpenSourceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSourceReport::CopyFrom(const OpenSourceReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.OpenSourceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSourceReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  return true;
}

void OpenSourceReport::Swap(OpenSourceReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSourceReport::InternalSwap(OpenSourceReport* other) {
  std::swap(success_, other->success_);
  std::swap(dlt_, other->dlt_);
  capture_interface_.Swap(&other->capture_interface_);
  std::swap(channels_, other->channels_);
  std::swap(channel_, other->channel_);
  hardware_.Swap(&other->hardware_);
  std::swap(message_, other->message_);
  std::swap(specset_, other->specset_);
  uuid_.Swap(&other->uuid_);
  warning_.Swap(&other->warning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenSourceReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSourceReport_descriptor_;
  metadata.reflection = OpenSourceReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSourceReport

// required .KismetDatasource.SubSuccess success = 1;
bool OpenSourceReport::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenSourceReport::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenSourceReport::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenSourceReport::clear_success() {
  if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
  clear_has_success();
}
const ::KismetDatasource::SubSuccess& OpenSourceReport::success() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.success)
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
::KismetDatasource::SubSuccess* OpenSourceReport::mutable_success() {
  set_has_success();
  if (success_ == NULL) {
    success_ = new ::KismetDatasource::SubSuccess;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.success)
  return success_;
}
::KismetDatasource::SubSuccess* OpenSourceReport::release_success() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.success)
  clear_has_success();
  ::KismetDatasource::SubSuccess* temp = success_;
  success_ = NULL;
  return temp;
}
void OpenSourceReport::set_allocated_success(::KismetDatasource::SubSuccess* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.success)
}

// optional uint32 dlt = 2;
bool OpenSourceReport::has_dlt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpenSourceReport::set_has_dlt() {
  _has_bits_[0] |= 0x00000002u;
}
void OpenSourceReport::clear_has_dlt() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpenSourceReport::clear_dlt() {
  dlt_ = 0u;
  clear_has_dlt();
}
 ::google::protobuf::uint32 OpenSourceReport::dlt() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.dlt)
  return dlt_;
}
 void OpenSourceReport::set_dlt(::google::protobuf::uint32 value) {
  set_has_dlt();
  dlt_ = value;
  // @@protoc_insertion_point(field_set:KismetDatasource.OpenSourceReport.dlt)
}

// optional string capture_interface = 3;
bool OpenSourceReport::has_capture_interface() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpenSourceReport::set_has_capture_interface() {
  _has_bits_[0] |= 0x00000004u;
}
void OpenSourceReport::clear_has_capture_interface() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpenSourceReport::clear_capture_interface() {
  capture_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_capture_interface();
}
 const ::std::string& OpenSourceReport::capture_interface() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.capture_interface)
  return capture_interface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_capture_interface(const ::std::string& value) {
  set_has_capture_interface();
  capture_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.OpenSourceReport.capture_interface)
}
 void OpenSourceReport::set_capture_interface(const char* value) {
  set_has_capture_interface();
  capture_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.OpenSourceReport.capture_interface)
}
 void OpenSourceReport::set_capture_interface(const char* value, size_t size) {
  set_has_capture_interface();
  capture_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.OpenSourceReport.capture_interface)
}
 ::std::string* OpenSourceReport::mutable_capture_interface() {
  set_has_capture_interface();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.capture_interface)
  return capture_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenSourceReport::release_capture_interface() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.capture_interface)
  clear_has_capture_interface();
  return capture_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_allocated_capture_interface(::std::string* capture_interface) {
  if (capture_interface != NULL) {
    set_has_capture_interface();
  } else {
    clear_has_capture_interface();
  }
  capture_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capture_interface);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.capture_interface)
}

// optional .KismetDatasource.SubChannels channels = 4;
bool OpenSourceReport::has_channels() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpenSourceReport::set_has_channels() {
  _has_bits_[0] |= 0x00000008u;
}
void OpenSourceReport::clear_has_channels() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpenSourceReport::clear_channels() {
  if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
  clear_has_channels();
}
const ::KismetDatasource::SubChannels& OpenSourceReport::channels() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.channels)
  return channels_ != NULL ? *channels_ : *default_instance_->channels_;
}
::KismetDatasource::SubChannels* OpenSourceReport::mutable_channels() {
  set_has_channels();
  if (channels_ == NULL) {
    channels_ = new ::KismetDatasource::SubChannels;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.channels)
  return channels_;
}
::KismetDatasource::SubChannels* OpenSourceReport::release_channels() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.channels)
  clear_has_channels();
  ::KismetDatasource::SubChannels* temp = channels_;
  channels_ = NULL;
  return temp;
}
void OpenSourceReport::set_allocated_channels(::KismetDatasource::SubChannels* channels) {
  delete channels_;
  channels_ = channels;
  if (channels) {
    set_has_channels();
  } else {
    clear_has_channels();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.channels)
}

// optional .KismetDatasource.SubChanset channel = 5;
bool OpenSourceReport::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpenSourceReport::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
void OpenSourceReport::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpenSourceReport::clear_channel() {
  if (channel_ != NULL) channel_->::KismetDatasource::SubChanset::Clear();
  clear_has_channel();
}
const ::KismetDatasource::SubChanset& OpenSourceReport::channel() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.channel)
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
::KismetDatasource::SubChanset* OpenSourceReport::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) {
    channel_ = new ::KismetDatasource::SubChanset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.channel)
  return channel_;
}
::KismetDatasource::SubChanset* OpenSourceReport::release_channel() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.channel)
  clear_has_channel();
  ::KismetDatasource::SubChanset* temp = channel_;
  channel_ = NULL;
  return temp;
}
void OpenSourceReport::set_allocated_channel(::KismetDatasource::SubChanset* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.channel)
}

// optional string hardware = 6;
bool OpenSourceReport::has_hardware() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpenSourceReport::set_has_hardware() {
  _has_bits_[0] |= 0x00000020u;
}
void OpenSourceReport::clear_has_hardware() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpenSourceReport::clear_hardware() {
  hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware();
}
 const ::std::string& OpenSourceReport::hardware() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.hardware)
  return hardware_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_hardware(const ::std::string& value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.OpenSourceReport.hardware)
}
 void OpenSourceReport::set_hardware(const char* value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.OpenSourceReport.hardware)
}
 void OpenSourceReport::set_hardware(const char* value, size_t size) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.OpenSourceReport.hardware)
}
 ::std::string* OpenSourceReport::mutable_hardware() {
  set_has_hardware();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.hardware)
  return hardware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenSourceReport::release_hardware() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.hardware)
  clear_has_hardware();
  return hardware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_allocated_hardware(::std::string* hardware) {
  if (hardware != NULL) {
    set_has_hardware();
  } else {
    clear_has_hardware();
  }
  hardware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.hardware)
}

// optional .KismetDatasource.SubMsgbus message = 7;
bool OpenSourceReport::has_message() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpenSourceReport::set_has_message() {
  _has_bits_[0] |= 0x00000040u;
}
void OpenSourceReport::clear_has_message() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpenSourceReport::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& OpenSourceReport::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* OpenSourceReport::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.message)
  return message_;
}
::KismetDatasource::SubMsgbus* OpenSourceReport::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void OpenSourceReport::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.message)
}

// optional .KismetDatasource.SubSpecset specset = 8;
bool OpenSourceReport::has_specset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpenSourceReport::set_has_specset() {
  _has_bits_[0] |= 0x00000080u;
}
void OpenSourceReport::clear_has_specset() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpenSourceReport::clear_specset() {
  if (specset_ != NULL) specset_->::KismetDatasource::SubSpecset::Clear();
  clear_has_specset();
}
const ::KismetDatasource::SubSpecset& OpenSourceReport::specset() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.specset)
  return specset_ != NULL ? *specset_ : *default_instance_->specset_;
}
::KismetDatasource::SubSpecset* OpenSourceReport::mutable_specset() {
  set_has_specset();
  if (specset_ == NULL) {
    specset_ = new ::KismetDatasource::SubSpecset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.specset)
  return specset_;
}
::KismetDatasource::SubSpecset* OpenSourceReport::release_specset() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.specset)
  clear_has_specset();
  ::KismetDatasource::SubSpecset* temp = specset_;
  specset_ = NULL;
  return temp;
}
void OpenSourceReport::set_allocated_specset(::KismetDatasource::SubSpecset* specset) {
  delete specset_;
  specset_ = specset;
  if (specset) {
    set_has_specset();
  } else {
    clear_has_specset();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.specset)
}

// optional string uuid = 9;
bool OpenSourceReport::has_uuid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpenSourceReport::set_has_uuid() {
  _has_bits_[0] |= 0x00000100u;
}
void OpenSourceReport::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpenSourceReport::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
 const ::std::string& OpenSourceReport::uuid() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.OpenSourceReport.uuid)
}
 void OpenSourceReport::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.OpenSourceReport.uuid)
}
 void OpenSourceReport::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.OpenSourceReport.uuid)
}
 ::std::string* OpenSourceReport::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenSourceReport::release_uuid() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.uuid)
}

// optional string warning = 10;
bool OpenSourceReport::has_warning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpenSourceReport::set_has_warning() {
  _has_bits_[0] |= 0x00000200u;
}
void OpenSourceReport::clear_has_warning() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpenSourceReport::clear_warning() {
  warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warning();
}
 const ::std::string& OpenSourceReport::warning() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.OpenSourceReport.warning)
  return warning_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_warning(const ::std::string& value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.OpenSourceReport.warning)
}
 void OpenSourceReport::set_warning(const char* value) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.OpenSourceReport.warning)
}
 void OpenSourceReport::set_warning(const char* value, size_t size) {
  set_has_warning();
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.OpenSourceReport.warning)
}
 ::std::string* OpenSourceReport::mutable_warning() {
  set_has_warning();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.OpenSourceReport.warning)
  return warning_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenSourceReport::release_warning() {
  // @@protoc_insertion_point(field_release:KismetDatasource.OpenSourceReport.warning)
  clear_has_warning();
  return warning_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenSourceReport::set_allocated_warning(::std::string* warning) {
  if (warning != NULL) {
    set_has_warning();
  } else {
    clear_has_warning();
  }
  warning_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.OpenSourceReport.warning)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbeSource::kDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbeSource::ProbeSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ProbeSource)
}

void ProbeSource::InitAsDefaultInstance() {
}

ProbeSource::ProbeSource(const ProbeSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ProbeSource)
}

void ProbeSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbeSource::~ProbeSource() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ProbeSource)
  SharedDtor();
}

void ProbeSource::SharedDtor() {
  definition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProbeSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbeSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProbeSource_descriptor_;
}

const ProbeSource& ProbeSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ProbeSource* ProbeSource::default_instance_ = NULL;

ProbeSource* ProbeSource::New(::google::protobuf::Arena* arena) const {
  ProbeSource* n = new ProbeSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbeSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.ProbeSource)
  if (has_definition()) {
    definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProbeSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ProbeSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string definition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.ProbeSource.definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ProbeSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ProbeSource)
  return false;
#undef DO_
}

void ProbeSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ProbeSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.ProbeSource.definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->definition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ProbeSource)
}

::google::protobuf::uint8* ProbeSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ProbeSource)
  // required string definition = 1;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.ProbeSource.definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->definition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ProbeSource)
  return target;
}

int ProbeSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.ProbeSource)
  int total_size = 0;

  // required string definition = 1;
  if (has_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->definition());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbeSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.ProbeSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProbeSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbeSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.ProbeSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.ProbeSource)
    MergeFrom(*source);
  }
}

void ProbeSource::MergeFrom(const ProbeSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.ProbeSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_definition()) {
      set_has_definition();
      definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProbeSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.ProbeSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeSource::CopyFrom(const ProbeSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.ProbeSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProbeSource::Swap(ProbeSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbeSource::InternalSwap(ProbeSource* other) {
  definition_.Swap(&other->definition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbeSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProbeSource_descriptor_;
  metadata.reflection = ProbeSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbeSource

// required string definition = 1;
bool ProbeSource::has_definition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProbeSource::set_has_definition() {
  _has_bits_[0] |= 0x00000001u;
}
void ProbeSource::clear_has_definition() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProbeSource::clear_definition() {
  definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_definition();
}
 const ::std::string& ProbeSource::definition() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSource.definition)
  return definition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbeSource::set_definition(const ::std::string& value) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.ProbeSource.definition)
}
 void ProbeSource::set_definition(const char* value) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.ProbeSource.definition)
}
 void ProbeSource::set_definition(const char* value, size_t size) {
  set_has_definition();
  definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.ProbeSource.definition)
}
 ::std::string* ProbeSource::mutable_definition() {
  set_has_definition();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSource.definition)
  return definition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProbeSource::release_definition() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSource.definition)
  clear_has_definition();
  return definition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbeSource::set_allocated_definition(::std::string* definition) {
  if (definition != NULL) {
    set_has_definition();
  } else {
    clear_has_definition();
  }
  definition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSource.definition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbeSourceReport::kSuccessFieldNumber;
const int ProbeSourceReport::kMessageFieldNumber;
const int ProbeSourceReport::kChannelsFieldNumber;
const int ProbeSourceReport::kChansetFieldNumber;
const int ProbeSourceReport::kSpecsetFieldNumber;
const int ProbeSourceReport::kHardwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbeSourceReport::ProbeSourceReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KismetDatasource.ProbeSourceReport)
}

void ProbeSourceReport::InitAsDefaultInstance() {
  success_ = const_cast< ::KismetDatasource::SubSuccess*>(&::KismetDatasource::SubSuccess::default_instance());
  message_ = const_cast< ::KismetDatasource::SubMsgbus*>(&::KismetDatasource::SubMsgbus::default_instance());
  channels_ = const_cast< ::KismetDatasource::SubChannels*>(&::KismetDatasource::SubChannels::default_instance());
  chanset_ = const_cast< ::KismetDatasource::SubChanset*>(&::KismetDatasource::SubChanset::default_instance());
  specset_ = const_cast< ::KismetDatasource::SubSpecset*>(&::KismetDatasource::SubSpecset::default_instance());
}

ProbeSourceReport::ProbeSourceReport(const ProbeSourceReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KismetDatasource.ProbeSourceReport)
}

void ProbeSourceReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = NULL;
  message_ = NULL;
  channels_ = NULL;
  chanset_ = NULL;
  specset_ = NULL;
  hardware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProbeSourceReport::~ProbeSourceReport() {
  // @@protoc_insertion_point(destructor:KismetDatasource.ProbeSourceReport)
  SharedDtor();
}

void ProbeSourceReport::SharedDtor() {
  hardware_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete success_;
    delete message_;
    delete channels_;
    delete chanset_;
    delete specset_;
  }
}

void ProbeSourceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbeSourceReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProbeSourceReport_descriptor_;
}

const ProbeSourceReport& ProbeSourceReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datasource_2eproto();
  return *default_instance_;
}

ProbeSourceReport* ProbeSourceReport::default_instance_ = NULL;

ProbeSourceReport* ProbeSourceReport::New(::google::protobuf::Arena* arena) const {
  ProbeSourceReport* n = new ProbeSourceReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbeSourceReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KismetDatasource.ProbeSourceReport)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_success()) {
      if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
    }
    if (has_channels()) {
      if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
    }
    if (has_chanset()) {
      if (chanset_ != NULL) chanset_->::KismetDatasource::SubChanset::Clear();
    }
    if (has_specset()) {
      if (specset_ != NULL) specset_->::KismetDatasource::SubSpecset::Clear();
    }
    if (has_hardware()) {
      hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProbeSourceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KismetDatasource.ProbeSourceReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KismetDatasource.SubSuccess success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .KismetDatasource.SubMsgbus message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }

      // optional .KismetDatasource.SubChannels channels = 3;
      case 3: {
        if (tag == 26) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chanset;
        break;
      }

      // optional .KismetDatasource.SubChanset chanset = 4;
      case 4: {
        if (tag == 34) {
         parse_chanset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chanset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_specset;
        break;
      }

      // optional .KismetDatasource.SubSpecset specset = 5;
      case 5: {
        if (tag == 42) {
         parse_specset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hardware;
        break;
      }

      // optional string hardware = 6;
      case 6: {
        if (tag == 50) {
         parse_hardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KismetDatasource.ProbeSourceReport.hardware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KismetDatasource.ProbeSourceReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KismetDatasource.ProbeSourceReport)
  return false;
#undef DO_
}

void ProbeSourceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KismetDatasource.ProbeSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->success_, output);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message_, output);
  }

  // optional .KismetDatasource.SubChannels channels = 3;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->channels_, output);
  }

  // optional .KismetDatasource.SubChanset chanset = 4;
  if (has_chanset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chanset_, output);
  }

  // optional .KismetDatasource.SubSpecset specset = 5;
  if (has_specset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->specset_, output);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.ProbeSourceReport.hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hardware(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KismetDatasource.ProbeSourceReport)
}

::google::protobuf::uint8* ProbeSourceReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KismetDatasource.ProbeSourceReport)
  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->success_, false, target);
  }

  // optional .KismetDatasource.SubMsgbus message = 2;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->message_, false, target);
  }

  // optional .KismetDatasource.SubChannels channels = 3;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->channels_, false, target);
  }

  // optional .KismetDatasource.SubChanset chanset = 4;
  if (has_chanset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->chanset_, false, target);
  }

  // optional .KismetDatasource.SubSpecset specset = 5;
  if (has_specset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->specset_, false, target);
  }

  // optional string hardware = 6;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KismetDatasource.ProbeSourceReport.hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hardware(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KismetDatasource.ProbeSourceReport)
  return target;
}

int ProbeSourceReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KismetDatasource.ProbeSourceReport)
  int total_size = 0;

  // required .KismetDatasource.SubSuccess success = 1;
  if (has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_);
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional .KismetDatasource.SubMsgbus message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional .KismetDatasource.SubChannels channels = 3;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channels_);
    }

    // optional .KismetDatasource.SubChanset chanset = 4;
    if (has_chanset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chanset_);
    }

    // optional .KismetDatasource.SubSpecset specset = 5;
    if (has_specset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->specset_);
    }

    // optional string hardware = 6;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbeSourceReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KismetDatasource.ProbeSourceReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProbeSourceReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbeSourceReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KismetDatasource.ProbeSourceReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KismetDatasource.ProbeSourceReport)
    MergeFrom(*source);
  }
}

void ProbeSourceReport::MergeFrom(const ProbeSourceReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KismetDatasource.ProbeSourceReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      mutable_success()->::KismetDatasource::SubSuccess::MergeFrom(from.success());
    }
    if (from.has_message()) {
      mutable_message()->::KismetDatasource::SubMsgbus::MergeFrom(from.message());
    }
    if (from.has_channels()) {
      mutable_channels()->::KismetDatasource::SubChannels::MergeFrom(from.channels());
    }
    if (from.has_chanset()) {
      mutable_chanset()->::KismetDatasource::SubChanset::MergeFrom(from.chanset());
    }
    if (from.has_specset()) {
      mutable_specset()->::KismetDatasource::SubSpecset::MergeFrom(from.specset());
    }
    if (from.has_hardware()) {
      set_has_hardware();
      hardware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProbeSourceReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KismetDatasource.ProbeSourceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeSourceReport::CopyFrom(const ProbeSourceReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KismetDatasource.ProbeSourceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeSourceReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_success()) {
    if (!this->success_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  if (has_chanset()) {
    if (!this->chanset_->IsInitialized()) return false;
  }
  return true;
}

void ProbeSourceReport::Swap(ProbeSourceReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbeSourceReport::InternalSwap(ProbeSourceReport* other) {
  std::swap(success_, other->success_);
  std::swap(message_, other->message_);
  std::swap(channels_, other->channels_);
  std::swap(chanset_, other->chanset_);
  std::swap(specset_, other->specset_);
  hardware_.Swap(&other->hardware_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbeSourceReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProbeSourceReport_descriptor_;
  metadata.reflection = ProbeSourceReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbeSourceReport

// required .KismetDatasource.SubSuccess success = 1;
bool ProbeSourceReport::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProbeSourceReport::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void ProbeSourceReport::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProbeSourceReport::clear_success() {
  if (success_ != NULL) success_->::KismetDatasource::SubSuccess::Clear();
  clear_has_success();
}
const ::KismetDatasource::SubSuccess& ProbeSourceReport::success() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSourceReport.success)
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
::KismetDatasource::SubSuccess* ProbeSourceReport::mutable_success() {
  set_has_success();
  if (success_ == NULL) {
    success_ = new ::KismetDatasource::SubSuccess;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSourceReport.success)
  return success_;
}
::KismetDatasource::SubSuccess* ProbeSourceReport::release_success() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSourceReport.success)
  clear_has_success();
  ::KismetDatasource::SubSuccess* temp = success_;
  success_ = NULL;
  return temp;
}
void ProbeSourceReport::set_allocated_success(::KismetDatasource::SubSuccess* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSourceReport.success)
}

// optional .KismetDatasource.SubMsgbus message = 2;
bool ProbeSourceReport::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProbeSourceReport::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ProbeSourceReport::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProbeSourceReport::clear_message() {
  if (message_ != NULL) message_->::KismetDatasource::SubMsgbus::Clear();
  clear_has_message();
}
const ::KismetDatasource::SubMsgbus& ProbeSourceReport::message() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSourceReport.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::KismetDatasource::SubMsgbus* ProbeSourceReport::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::KismetDatasource::SubMsgbus;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSourceReport.message)
  return message_;
}
::KismetDatasource::SubMsgbus* ProbeSourceReport::release_message() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSourceReport.message)
  clear_has_message();
  ::KismetDatasource::SubMsgbus* temp = message_;
  message_ = NULL;
  return temp;
}
void ProbeSourceReport::set_allocated_message(::KismetDatasource::SubMsgbus* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSourceReport.message)
}

// optional .KismetDatasource.SubChannels channels = 3;
bool ProbeSourceReport::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProbeSourceReport::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
void ProbeSourceReport::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProbeSourceReport::clear_channels() {
  if (channels_ != NULL) channels_->::KismetDatasource::SubChannels::Clear();
  clear_has_channels();
}
const ::KismetDatasource::SubChannels& ProbeSourceReport::channels() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSourceReport.channels)
  return channels_ != NULL ? *channels_ : *default_instance_->channels_;
}
::KismetDatasource::SubChannels* ProbeSourceReport::mutable_channels() {
  set_has_channels();
  if (channels_ == NULL) {
    channels_ = new ::KismetDatasource::SubChannels;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSourceReport.channels)
  return channels_;
}
::KismetDatasource::SubChannels* ProbeSourceReport::release_channels() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSourceReport.channels)
  clear_has_channels();
  ::KismetDatasource::SubChannels* temp = channels_;
  channels_ = NULL;
  return temp;
}
void ProbeSourceReport::set_allocated_channels(::KismetDatasource::SubChannels* channels) {
  delete channels_;
  channels_ = channels;
  if (channels) {
    set_has_channels();
  } else {
    clear_has_channels();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSourceReport.channels)
}

// optional .KismetDatasource.SubChanset chanset = 4;
bool ProbeSourceReport::has_chanset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProbeSourceReport::set_has_chanset() {
  _has_bits_[0] |= 0x00000008u;
}
void ProbeSourceReport::clear_has_chanset() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProbeSourceReport::clear_chanset() {
  if (chanset_ != NULL) chanset_->::KismetDatasource::SubChanset::Clear();
  clear_has_chanset();
}
const ::KismetDatasource::SubChanset& ProbeSourceReport::chanset() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSourceReport.chanset)
  return chanset_ != NULL ? *chanset_ : *default_instance_->chanset_;
}
::KismetDatasource::SubChanset* ProbeSourceReport::mutable_chanset() {
  set_has_chanset();
  if (chanset_ == NULL) {
    chanset_ = new ::KismetDatasource::SubChanset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSourceReport.chanset)
  return chanset_;
}
::KismetDatasource::SubChanset* ProbeSourceReport::release_chanset() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSourceReport.chanset)
  clear_has_chanset();
  ::KismetDatasource::SubChanset* temp = chanset_;
  chanset_ = NULL;
  return temp;
}
void ProbeSourceReport::set_allocated_chanset(::KismetDatasource::SubChanset* chanset) {
  delete chanset_;
  chanset_ = chanset;
  if (chanset) {
    set_has_chanset();
  } else {
    clear_has_chanset();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSourceReport.chanset)
}

// optional .KismetDatasource.SubSpecset specset = 5;
bool ProbeSourceReport::has_specset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProbeSourceReport::set_has_specset() {
  _has_bits_[0] |= 0x00000010u;
}
void ProbeSourceReport::clear_has_specset() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProbeSourceReport::clear_specset() {
  if (specset_ != NULL) specset_->::KismetDatasource::SubSpecset::Clear();
  clear_has_specset();
}
const ::KismetDatasource::SubSpecset& ProbeSourceReport::specset() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSourceReport.specset)
  return specset_ != NULL ? *specset_ : *default_instance_->specset_;
}
::KismetDatasource::SubSpecset* ProbeSourceReport::mutable_specset() {
  set_has_specset();
  if (specset_ == NULL) {
    specset_ = new ::KismetDatasource::SubSpecset;
  }
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSourceReport.specset)
  return specset_;
}
::KismetDatasource::SubSpecset* ProbeSourceReport::release_specset() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSourceReport.specset)
  clear_has_specset();
  ::KismetDatasource::SubSpecset* temp = specset_;
  specset_ = NULL;
  return temp;
}
void ProbeSourceReport::set_allocated_specset(::KismetDatasource::SubSpecset* specset) {
  delete specset_;
  specset_ = specset;
  if (specset) {
    set_has_specset();
  } else {
    clear_has_specset();
  }
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSourceReport.specset)
}

// optional string hardware = 6;
bool ProbeSourceReport::has_hardware() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProbeSourceReport::set_has_hardware() {
  _has_bits_[0] |= 0x00000020u;
}
void ProbeSourceReport::clear_has_hardware() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProbeSourceReport::clear_hardware() {
  hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware();
}
 const ::std::string& ProbeSourceReport::hardware() const {
  // @@protoc_insertion_point(field_get:KismetDatasource.ProbeSourceReport.hardware)
  return hardware_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbeSourceReport::set_hardware(const ::std::string& value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KismetDatasource.ProbeSourceReport.hardware)
}
 void ProbeSourceReport::set_hardware(const char* value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KismetDatasource.ProbeSourceReport.hardware)
}
 void ProbeSourceReport::set_hardware(const char* value, size_t size) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KismetDatasource.ProbeSourceReport.hardware)
}
 ::std::string* ProbeSourceReport::mutable_hardware() {
  set_has_hardware();
  // @@protoc_insertion_point(field_mutable:KismetDatasource.ProbeSourceReport.hardware)
  return hardware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProbeSourceReport::release_hardware() {
  // @@protoc_insertion_point(field_release:KismetDatasource.ProbeSourceReport.hardware)
  clear_has_hardware();
  return hardware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProbeSourceReport::set_allocated_hardware(::std::string* hardware) {
  if (hardware != NULL) {
    set_has_hardware();
  } else {
    clear_has_hardware();
  }
  hardware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware);
  // @@protoc_insertion_point(field_set_allocated:KismetDatasource.ProbeSourceReport.hardware)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace KismetDatasource

// @@protoc_insertion_point(global_scope)
