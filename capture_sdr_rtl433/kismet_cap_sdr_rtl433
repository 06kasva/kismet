#!/usr/bin/env python

import json
import requests
import os
import subprocess
import argparse
import uuid
import sys
import time
from datetime import datetime

class kismet_rtl433:
    def __init__(self):
        parser = argparse.ArgumentParser(description='RTL433 to Kismet bridge - Creates a rtl433 data source on a Kismet server and passes JSON-based records from the rtl_433 binary',
                epilog='Requires the rtl_433 tool (install your distributions package or compile from https://github.com/merbanan/rtl_433)')
        
        parser.add_argument('--uri', 
                action="store", 
                dest="uri", 
                default="http://localhost:2501",
                help="Kismet REST server to use (default: http://localhost:2501")

        parser.add_argument('--user', 
                action="store", 
                dest="user", 
                default="kismet",
                help="Kismet admin user (default: kismet)")

        parser.add_argument('--password', 
                action="store", 
                dest="password", 
                default="kismet",
                help="Kismet admin password")

        parser.add_argument('--uuid', 
                action="store", 
                dest="uuid",
                help="RTL433 datasource UUID")

        parser.add_argument('--name', 
                action="store", 
                dest="name",
                help="RTL433 datasource name")

        parser.add_argument('--no-reconnect', 
                action="store_false", 
                dest="reconnect", 
                default=True,
                help="Disable re-connection if the rtl_433 binary fails")

        parser.add_argument('--rtl433', 
                action="store", 
                dest="rtlbin", 
                default="rtl_433",
                help="Path to rtl_433 binary (only needed if rtl_433 is not installed in a default system location")

        parser.add_argument('--device', 
                action="store", 
                dest="device",
                help="RTL433 device number (passed as '-d' to rtl_433)")

        parser.add_argument('--gain', 
                action="store", 
                dest="gain",
                help="RTL433 device gain (passed as '-g' to rtl_433)")

        parser.add_argument('--frequency', 
                action="store", 
                dest="frequency",
                help="RTL433 device frequency (passed as '-f' to rtl_433)")
        
        self.config = parser.parse_args()
        
        if not self.config.uuid is None:
            try:
                u = uuid.UUID(self.config.uuid)
                self.config.uuid = u
            except ValueError:
                print "Expected UUID string 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'"
                sys.exit(1)

        self.session = requests.Session()
        self.session.auth = (self.config.user, self.config.password)

    def get_uuid(self):
        return self.config.uuid

    def get_rtlbin(self):
        return self.config.rtlbin

    def check_login(self):
        r = self.session.get("{}/session/check_session".format(self.config.uri))

        if not r.status_code == 200:
            raise RuntimeError("Invalid username/password")

    def find_datasource(self):
        r = self.session.get("{}/datasource/all_sources.json".format(self.config.uri))

        if not r.status_code == 200:
            return None

        sources = json.loads(r.content)

        for s in sources:
            if s['kismet.datasource.type_driver']['kismet.datasource.driver.type'] == 'rtl433':
                return s

        return None

    def check_datasource(self):
        r = self.session.get("{}/datasource/by-uuid/{}/source.json".format(self.config.uri, self.config.uuid))

        if not r.status_code == 200:
            return False

        return True

    def create_datasource(self):
        datasource = "rtl433:type=rtl433"

        if not self.config.uuid is None:
            datasource = "{},uuid={}".format(datasource, self.config.uuid)

        if not self.config.name is None:
            datasource = "{},name={}".format(datasource, self.config.name)

        cmd = {
            "definition": datasource
        }

        pd = {
            "json": json.dumps(cmd)
        }

        r = self.session.post("{}/datasource/add_source.json".format(self.config.uri), data=pd)

        if not r.status_code == 200:
            return False

        devobj = json.loads(r.content)

        self.config.uuid = devobj['kismet.datasource.uuid']

        return True

    def has_alert(self):
        r = self.session.get("{}/alerts/definitions.json".format(self.config.uri))

        if not r.status_code == 200:
            return False

        alerts = json.loads(r.content)

        for a in alerts:
            if a['kismet.alert.definition.header'] == "RTL433DCON":
                return True

        return False

    def create_alert(self):
        cmd = {
            "name": "RTL433DCON",
            "description": "rtl433 binary has encountered an error",
            "phyname": "RTL433",
            "throttle": "1/sec",
            "burst": "1/sec"
        }

        pd = {
            "json": json.dumps(cmd)
        }

        print pd

        r = self.session.post("{}/alerts/definitions/define_alert.json".format(self.config.uri), data=pd)

        if not r.status_code == 200:
            return False

        return True

    def check_rtl_bin(self):
        try:
            FNULL = open(os.devnull, 'w')
            r = subprocess.check_call([self.config.rtlbin, "--help"], stdout=FNULL, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError:
            return True
        except OSError:
            return False

        return True

    def run_rtl(self):
        cmd = [ self.config.rtlbin, '-F', 'json' ]

        if not self.config.device is None:
            cmd.append('-d')
            cmd.append(self.config.device)

        if not self.config.gain is None:
            cmd.append('-g')
            cmd.append(self.config.gain)

        if not self.config.frequency is None:
            cmd.append('-f')
            cmd.append(self.config.frequency)

        try:
            FNULL = open(os.devnull, 'w')
            r = subprocess.Popen(cmd, stderr=FNULL, stdout=subprocess.PIPE)

            while True:
                l = r.stdout.readline()
                if len(l) < 5:
                    raise RuntimeError('empty/junk rtl_433 response')

                now = datetime.now()

                pd = {
                    "meta": json.dumps({
                        "tv_sec": now.second,
                        "tv_usec": now.microsecond
                    }),
                    "device": l
                }

                print l

                self.session.post("{}/datasource/by-uuid/{}/update.json".format(self.config.uri, self.config.uuid), data=pd)

        except Exception:
            r.kill()

    def rtl_loop(self):
        while True:
            rtl.check_login()

            if not rtl.has_alert():
                rtl.create_alert()
                print "alert created"
            else:
                print "alert already present"
   
            d_created = False
            d_present = rtl.check_datasource()
            print "datasource present:", d_present

            if d_present:
                d_created = True
            else:
                d_created = rtl.create_datasource()

                if not d_created:
                    print "Could not create rtl433 data source"
                
            print "connected to rtl433 data source", rtl.get_uuid()

            print "Launching ", self.config.rtlbin
            self.run_rtl()
            
            if not self.config.reconnect:
                break

            time.sleep(1)

if __name__ == '__main__':
    rtl = kismet_rtl433()

    if not rtl.check_rtl_bin():
        print "Could not find rtl_433 binary '{}': Check that you installed rtl_433 or use --rtl433 to set it".format(rtl.get_rtlbin())
        sys.exit(1)
    else:
        print "Found rtl_433"

    rtl.rtl_loop()

