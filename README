Kismet 2009-02-TEST1
Mike Kershaw <dragorn@kismetwireless.net>
http://www.kismetwireless.net

1.  What is Kismet

    Kismet is an 802.11 wireless network detector, sniffer, and intrusion
    detection system.  Kismet will work with any wireless card which
    supports raw monitoring mode, and can sniff 802.11b, 802.11a, 802.11g,
    and 802.11n traffic (devices and drivers permitting).

    Kismet also sports a plugin architecture allowing for additional
    non-802.11 protocols to be decoded.

    Kismet identifies networks by passively collecting packets and detecting
    networks, which allows it to detect (and given time, expose the names
    of) hidden networks and the presence of non-beaconing networks via data
    traffic.

2.  Upgrading from earlier Kismet versions

    This release marks a major change in how Kismet works and is configured.
    While many aspects are similar, many others (the client, configuring
    sources and channels, etc) are very different.  

    To take advantage of the new features, replace your existing
    configuration files with the latest configuration data.
    
    Most notably:
     * Sources are defined differently.  See the "Capture Sources" section.
     * All UI configuration is handled inside the Kismet client and stored
       in the users home directory in ~/.kismet/kismet_ui.conf
     * Most situations which were previously fatal conditions which caused
       Kismet to exit can now be recovered from.
     * New filtering options
     * New alert options

3.  Quick start

    PLEASE read the full manual, but for the impatient, here is the BARE
    MINIMUM needed to get Kismet working:

    * Download Kismet from http://www.kismetwireless.net/download.shtml
    * Run "./configure".  Pay attention to the output!  If Kismet cannot
      find all the headers and libraries it needs, major functionality may
      be missing.  Most notably, compiling Kismet yourself will require
      the development packages and headers, usually called foo-dev or
      foo-devel.
    * Compile Kismet with "make".
    * Install Kismet with either "make install" or "make suidinstall".
      YOU MUST READ THE "SUID INSTALLATION & SECURITY" SECTION OF THE 
      README OR YOUR SYSTEM MAY BE INSECURE.
    * If you have installed Kismet as suid-root, add your user to the
      "kismet" group

    * Run "kismet".  If you did not install Kismet with suid-root support,
      you need to start it as root in nearly all situations.  This is not
      recommended as it is less secure than privsep mode, where packet
      processing is segregated from admin rights.
    * When prompted to start the Kismet server, choose "Yes"
    * When prompted to add a capture interface, add your wireless interface.
      In nearly all cases, Kismet will autodetect the device type and
      supported channels.  If it does not, you will have to manually define
      the capture type (as explained later in this README)
    * Logs will be stored in the directory you started Kismet from, unless
      changed via the "logprefix" config file or "--log-prefix" startup
      option.

    * READ THE REST OF THIS README.  Kismet has a lot of features and a lot
      of configuration options, to get the most out of it you should read
      all of the documentation.

3b.  Windows Quick Start

    Using the CACE Package:

    * Download the Win32/Cygwin installer created by CACE and linked from
      the download page (http://www.kismetwireless.net/download.shtml
    * Run the installer
    * Start Kismet
    * Pick your AirPcap or Kismet Drone sources

    * READ THE READ OF THIS README.

    Compiling it yourself:

    * Download the Cygwin setup tool (http://www.cygwin.org)
    * Install Cygwin with make, GCC, libncurses, libncurses-dev
    * Download the Airpcap_Devpack from CACE Support
    * Put Airpcap_Devpack and Libpcap_Devpack in the kismet source directory
    * Run "./configure"
    * Compile Kismet with "make".
    * Install Kismet with "make install"

    NOTE: KISMET WILL **ONLY** WORK WITH THE CACE AIRPCAP DEVICE, SAVED PCAP
    FILES, -OR- REMOTE KISMET DRONES RUNNING ON A SUPPORTED PLATFORM.  NO 
    OTHER HARDWARE IS SUPPORTED IN WINDOWS, PERIOD.  WINDOWS DRIVERS DO NOT 
    INCLUDE SUPPORT FOR WIFI MONITORING WHICH KISMET REQUIRES.  THERE IS NO
    WAY TO CHANGE THIS.

3c.  OSX/Darwin Quick Start

    * Download Kismet from http://www.kismetwireless.net/download.shtml
    * Run "./configure".  Pay attention to the output!  If Kismet cannot
      find all the headers and libraries it needs, major functionality may
      be missing.  Notably, you may need to install libpcap manually.

      The libpcap included with OSX does not support PPI logging.  Kismet
      will not be able to log to PPI correctly.

      Configure will automatically detect OSX and default to the group
      "staff" for OSX suidinstall.

    * Compile Kismet with "make".
    * Install Kismet with either "make install" or "make suidinstall".
      YOU MUST READ THE "SUID INSTALLATION & SECURITY" SECTION OF THE 
      README OR YOUR SYSTEM MAY BE VULNERABLE.
    * If you have installed Kismet as suid-root, add your user to the
      "staff" group if it is not already.

    * Run "kismet".  If you did not install Kismet with suid-root support,
      you need to start it as root in nearly all situations.  This is not
      recommended as it is less secure than privsep mode, where packet
      processing is segregated from admin rights.
    * When prompted to start the Kismet server, choose "Yes"
    * When prompted to add a capture interface, add your wireless interface.
      In nearly all cases, Kismet will autodetect the device type and
      supported channels.  If it does not, you will have to manually define
      the capture type (as explained later in this README)

      For many Macs, this will be 'en1', however start a terminal and check
      the output of "ifconfig -a".

      The wireless interface must be enabled in the wireless control panel
      for Kismet to work, otherwise it will not find any networks.

      Kismet currently ONLY works with the Airport wireless devices, NOT USB
      WIRELESS DEVICES.
    * Logs will be stored in the directory you started Kismet from, unless
      changed via the "logprefix" config file or "--log-prefix" startup
      option.

    * READ THE REST OF THIS README

4.  Suidroot & Security

    In order to configure the wireless card for monitor mode and start
    capturing packets, Kismet needs root access.  There are two ways to
    accomplish this:  Start Kismet as root, or install it so that the
    control components are set to start as root.

    Starting Kismet as root means that Kismet will continue running as root.
    In theory this presents no additional risk, however if there are any
    flaws in the Kismet packet dissection code then it may be possible for a
    malicious packet to cause code execution as root.  Additionally,
    third-party plugins will run as root, and may not be secure.

    Installing Kismet as suid-root creates a limited-functionality binary
    (kismet_capture) which is only launchable by members of the "kismet"
    group.  Kismet uses this to configure cards and control the channels,
    while packet decoding happens only in the user component, significantly
    limiting the attack surface.

    Distributions are strongly encouraged to use this method as it allows
    standard group controls for what users can use Kismet to change card
    states.

    Embedded systems typically have much less storage space and RAM, and
    often do not enforce user/root separation as strictly due to these
    limitations.  On embedded systems, Kismet may be installed without the
    kismet_capture binary and run in root mode only, however the above
    risks still apply.

5.  Capture sources

    All packets in Kismet come from a capture source.  Capture sources are
    typically network cards on the local system, however they can also be a
    previously recorded file or a remote capture system running a Kismet
    drone.

    Kismet will, in most cases, autodetect the driver and supported channels
    for a capture source given only the network interface.  For many users
    this will be sufficient, however many expanded options are available for
    capture sources.

    Kismet captures packets at the 802.11 layer.  This requires changing the
    mode of the network interface, making it unavailable for normal use.  In
    most cases it is not possible to remain associated to a wireless network
    while running Kismet on the same interface.

    Capture sources may be added via the Kismet UI under the "Add Source"
    option, in which case the options may be added under the "Options:"
    field, comma separated.  They may also be defined in the kismet.conf
    configuration file as the "ncsource=" option, such as:
        ncsource=wlan0:option1=foo,option2=bar

    Source options:
      name=foo          Custom name for the source (otherwise it will be
                         named the same as the capture interface).  This is
                         completely arbitrary and meaningful only to the
                         user.
      type=foo          Sources which can not autodetect the type must have
                         the type specified.  A full list of supported source
                         types can be found later in this README.
      uuid=foo          Users wishing a static unique identifier on sources
                         may specify one here.  This is not necessary for
                         most users.  UUID is of the format:
                           XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
      hop=true|false    Disable channel hopping on this source.  Default
                         behavior is for channel sources to hop channels to
                         cover the entire spectrum.  
      velocity=#        Channel hop velocity (number of channels per
                         second), Kismet can hop 1-10 channels per second.
      dwell=#           Channel dwell time, the number of seconds Kismet
                         will wait on each channel.  If hopping is enabled
                         and a channel dwell time is specified, Kismet will
                         hop at N seconds per channel, instead of N channels
                         per second.
      channellist=name  Use an alternate channel list instead of the
                         autodetected list of channels supported by this
                         interface.  The channellist must be defined.
      split=true|false  When multiple sources use the same channel list
                         (either autodetected or by the channellist= option)
                         Kismet will split them so that they do not cover the
                         same channels at the same time.  Sources can be 
                         forced to ignore this and begin hopping at the
                         beginning of the channel list regardless of overlap.
      retry=true|false  Kismet will attempt to re-open a capture source
                         which has encountered an error.  This behavior can
                         be disabled if the user wants the source to remain
                         closed.
      vap=interface     Create a secondary named interface for capture
                         instead of trying to change the mode of the
                         existing interface.  This is primarily only for use
                         by drivers using the mac80211 interface under
                         Linux.  Users wishing to do Kismet+Managed or
                         Kismet+Injection should create a vap.
      wpa_scan=time     When using a mac80211 VAP, Kismet can use
                         wpa_supplicant on a managed interface to trigger
                         hardware assisted scans, enabling some view of the
                         rest of the spectrum without significantly
                         disrupting operation of the managed VAP.  Suggested
                         time for scan intervals is 15 seconds.
      validatefcs=t|f   True/False.  Kismet normally will not bother trying
                         to validate the FCS checksum of incoming packets
                         because most drivers only report valid frames in
                         the first place.  Packet sources which report
                         invalid frames by default will enable this option
                         automatically.  If the drivers have been manually
                         configured to report invalid packets, this should
                         be specified to prevent Kismet from processing
                         broken packets.

    Example sources:
      Capture on wlan0, channel 6, don't channel hop
       ncsource=wlan0:hop=false,channel=6

      Capture on wlan0, 802.11b channels only even if it supports 5GHz
       ncsource=wlan0:channellist=IEEE80211b

      Create a VAP on wlan0 named wlan0mon and use wpa_supplicant to
      give us some view of other channels, while remaining associated to a
      network:
       ncsource=wlan0:vap=wlan0mon,hop=false,wpa_scan=15
                       
6.  Other Configuration

    Kismet is divided into two main processes:  kismet_server and
    kismet_client.  The server portion (responsible for capture, logging,
    and decoding) is controlled by kismet.conf (by default in
    /usr/local/etc) and the client is configured via preferences options.

    For the most part, Kismet can run with no additional configuration by
    adding capture sources runtime with the UI, however for
    standalone/headless operation or advanced configuration, users will want
    to edit the config file.

    The Kismet config is a plain text file with option=value pairs.  Lines
    beginning with # are considered comments and are ignored.

    Most configuration options are self-explanatory or documented in the
    config file itself.

To be replaced soon.  See README.newcore for devel info.

NOTE: NEWCORE HAS CHANGED HOW THINGS ARE CONFIGURED IN SOME SIGNIFICANT
WAYS, BUT BY USING DIFFERENT OPTIONS THE CONFIG FILE CAN STILL BE SHARED WITH
KISMET-STABLE.  REFER TO THE KISMET DEVEL BLOG, THIS README, AND THE COMMENTS
IN CONF/KISMET.CONF FOR THE NEW CONFIGURATION OPTIONS.

New security model:

Kismet now uses a suid-root group-exec-only helper binary called kismet_capture
which allows it to control and capture from interfaces.  When installed in suid
mode, this program will be installed as group-executable only for the Kismet
group.

Kismet can be run without installation and WITHOUT PRIVILEGE SEPARATION by
running it out of the source directory as root.

In either use, this REMOVES the need to specify a user to drop privs to.

Newcore sources:

In an attempt to make it easier to configure, Newcore has a new source config
format:

ncsource=interface[:[option,]+]

For interfaces where autodetect is supported, all that is needed is
ncsource=wlan0

For interfaces where autodetect does not work the "type" option is used:

ncsource=wifi0:type=madwifi_g

Multiple options can be included:

ncsource=wlan0:name=intel,hop=false,channel=11

Available source options:
    name=foo            Name the source (otherwise it will be referred 
                         to by the interface)
    type=foo            Set the type (such as iwl4965, madwfifi_g, etc) for types
                         which can not be auto-detected
    uuid=foo            Force a specific UUID for this source (not needed for
                         most users)
    hop=true|false      Control hopping on this source
    velocity=#          Set the channel hop velocity of this source
    weakvalidate        Do not strongly force packet validation (somtimes needed
                         for handling FCS data)
    channellist=list    Use named channel list
    channel=#           Set a channel/frequency
    dwell=#             Dwell on each channel for # seconds
    split=true|false    Disable channel list splitting (will not share a list of
                         channels over multiple sources)
    retry=true|false    Attempt to re-open a device which has failed
                        (default true)
    vap=interface       Create a VAP interface (mac80211)
    wpa_scan=time       When using a mac80211 VAP, trigger wpa_supplicant
                        scans at regular intervals (useful for sta+rfmon
                        mvap)
    validatefcs=t|f     True/False - validate the FCS (if the driver passes
                        packets which don't have a valid FCS.  Few do.)

Newcore channels:

In an attempt to make it easier to configure, Newcore has a new channel config
format:

channellist=name:channel,channel,channel

Additionally individual channels can be weighted so that more time is spent
on them:

channellist=foo:1:3,6:3,11:3,2,3,4,5,7,8,9,10

would wait 3 times longer on channels 1, 6, 11 than on the other channels.

Channels may also be defined as ranges of the format:

channellist=foo:range-1-11-3-1

Ranges will automatically hop in a non-overlapping pattern, may be specified
as frequencies, and may be combined with normal channel definitions or
as a series of ranges.

Ranges are NOT, however, shared between sources.  Multiple sources hopping
on the same range may be synced and duplicate coverage, however multiple
sources hopping on the same channel definition containing ranges will be
split over the total channel list (in other words, ranges are treated as
a single channel entry).

Currently, extremely large channel ranges may have unexpected negative
results when the server reports channel status.

